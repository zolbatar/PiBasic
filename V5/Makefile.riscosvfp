CXX=~/gccsdk/cross/bin/arm-riscos-gnueabihf-g++
CXX_FLAGS=-D RISCOS -D USE_UTF8_INSTEAD_OF_CODECVT -I$$GCCSDK_INSTALL_ENV/include -mfpu=vfpv2 -mfloat-abi=softfp -Wall -Wno-reorder -Wno-switch -Wextra -std=c++11 -ffast-math -Isrc/antlr4 -O3
LIBS=-lm -L$$GCCSDK_INSTALL_ENV/lib
BIN=daricvfp
BUILD_DIR=./buildriscosvfp

# List of all .cpp source files.
CPP =	$(wildcard src/*.cpp) \
		$(wildcard src/compiler/*.cpp) \
		$(wildcard src/debugger/*.cpp) \
		$(wildcard src/debugger/manual/*.cpp) \
		$(wildcard src/engine/*.cpp) \
		$(wildcard src/graphics/*.cpp) \
		$(wildcard src/interactive/*.cpp) \
		$(wildcard src/libs/*.cpp) \
		$(wildcard src/parser/*.cpp) \
		$(wildcard src/vm/*.cpp) \
		$(wildcard src/antlr4/*.cpp) \
		$(wildcard src/antlr4/atn/*.cpp) \
		$(wildcard src/antlr4/dfa/*.cpp) \
		$(wildcard src/antlr4/misc/*.cpp) \
		$(wildcard src/antlr4/support/*.cpp) \
		$(wildcard src/antlr4/atn/*.cpp) \
		$(wildcard src/antlr4/tree/*.cpp) \
		$(wildcard src/antlr4/tree/pattern/*.cpp) \
		$(wildcard src/antlr4/tree/xpath/*.cpp) \

# All .o files go to build dir.
OBJ = $(CPP:%.cpp=$(BUILD_DIR)/%.o)

# Gcc/Clang will create these .d files containing dependencies.
DEP = $(OBJ:%.o=%.d)

# Default target named after the binary.
$(BIN) : $(BUILD_DIR)/$(BIN)

# Actual target of the binary - depends on all .o files.
$(BUILD_DIR)/$(BIN) : $(OBJ)
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) $(LIBS) $^ -o $@

# Include all .d files
-include $(DEP)

# Build target for every single object file.
# The potential dependency on header files is covered	
# by calling `-include $(DEP)`.
$(BUILD_DIR)/%.o : %.cpp 
	mkdir -p $(@D)
	$(CXX) $(CXX_FLAGS) -MMD -c $< -o $@

.PHONY : clean
clean :
	# This should remove all generated files.
	-rm $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)
