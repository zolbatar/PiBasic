#line 2 "src/parser/flex.cpp"

#line 4 "src/parser/flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 223
#define YY_END_OF_BUFFER 224
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[694] =
    {   0,
        0,    0,  224,  222,    2,    3,  222,  221,  202,  201,
        7,  217,  218,   24,   22,  219,   23,  203,   25,  200,
        4,    9,   26,    8,   27,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  220,    6,    2,  199,
        2,    3,    0,  204,    0,  202,  201,   16,   14,   15,
      203,    0,    5,   17,  203,  200,    4,   20,   10,   19,
       11,   21,  215,  214,  213,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,   66,
       67,  216,  216,  216,  119,  216,  216,  216,  216,  216,
      216,  216,   72,  216,  110,  216,  216,  131,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
       91,  216,  216,  216,  216,  216,  216,  216,  216,    2,
      199,  199,    0,  204,    0,    0,  203,   18,   12,   13,
      127,  115,  109,  100,  126,  122,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  136,  216,  124,
      216,  216,  216,  216,  128,  216,   35,  116,  216,   37,

      216,  111,  121,  216,  216,  216,  216,  216,  216,  211,
       55,   56,  216,  216,  216,  216,  216,  216,  216,  216,
      114,  216,  216,  106,   65,  216,  216,  216,  216,  120,
      216,  216,  117,  216,  216,  216,  112,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  129,  216,  216,  177,
      216,  216,  216,  216,  216,  216,   82,  216,  216,  216,
      130,  216,  216,  125,  216,   87,  118,  216,  216,  216,
      123,  216,  216,  216,  216,  216,  216,  216,  216,  132,
      216,  216,  216,  216,  216,  216,  216,  180,  216,  216,
       31,  216,  101,  216,  216,  216,  216,  216,  182,   34,

      216,  216,  216,   36,    0,  216,  216,  216,  216,  216,
      216,   52,  216,  188,  216,  216,  141,  142,  216,  209,
      210,  211,  211,   57,  216,  216,   61,  216,  216,  216,
      216,  216,  216,  216,  145,  216,  216,  216,  216,  104,
      216,  216,   71,  216,  216,  216,  216,  147,  216,  216,
      216,  216,   78,   79,  216,    0,    1,  215,  214,  213,
      216,  216,  216,  216,  216,  216,  216,    0,  216,  216,
      216,  216,  216,  216,  216,   88,  107,  216,   89,  150,
       90,   92,  216,  216,  216,  134,   96,  216,  216,   98,
      216,  216,  216,  216,   28,  184,   29,  216,   32,  216,

      216,  216,  216,  216,  216,  216,  216,    0,    0,    0,
        0,    0,    0,  216,   41,  216,   39,  216,  216,  216,
      216,  133,   54,  216,  113,   58,  216,   60,  216,  178,
       62,   64,  216,  102,  216,  103,  216,  216,   69,  216,
      216,  216,  216,  216,  216,  216,   70,  216,  216,  216,
      216,   85,  216,  148,   77,  212,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,    0,    0,
      216,  194,  216,  216,  189,  216,  195,  216,  216,  216,
       93,  216,  216,  216,   97,  216,   99,  183,  216,  216,
      216,  135,  216,  137,   33,  139,  216,  208,  216,  216,

        0,   47,    0,   46,    0,    0,    0,  216,  216,  216,
      216,  216,   53,  216,   59,  216,   63,  216,  216,  216,
      216,  216,  216,  156,  157,  158,  159,  160,  161,  162,
      163,  191,   73,  216,   75,  216,  212,  212,  216,  165,
      166,  167,  168,  169,  170,  171,  172,  216,  190,   80,
      216,   86,  105,   83,   84,  193,  216,  149,  216,  216,
      216,  216,  216,  216,  216,  187,  216,  179,  216,  138,
      216,  216,  207,  206,  208,  208,  216,  216,    0,    0,
        0,    0,    0,   38,  216,   42,   43,  216,  216,  216,
      216,  185,  216,  216,  181,  164,   74,  216,  173,  216,

       81,  216,  216,  143,  108,  216,  216,  216,   94,  216,
      216,  216,  216,  140,  216,  205,  216,   45,    0,   49,
       50,    0,  216,   44,  216,  144,    0,  216,  216,  216,
      216,  216,  216,  216,  216,   95,  216,  174,  216,  216,
      216,  205,  205,  216,    0,   51,  216,  216,    0,   68,
      216,   76,  146,  216,  216,  216,  216,  151,  192,  196,
       30,  155,  216,    0,  216,  216,    0,  198,    0,  216,
      216,  216,  153,  152,  216,    0,   40,  216,    0,  198,
        0,  216,  216,  175,  186,   48,  216,  154,  176,  216,
      216,  197,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   26,   26,   28,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
        1,   59,    1,    1,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   58,    1,   86,    1,   87,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[88] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
        3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[715] =
    {   0,
        0,   86,  428, 5595,   87,  424,   86, 5595,   73,    0,
     5595, 5595, 5595,  392,  390, 5595,  350,   77,   86,   98,
      338, 5595,   96, 5595,   64,  155,  231,  277,  330,  370,
      153,  222,   96,  282,   97,  151,  289,  421,  463,  378,
      511,  562,  296,  243,  335,  397, 5595, 5595,  501,  128,
      137,  337,  109, 5595,  164,  175,    0, 5595, 5595, 5595,
      223,  362,  304, 5595,  454,  628,  286,  261, 5595, 5595,
     5595,  258, 5595, 5595, 5595,  127,  496,  556,  559,  623,
      628,  625,  512,  642,  663,  640,  680,  677,  689,  696,
      719,  731,  736,  741,  765,  775,  801,  753,  813,  812,

      852,  853,  862,  921,  899,  917,  918,  933,  930,  939,
      981,  970,  982, 1022, 1033, 1043, 1038, 1052, 1078, 1085,
     1092, 1095, 1097, 1130, 1137, 1140, 1143, 1149, 1180, 1155,
     1182, 1189, 1195, 1235, 1236, 1252, 1285, 1286, 1287, 1297,
     1330, 1316, 1345, 1342, 1368, 1356, 1382, 1389, 1394, 1399,
     1401, 1416, 1434, 1446, 1447, 1459, 1453, 1480, 1490, 1544,
     1552, 1562,  134,  179,  205, 1570, 1578, 5595, 5595, 5595,
     1492, 1573, 1574, 1575, 1576, 1585, 1614, 1623, 1588, 1626,
     1628, 1635, 1640, 1666, 1675, 1678, 1681, 1680, 1687, 1692,
     1718, 1730, 1731, 1732, 1741, 1744, 1753, 1770, 1779, 1845,

     1782, 1791, 1792, 1793, 1826, 1848, 1857, 1882, 1804, 1940,
     1805, 1936, 1937, 1942, 1943, 1948, 1838, 1988, 1989, 1994,
     1995, 2000, 2010, 2007, 2040, 2045, 2050, 2052, 2059, 2062,
     2071, 2110, 2092, 2101, 2104, 2126, 2119, 2131, 2144, 2160,
     2161, 2175, 2174, 2200, 2212, 2217, 2201, 2231, 2246, 2243,
     2326, 2381, 2252, 2382, 2383, 2388, 2426, 2400, 2433, 2435,
     2438, 2445, 2475, 2478, 2485, 2487, 2490, 2501, 2524, 2527,
     2530, 2545, 2561, 2539, 2578, 2568, 2579, 2590, 2595, 2601,
     2613, 2612, 2635, 2630, 2657, 2673, 2676, 2651, 2690, 2703,
     2691, 2702, 5595, 2717, 2732, 2716, 2747, 2750, 2729, 2762,

     2772, 2784, 2799, 2802, 2817, 2833, 2855, 2844, 2854, 2870,
     2881, 5595, 2893, 2900, 2907, 2930, 2937, 2940, 2951, 5595,
     5595,  277, 3002,  235, 2952, 2999, 3002, 3004, 3005, 3043,
     3044, 3045, 3050, 3084, 3066, 3096, 3099, 3106, 3136, 5595,
     3162, 3105, 3111, 3155, 3161, 3174, 3184, 3196, 3207, 3214,
     3276, 3283, 5595, 3213, 3276,  221,  218,  184,  180,  166,
     3352,    0, 3278, 3281, 3352, 3353, 3354,  153, 3355, 3364,
     3367, 3404, 3407, 3409, 3416, 3418, 5595, 3421, 3423, 3456,
     3461, 3463, 3466, 3472, 3503, 3477, 3506, 3515, 3517, 3520,
     3529, 3532, 3558, 3567, 5595, 3569, 5595, 3570, 3572, 3579,

     3612, 3610, 3619, 3622, 3684, 3680, 3629,  158,  221,  164,
      153,  147,  165, 3681, 3682, 3687, 3693, 3726, 3731, 3733,
     3745, 3743, 3744, 3782, 3783, 5595, 3789, 3794, 3795, 3801,
     3832, 3816, 3834, 3835, 3847, 5595, 3846, 3872, 3849, 3884,
      385, 1527, 1930,  562,  596,  424, 3886, 3887, 3897, 3928,
     3935, 3909, 3947, 3949, 3954, 4012, 1932, 2294, 4020,  606,
      624,  459, 4009, 4010, 4015, 4016, 4056, 4074,  143,  134,
     4059, 4068, 4073, 4090, 4071, 4108, 4111, 4124, 4125, 4127,
     5595, 4134, 4164, 4165, 4146, 4179, 4177, 4180, 4206, 4217,
     4190, 4220, 4236, 4227, 5595, 4246, 4257, 4308, 4304, 4305,

      162, 5595,  216, 5595,  218,  223,  232, 4310, 4320, 4321,
     4354, 4355, 4360, 4367, 4365, 4370, 5595, 4404, 4405, 4410,
     4416, 4422,  819,  477,  487,  509,  634,  850,  856,  863,
      893, 4453, 4456, 4463, 4462, 4465,  899, 4528, 1534,  911,
      930,  948, 1001, 1032, 1140, 1229, 1257, 4505, 4524, 4526,
     4536, 4538, 5595, 5595, 5595, 4543, 4569, 4553, 4578, 4584,
     4590, 4607, 4625, 4628, 4640, 4642, 4655, 4665, 4667, 4677,
     4680, 4690, 5595, 5595, 1286, 4748, 4758, 4754,  240,  248,
      278,  294,  288, 4756, 4759, 4761, 4766, 4768, 4773, 4799,
     4839, 4812, 4814, 4821, 4824, 1334, 4826, 4833, 1365, 4855,

     4864, 4870, 4873, 4876, 5595, 4895, 4911, 4916, 4922, 4932,
     4925, 4955, 4962, 4937, 4972, 5030, 5007, 5595,  321, 5595,
     5595,  370, 5026, 5028, 5033, 5038,  666, 5045, 5047, 5068,
     5082, 5084, 5094, 5107, 5109, 5095, 5132, 5134, 5146, 5153,
     5165, 1496, 5215, 5147,  371, 5595, 5211, 5188,  204, 5213,
     5218, 5223, 5228, 5229, 5258, 5267, 5240, 5270, 5279, 5281,
     5288, 5293, 5326,  366, 5310, 5327,  333, 5595,  503, 5337,
     5336, 5370, 5353, 5375, 5376,  376, 5382, 5392,  392,  430,
      986, 5393, 5422, 5427, 5432, 5595, 5434, 5439, 5444, 5445,
     5474, 5479, 5595, 5548,  128, 5550, 5553, 5555, 5557, 5559,

     5561, 5563, 5566, 5569, 5571, 5573, 5575, 5577, 5579, 5581,
     5583, 5585, 5588, 5591
    } ;

static const flex_int16_t yy_def[715] =
    {   0,
      693,    1,  693,  693,  693,  693,  694,  693,  693,  695,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  696,  696,   27,   27,   27,
       30,   30,   29,   29,   29,   29,   29,   27,   27,   29,
       29,   29,   29,   29,   29,   29,  693,  693,  693,  693,
      693,  693,  694,  693,  697,  693,  695,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  698,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   27,   29,   29,   29,   29,   29,

       29,   29,   29,  699,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  111,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  693,
      693,  693,  694,  694,  697,  693,  693,  693,  693,  693,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,  700,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      693,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  693,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,  693,   29,   29,   29,   29,   29,
       29,  693,   29,   29,   29,   29,   29,   29,   29,  693,
      693,  701,  700,  693,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  693,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      702,   29,  693,   29,   29,  703,  693,  703,  703,  703,
      704,  251,   29,   29,   29,   29,   29,  693,   29,   29,
       29,   29,   29,   29,   29,   29,  693,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  693,   29,  693,   29,   29,   29,

       29,   29,   29,   29,  705,   29,   29,  693,  693,  693,
      693,  693,  693,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  693,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  693,   29,   29,   29,   29,
      698,  698,  698,  698,  698,  698,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  706,  698,  698,  698,  698,
      698,  698,   29,   29,   29,   29,   29,   29,  693,  693,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      693,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  693,   29,   29,  707,   29,   29,

      693,  693,  693,  693,  693,  693,  693,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  693,   29,   29,   29,
       29,   29,  698,  698,  698,  698,  698,  698,  698,  698,
      698,   29,   29,   29,   29,   29,  708,  706,  698,  698,
      698,  698,  698,  698,  698,  698,  698,   29,   29,   29,
       29,   29,  693,  693,  693,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  693,  693,  709,  707,  710,   29,  693,  693,
      693,  693,  693,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  698,   29,   29,  698,   29,

       29,   29,   29,   29,  693,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  711,   29,  693,  693,  693,
      693,  693,   29,   29,   29,   29,  693,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  712,  711,   29,  693,  693,   29,   29,  713,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  693,   29,   29,  713,  693,  714,   29,
       29,   29,   29,   29,   29,  693,   29,   29,  713,  713,
      714,   29,   29,   29,   29,  693,   29,   29,   29,   29,
       29,   29,    0,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693
    } ;

static const flex_int16_t yy_nxt[5683] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    4,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   33,   33,   35,   36,   37,   38,   39,   33,   40,
       41,   42,   43,   44,   45,   33,   46,   33,    4,    4,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   33,
       33,   35,   36,   37,   38,   39,   33,   40,   41,   42,
       43,   44,   45,   33,   46,   47,   48,   49,   51,   49,
       51,   54,   56,   56,   71,   72,   61,   61,   61,   61,

       61,   61,   61,   61,   63,   50,   50,   50,   50,   50,
       50,   50,   50,   62,   54,   65,   64,   66,   66,   66,
       66,   66,   66,   66,   66,   68,   69,   70,   77,  112,
       57,   73,   77,  113,   74,   75,   77,  114,   51,   54,
       51,   62,  115,  116,   55,   65,  555,  162,  162,  162,
      162,  162,  162,  162,  162,  554,   77,  112,   56,   73,
       77,  113,   74,   75,   77,  114,   53,   55,  357,  164,
      115,  116,  469,  470,   76,   76,   76,   76,   76,   76,
       76,   76,  357,  117,   54,  101,  357,   77,   78,   79,
      501,  118,   55,  102,   56,   56,  103,  119,  104,  105,

       80,  504,  505,  506,  507,   81,   82,   53,   77,  668,
      164,  117,  579,  101,   76,   77,   78,   79,  501,  118,
      357,  102,  165,  357,  103,  119,  104,  105,   80,  504,
      505,  506,  507,   81,   82,   73,   77,   55,   74,   75,
      579,  426,   61,   61,   61,   61,   61,   61,   61,   61,
       76,   76,   76,   76,   76,   76,   76,   76,  106,   62,
       56,  580,  669,  165,  581,  107,  502,   77,  108,   83,
      582,  109,  583,  503,   84,  155,  618,   77,   85,  156,
       86,   73,  619,   77,  320,  321,  106,   62,  170,  580,
       76,  169,  581,  107,  502,   77,  108,   83,  582,  109,

      583,  503,   84,  155,  618,   77,   85,  156,   86,   87,
      619,   77,  620,   67,   77,   77,   88,   89,   77,  110,
       90,   77,   77,   91,   77,  120,   92,  111,   77,   77,
      621,  622,   77,   93,  168,  121,   77,   87,  668,   52,
      620,  154,   77,   77,   88,   89,   77,  110,   90,   77,
       77,   91,   77,  120,   92,  111,   77,   77,  621,  622,
       77,   93,   94,  121,   77,   67,   95,   77,   77,  154,
       96,   77,  645,   77,  157,  158,  166,   77,  166,   77,
       60,  167,  167,  167,  167,  167,  167,  167,  167,   73,
       94,  669,   74,   75,   95,   77,   77,  668,   96,   77,

      645,   77,  157,  158,  523,   77,  646,   77,   77,  524,
      133,  664,  676,   97,  134,   98,   99,   77,  135,   77,
       59,  686,   58,  136,  137,  100,   52,  693,   73,   77,
      693,   74,   75,  159,  646,  668,   77,   77,  133,  664,
      676,   97,  134,   98,   99,   77,  135,   77,  531,  686,
      669,  136,  137,  100,  122,  693,  693,   77,  123,   77,
      693,  159,  693,   73,   77,   77,   74,   75,  124,  693,
      125,  126,  127,   61,   61,   61,   61,   61,   61,   61,
       61,   73,  122,  547,   74,   75,  123,   77,  669,  693,
       62,   73,   77,  693,   74,   75,  124,  693,  125,  126,

      127,   77,  160,  128,  160,  667,  129,  693,  680,  130,
       77,  693,  131,   73,  132,  693,   74,   75,   62,  693,
      161,  161,  161,  161,  161,  161,  161,  161,   77,   77,
      693,  128,   77,  693,  129,  693,   77,  130,   77,  693,
      131,  693,  132,   77,   77,  138,  693,   77,  177,  139,
      140,  141,   77,  693,  693,  693,   77,  142,  143,  144,
       77,  681,  145,  693,   77,  146,   73,  693,  693,   74,
       75,   77,   77,  138,  693,   77,  177,  139,  140,  141,
       77,  529,  693,  693,  693,  142,  143,  144,   77,  693,
      145,   77,   77,  146,  147,   77,   77,  693,  148,   77,

       73,  149,  150,   74,   75,  693,  171,  693,  151,  172,
       73,  152,  693,   74,   75,  530,   77,  693,  153,   77,
       77,  693,  147,   77,   77,  545,  148,   77,   73,  149,
      150,   74,   75,  693,  171,  693,  151,  172,   73,  152,
      693,   74,   75,  546,  693,   65,  153,   66,   66,   66,
       66,   66,   66,   66,   66,   77,  693,   77,  173,   77,
       77,   77,  174,   77,   77,   77,  693,  627,   77,  627,
      176,  649,   77,  175,  178,  693,  181,  693,   77,  693,
       77,  693,   77,   77,  693,   77,  173,   77,   77,   77,
      174,   77,   77,   77,  179,   77,   77,  693,  176,   77,

       77,  175,  178,   77,  181,  693,   77,  693,   77,  183,
       77,  693,   77,   77,  693,  180,   77,   77,  693,  693,
       77,   77,  179,   77,  693,   77,  184,   77,   77,   77,
      182,   77,   77,  693,  693,  693,  186,  183,  185,  693,
       77,   77,  187,  180,   77,   77,  188,  693,   77,   77,
      693,   77,  693,   77,  184,   77,   77,   77,  182,   77,
       77,  693,  189,   77,  186,  693,  185,  191,  192,  190,
      187,   77,   77,   77,  188,  693,   77,   77,  693,   77,
      693,   77,  693,   77,  693,   77,  693,   77,  200,   77,
      189,   77,  193,   77,  693,  191,  192,  190,  693,   77,

       77,   77,  194,  195,   77,   77,  693,   77,  196,   77,
      693,   77,   77,   77,   77,   77,  200,   77,  693,  197,
      193,   77,  693,   73,  693,  693,   74,   75,  198,  693,
      194,  195,  693,   77,  693,   77,  196,   77,  596,   77,
       77,   77,   77,   77,   77,   77,  693,  197,   77,   77,
      201,  199,   77,   77,   73,  693,  198,   74,   75,  203,
       73,   77,  202,   74,   75,   77,  693,   73,  693,   77,
       74,   75,   77,   77,  693,  693,   77,   77,  201,  199,
       77,   77,  693,  693,   77,   77,  204,  203,   77,  206,
      202,  693,   77,   77,   77,  205,  207,   73,   77,  693,

       74,   75,  208,   73,  693,  693,   74,   75,  209,  693,
      693,  693,   77,   77,  204,   73,   77,  206,   74,   75,
       77,   77,   77,  205,  207,   73,   77,  693,   74,   75,
      208,   77,  693,  693,   73,   77,  209,   74,   75,   77,
       76,   76,   76,   76,   76,   76,   76,   76,  211,   77,
       77,  693,   73,   77,   77,   74,   75,   77,   77,   77,
      693,  693,  216,   77,  213,   77,  217,   77,  212,   77,
       77,   77,  693,   77,  693,   77,  211,   77,   77,   77,
       76,   77,   77,  214,  215,   77,   77,  693,  667,  693,
      216,  680,  213,   77,  217,  693,  212,   77,   77,   77,

      693,   77,   77,   77,  693,   73,   77,   77,   74,   75,
       77,  214,  215,   77,   77,  693,  693,   77,   77,  223,
      222,   77,   77,  218,  693,  693,  693,  224,  219,  693,
       77,  220,  221,  225,   77,  693,   73,  693,   77,   74,
       75,   77,   77,  693,  681,   77,   77,  223,  222,   77,
       77,  218,  693,  693,   77,  224,  219,  693,   77,  220,
      221,  225,   77,  693,  693,   77,  693,  226,  693,   77,
       77,  693,  227,   77,   77,  228,  231,  229,   77,   77,
      693,  230,   77,   77,   77,  693,   77,  232,   77,  693,
       77,  693,   77,   77,  693,  226,  693,   77,   77,  693,

      227,   77,   77,  228,  231,  229,   77,   77,  693,  230,
       77,   77,   77,  233,   77,  232,   77,   77,   77,  693,
       77,   77,  693,  234,   77,   77,  693,   77,   77,   77,
      235,   77,   77,   77,  693,   77,  238,   77,   77,  693,
      236,  233,   77,  237,   73,   77,   77,   74,   75,   77,
      693,  234,   77,   77,  693,   77,   77,   77,  235,   77,
       77,   77,   77,   77,  238,   77,  239,  693,  236,   77,
       77,  237,   77,   77,  240,   77,   77,   77,  693,   77,
       77,   77,  241,   77,  693,   77,  693,   77,  693,   77,
       77,   77,  693,  693,  239,  243,  693,   77,   77,  693,

       77,   77,  240,   77,   77,   77,  693,   77,   77,   77,
      241,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  244,  243,  693,   77,  242,   77,  245,   77,
      247,   77,  693,   73,  693,   77,   74,   75,  246,  693,
       77,  693,   77,  693,   77,  693,   77,  693,   77,   77,
      244,  693,  693,   77,  242,   77,  245,   77,  247,   77,
      693,   73,  693,   77,   74,   75,  246,  248,   77,  249,
      250,  693,   77,  693,  256,  693,   77,   77,  693,  251,
      252,  693,  253,  693,   77,  254,  255,  257,   77,  693,
       73,  693,   77,  573,  574,  248,   77,  249,  250,  693,

       77,  693,  256,  693,   77,   77,  693,  251,  252,  693,
      253,  693,   77,  254,  255,  257,   77,   77,  259,   77,
       77,   77,   77,   77,  693,   77,   77,   77,  693,  262,
      693,  693,  261,   77,  693,  260,  258,   77,   73,  693,
      693,   74,   75,  263,  693,   77,  259,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  262,  693,  265,
      261,   77,   77,  260,  258,   77,   77,  693,  693,   73,
       77,  263,   74,   75,   77,  264,   77,   77,   77,  266,
       77,   77,   77,  693,   77,   77,  693,  265,  270,  693,
       77,  267,   77,  693,   77,  693,   77,  693,   77,  693,

       77,  693,   77,  264,  268,   77,   77,  266,   77,   77,
       77,  693,  693,   77,   77,  693,  270,  269,   77,  267,
       77,   77,   77,  693,   77,   77,   77,  271,   77,   77,
      273,   77,  268,   77,   77,   77,   77,   77,  693,   77,
      693,   77,   77,  274,  272,  269,   77,  693,  275,   77,
       77,  693,   77,   77,   77,  271,  276,   77,  273,   77,
      693,   77,   77,   77,  693,   77,   77,   77,  277,   77,
       77,  274,  272,  693,   77,  693,  275,  693,   77,   77,
       77,  278,   77,   77,  276,   77,   77,   77,  693,  282,
      280,   77,  693,  283,   77,   77,  277,  279,   77,   77,

       73,  693,   77,   74,   75,  693,   77,   77,  281,  278,
       77,   77,   77,   77,   77,   77,   77,  282,  280,   77,
       77,  283,   77,   77,   77,  279,   77,   77,   77,  284,
       77,   73,   77,  285,   74,   75,  281,  693,   73,  693,
       77,   74,   75,  693,   77,  160,  525,  160,   77,  693,
       77,  526,   77,  599,   77,  693,   77,  284,   77,  693,
       77,  285,  693,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,   65,
      693,  162,  162,  162,  162,  162,  162,  162,  162,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  693,  693,
       77,   77,  693,  693,  288,   77,  693,  693,   77,  693,
      693,  693,  693,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  693,   77,   77,
       77,  693,  288,   77,   77,   77,   77,  287,   77,   77,
      290,  693,   77,   77,   77,  286,   77,   77,   77,  693,
      693,  291,   77,  293,   77,   77,   77,  289,   77,  693,
      292,  693,   77,   77,  693,  287,   77,   77,  290,  693,
       77,   77,   77,  286,   77,   77,   77,  693,   77,  291,

       77,  693,   77,   77,   77,  289,   77,   77,  292,  294,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  693,   77,   77,  295,   77,   77,   77,  693,
       77,  296,   77,  297,   77,   77,  693,  294,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      298,   77,   77,  295,   77,   77,   77,  693,   77,  296,
       77,  297,   77,  300,   77,  693,   77,   77,   77,  301,
       77,   77,   77,   77,  693,  299,   77,   77,  298,  302,
      303,   77,   77,  693,   77,   77,   77,  693,  312,   77,
       77,  300,   77,   77,   77,   77,   77,  301,   77,   77,

       77,   77,   77,  299,   77,   77,   77,  302,  303,   77,
       77,   77,   77,   77,   77,  304,  693,   77,   77,   77,
      693,   77,   77,   77,   77,   77,  693,   77,  313,  314,
       77,   77,   77,   77,   77,  693,  319,   77,   77,   77,
       77,   77,   77,  304,   77,   77,   77,   77,  305,  693,
       77,   77,   77,   77,  693,   77,  313,  314,   77,   77,
       77,   77,   77,  693,  319,   77,   77,  693,   77,   77,
       77,  693,   77,   77,  329,  693,  315,   77,   77,  306,
       77,   77,  307,  693,   77,  308,   77,  693,   77,   77,
       77,  316,  309,   77,   77,  693,  310,   77,   77,  311,

      317,  693,  329,  693,  315,   77,   77,  306,   77,   77,
      307,  693,   77,  308,   77,  693,   77,   77,   77,  316,
      309,   77,   77,  693,  310,   77,  693,  311,  317,  318,
      693,  693,  693,  693,   73,  693,   73,   74,   75,   74,
       75,  693,   77,  324,   73,  693,   77,  320,  321,  527,
       77,  539,  693,  693,  528,  693,  540,  318,  693,  322,
      322,  322,  322,  322,  322,  322,  322,  693,   77,   77,
      325,  693,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  693,   77,   77,   77,  693,  693,  693,   77,  327,
      693,  693,  693,  693,  326,  328,   77,   77,  325,  322,

       77,   77,   77,   77,   77,   77,   77,   77,   77,  693,
       77,   77,   77,  693,  693,  693,   77,  327,  693,  693,
       77,   77,  326,  328,  330,   77,   77,   77,   77,   77,
       77,   77,   77,  693,   77,   77,   77,  693,  693,   77,
       77,  331,   77,   77,  693,  332,   77,   77,   77,   77,
       77,  333,  330,   77,   77,   77,   77,   77,   77,   77,
       77,  334,   77,   77,   77,  693,  693,   77,   77,  331,
       77,   77,   77,  332,   77,   77,   77,   77,   77,  333,
       77,  335,   77,  693,   77,   77,   77,  337,   77,  334,
       77,  338,   77,  693,   77,   77,  693,  693,   77,   77,

       77,  336,   77,   77,   77,   77,  693,  339,   77,  335,
       77,   77,   77,   77,   77,  337,   77,  340,   77,  338,
       77,  693,   77,   77,   77,  693,   77,   77,   77,  336,
       77,   77,   77,   77,  693,  339,   77,   77,  693,   77,
       77,   77,   77,  693,   77,  693,   77,  341,  693,  693,
       77,   77,   77,  693,  342,   77,   77,  693,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  344,   77,   77,
       77,   77,   77,  693,   77,  341,   77,  343,   77,   77,
       77,  693,  342,   77,   77,  693,   77,   77,  693,  345,
       77,   77,   77,   77,   77,  344,   77,  347,  693,   77,

       77,   77,  693,  346,   77,  343,   77,   77,   77,  693,
       77,   77,   77,  693,   77,   77,  693,  345,  693,  349,
       77,   77,  693,  353,   77,  347,  348,  693,   77,   77,
      693,  346,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  350,  351,  349,   77,   77,
      693,  693,   77,   77,  348,  693,  693,   77,  693,  352,
       77,   77,  693,   77,   77,   77,  354,   77,   77,   77,
      693,   77,   77,  350,  351,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  352,  364,  693,
      693,   77,   77,  693,  354,   77,  693,  355,   73,   77,

      693,   74,   75,   77,  693,  693,   77,   77,  693,  693,
       77,   77,   77,  541,   77,  693,  364,  693,  542,  693,
       77,  693,  693,  693,  693,  355,  356,  356,  357,  356,
      358,  356,  356,  359,  360,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  361,  361,  361,  361,  361,
      361,  361,  361,  356,  356,  356,  356,  356,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  356,  361,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  356,  356,   77,   77,   77,  363,   77,   77,   77,
       77,   77,   77,   77,   77,  693,  693,  367,   77,  693,
      693,  693,  369,  365,  693,  366,   77,  368,  693,  693,
       77,   77,   77,   77,  363,   77,   77,   77,   77,   77,
       77,   77,   77,  693,  693,  367,   77,  693,   77,  693,
      369,  365,   77,  366,   77,   77,   77,   77,   77,   77,
       77,  371,  693,   77,   77,   77,  370,   77,   77,  693,
      372,   77,  693,  693,  693,   77,   77,  693,  693,  693,
       77,  693,  373,   77,   77,   77,  693,   77,   77,  371,

      693,   77,   77,   77,  370,   77,   77,   77,  372,   77,
       77,   77,  693,   77,   77,   77,  693,   77,   77,   77,
      373,   77,   77,   77,  693,  375,   77,   77,  693,  374,
       77,  377,  693,   77,  693,   77,  693,   77,   77,   77,
      693,   77,   77,   77,  693,   77,   77,   77,  376,   77,
       77,   77,  693,  375,   77,   77,   77,  374,   77,   77,
       77,   77,   77,   77,  378,   77,   77,   77,  693,   77,
       77,   77,  693,  693,  379,  382,  376,   77,  693,   77,
      693,   77,  693,  693,   77,   77,  693,   77,   77,  693,
       77,   77,  378,   77,   77,   77,  380,   77,   77,   77,

      385,   77,  379,  382,   77,   77,  381,   77,   77,   77,
       77,   77,  383,   77,   77,  386,  693,  693,   77,   77,
      693,   77,   77,  384,  380,   77,  387,   77,  385,   77,
       77,   77,   77,   77,  381,  388,   77,   77,   77,   77,
      383,   77,   77,  386,   77,   77,   77,   77,   77,   77,
       77,  384,   77,   77,  387,   77,  693,  390,   77,   77,
      693,   77,   77,  388,  389,   77,  393,   77,  693,   77,
       77,   77,   77,   77,  693,   77,   77,   77,  391,  395,
       77,   77,  693,   77,  693,  390,  392,   77,  693,   77,
       77,   77,  389,   77,  393,   77,  397,   77,   77,   77,

      394,  693,  693,   77,  693,   77,  391,  693,   77,   77,
      693,   77,   77,   77,  392,   77,   77,   77,  396,   77,
      693,   77,   77,   77,  693,   77,   77,   77,  394,  693,
       77,   77,  693,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  398,  396,  399,   77,   77,
       77,   77,  402,   77,   77,   77,   77,   77,   77,   77,
      400,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  398,  693,  399,   77,   77,  401,   77,
      402,   77,   77,   77,   77,   77,   77,   77,  400,   77,
       77,  693,   77,   77,   77,  693,   77,   77,   77,  403,

       77,  404,   77,  693,   77,  693,  401,   77,   77,  693,
       77,   77,   77,  693,   77,   77,   77,  405,   77,  693,
       77,  693,   77,  693,   77,  693,   77,  403,  693,  404,
       77,   77,   77,  406,   77,   77,   77,  693,   77,   77,
       77,  693,   77,  693,   77,  405,  693,  693,   77,  693,
      407,  408,   77,  693,  409,  693,  693,  410,  693,   77,
      693,  406,   77,   77,  411,  414,   77,   77,  412,   77,
       77,  413,  693,   77,  693,  693,   77,  693,  407,  408,
       77,  417,  409,  693,   77,  410,   77,   77,  693,  693,
       77,   77,  411,  414,   77,   77,  412,   77,  693,  413,

      415,   77,   77,  418,   77,  693,   77,  416,   77,  417,
       77,  693,   77,   77,   77,   77,  693,   77,   77,   77,
      420,   77,   77,   77,  693,   77,  419,  421,  415,   77,
       77,  418,   77,   77,   77,  416,   77,  693,   77,   77,
       77,   77,  693,  422,  693,   77,  693,   77,  420,   77,
      693,  693,  693,   77,  419,  421,  693,   77,  693,  693,
       77,   77,   77,  693,   77,  423,   77,   77,   77,   77,
       77,  422,   77,  424,  693,   77,   77,   77,  693,  693,
       77,  693,  693,   77,  427,  693,  693,   77,   77,  693,
       77,   77,   77,  423,   77,  693,  693,   77,   77,  693,

       77,  424,  425,  693,   77,   77,   73,  693,   77,  320,
      321,   77,  427,  693,  693,   77,   77,  693,  693,   77,
       77,  322,  322,  322,  322,  322,  322,  322,  322,  693,
      425,   77,  428,  693,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  429,   77,   77,  693,  693,  693,  693,
      430,  693,  693,  693,  693,  693,  693,  693,  693,   77,
      428,  322,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  429,   77,   77,  693,   77,   77,  433,  430,   77,
       77,   77,   77,   77,   77,   77,   77,  693,  693,  693,
       77,  436,  693,  693,  434,  432,  693,  435,   77,  431,

      693,  693,   77,   77,   77,  433,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  693,   77,  693,   77,  693,
       77,  693,  434,  432,   77,  435,   77,  431,   77,  693,
       77,   77,   77,  437,   77,   77,   77,   77,   77,   77,
      693,  447,   77,   77,   77,   77,   77,   77,   77,  439,
      438,   77,   77,  693,  693,  693,   77,  693,  693,   77,
       77,  437,  693,   77,   77,   77,   77,   77,   77,  447,
       77,   77,   77,   77,   77,   77,   77,  439,  438,   77,
      693,  440,  441,  442,  443,  444,  445,   77,  446,  448,
      693,   77,  693,   77,   77,   77,   77,   77,   77,  693,

       77,  449,   77,  693,   77,  693,   77,  450,  693,  440,
       77,  693,  693,  451,  452,   77,   77,  448,  693,   77,
       77,   77,   77,   77,   77,   77,   77,  693,   77,  449,
       77,  693,   77,  453,   77,  450,   77,  693,   77,   77,
      693,  451,  452,   77,   77,   77,   77,   77,   77,   77,
       77,  693,   77,   77,   77,  693,   77,  693,  454,  693,
       77,  453,  693,  693,   77,  455,  693,   77,  693,  693,
      693,   77,  693,   77,   77,   77,  693,   77,   77,  693,
       73,   77,   77,   74,   75,  693,  454,  693,  693,  693,
      693,  693,  693,  455,  693,   76,   76,   76,   76,   76,

       76,   76,   76,  457,  458,  459,  460,  461,  463,  462,
       77,  693,   77,  465,  464,   77,   77,   77,   77,   77,
      693,   77,  693,   77,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,   76,  463,  693,   77,  693,
       77,  465,  464,   77,   77,   77,   77,   77,  693,   77,
      693,   77,  356,  356,  357,  356,  358,  356,  356,  359,
      360,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  693,  693,  693,  693,  693,  693,  693,  693,  356,
      356,  356,  356,  356,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  693,  466,   77,

      472,  693,  467,  473,   77,  468,  471,   77,  693,  693,
      356,  693,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  693,  466,   77,  472,  693,
      467,  473,   77,  468,  471,   77,   77,  356,  356,   77,
      474,   77,  693,  475,   77,   77,  476,   77,   77,   77,
       77,  477,   77,   77,   77,   77,   77,   77,   77,   77,
      693,   77,  693,   77,   77,  693,  478,   77,  474,   77,
      481,  475,   77,   77,  476,   77,   77,   77,   77,  477,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      479,   77,   77,   77,  478,   77,   77,   77,   77,   77,

      693,   77,  482,   77,   77,  480,   77,  693,   77,   77,
      693,  693,   77,   77,  693,  693,   77,   77,  479,  693,
       77,   77,  483,   77,   77,   77,   77,   77,  693,   77,
      482,   77,   77,  480,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  693,   77,   77,   77,  484,   77,
      483,   77,   77,  486,  693,   77,   77,   77,  485,  693,
       77,   77,  693,   77,   77,  487,   77,   77,  488,   77,
       77,   77,   77,  693,   77,   77,  484,   77,  693,   77,
       77,  486,  693,   77,   77,   77,  485,  693,   77,   77,
       77,  693,   77,  487,   77,  489,  488,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  490,  693,  492,  495,  491,   77,   77,
      693,  693,   77,  489,  693,  693,   77,   77,  693,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  490,   77,  492,   77,  491,   77,   77,   77,  493,
       77,   77,   77,  693,   77,   77,  693,  494,  497,   77,
      693,   77,   77,  693,  693,  500,  693,  693,  496,   77,
       77,  693,   77,  693,   77,  693,   77,  493,   77,   77,
       77,  693,   77,   77,  693,  494,  497,   77,   73,   77,
       77,   74,   75,  500,  693,  693,  496,   77,  693,  693,

      693,  693,  693,   76,   76,   76,   76,   76,   76,   76,
       76,  693,   77,   77,   77,  693,   77,   77,   77,   77,
       77,   77,   77,   77,  693,   77,  499,   77,  693,   77,
      693,  508,  509,   77,  693,  693,  693,  693,  693,  693,
       77,   77,   77,   76,   77,   77,   77,   77,   77,   77,
       77,   77,  693,   77,  499,   77,  693,   77,   77,  508,
      509,   77,   77,   77,  693,   77,   77,   77,  693,   77,
      693,   77,  510,  512,  693,   77,   77,   77,  511,   77,
       77,   77,  693,   77,   77,   77,   77,  693,  693,  693,
       77,   77,  693,   77,   77,   77,  513,   77,  693,   77,

      510,  512,  693,   77,   77,   77,  511,   77,   77,   77,
      693,   77,   77,   77,   77,   77,  693,  514,   77,   77,
      693,   77,   77,   77,  513,   77,   77,   77,  693,   77,
       77,   77,  515,   77,   77,  516,  693,   77,  693,  517,
      693,   77,   77,   77,  693,  514,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      515,   77,   77,  516,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  693,   77,   77,   77,  518,   77,   77,
       77,   77,   77,   77,   77,   77,  520,   77,  693,   77,
      693,  693,   77,  519,   77,   77,   77,  693,   77,   77,

       77,  693,   77,   77,   77,  518,   77,   77,   77,   77,
       77,   77,   77,   77,  520,   77,   77,   77,   77,   77,
       77,  519,   77,   77,   77,  693,   77,   77,  521,   77,
      693,  693,   77,   77,  693,  522,   77,   77,  532,  693,
       77,   77,  533,  693,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  693,   77,   77,  521,   77,  693,  693,
       77,   77,  693,  522,   77,   77,  532,   77,   77,   77,
      533,   77,  693,   77,  693,   77,  693,   77,  693,   77,
      534,   77,  535,   77,  693,   77,   77,   77,   77,   77,
       77,  693,   77,  693,   77,   77,   77,  693,  693,   77,

      693,  536,  693,   77,  693,  693,  693,   77,  534,   77,
      535,   77,  693,   77,   77,   77,   73,   77,   77,   74,
       75,  693,   77,  693,   73,  693,  693,   74,   75,  536,
      693,  537,  537,  537,  537,  537,  537,  537,  537,  543,
      693,   77,   77,  693,  544,   77,   77,   77,   77,   77,
       77,   77,   77,  693,  548,   77,   77,  693,  693,  549,
      693,  693,  693,  693,  693,  551,  550,  693,  693,   77,
       77,  537,  693,   77,   77,   77,   77,   77,   77,   77,
       77,  553,  548,   77,   77,  693,  693,  549,   77,  693,
      693,   77,   77,  551,  550,  556,   77,  693,  693,   77,

       77,  552,  693,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  693,   77,   77,  693,   77,  693,  557,   77,
       77,  693,   77,  556,   77,  558,   77,   77,   77,  552,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  693,  557,   77,   77,  693,
       77,   77,  693,  558,   77,  559,   77,   77,   77,   77,
       77,  561,  560,   77,   77,   77,   77,  562,   77,  693,
       77,   77,   77,  693,   77,   77,   77,  693,   77,   77,
      563,  693,   77,  559,   77,   77,   77,   77,   77,  561,
      560,   77,   77,   77,   77,  562,   77,   77,   77,  693,

       77,   77,   77,  565,   77,   77,   77,  564,  563,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  693,   77,
       77,  693,   77,  693,   77,   77,   77,  693,   77,   77,
       77,  565,   77,   77,  566,  564,  569,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  693,   77,   77,   77,  567,   77,   77,   77,   77,
       77,  693,  566,   77,  569,  693,   77,   77,   77,  693,
       77,  568,   77,  570,   77,  693,   77,   77,   77,  571,
       77,   77,   77,  567,   77,   77,   77,   77,   77,   77,
      693,   77,  693,   77,  572,   77,   77,   77,  693,  568,

       77,  570,  693,  693,   77,  693,   77,  571,  693,  693,
       77,  693,   73,  693,   77,  573,  574,   77,  693,  693,
      693,   77,  572,  693,  693,   77,  693,  575,  575,  575,
      575,  575,  575,  575,  575,  693,   77,   77,  577,  693,
       77,   77,   77,  693,   77,   77,  584,  693,  693,  693,
       77,  578,   77,   77,  585,  586,   77,   77,  693,  693,
       77,   77,  693,  693,   77,   77,  577,  575,   77,   77,
       77,  693,   77,   77,  584,  693,  693,  693,   77,  578,
       77,   77,  585,  586,   77,   77,   77,   77,   77,   77,
      587,   77,   77,  693,   77,   77,   77,   77,  588,   77,

       77,   77,   77,   77,  590,   77,   77,   77,  693,  693,
       77,  693,  693,  693,   77,   77,  693,  693,  587,   77,
       77,  589,   77,   77,   77,   77,  588,   77,   77,   77,
       77,   77,  590,   77,   77,   77,   77,   77,   77,  693,
       77,   77,   77,  693,   77,   77,   77,  591,   77,  589,
       77,  693,   77,  593,  595,  592,   77,  693,   77,  693,
      693,  693,   77,  594,   77,   77,  693,  693,   77,   77,
       77,  693,   77,   77,   77,  591,   77,  693,   77,  693,
       77,  593,  595,  592,   77,   77,   77,  693,   77,   77,
       77,  594,   77,   77,   77,   77,   77,   77,   77,   77,

      693,   77,   77,   77,  693,  598,  693,  693,  693,  693,
      693,  693,  693,   77,  597,  693,   77,   77,  693,  693,
       77,   77,   77,   77,   77,   77,   77,   77,  693,   77,
       77,   77,   73,  598,  693,   74,   75,   77,  693,  693,
      693,   77,  597,  600,  693,   77,  693,  537,  537,  537,
      537,  537,  537,  537,  537,  693,   77,  693,   77,  693,
       77,  693,   77,  693,   77,   77,   77,  693,   77,   77,
       77,  600,  601,   77,   77,   77,   77,  693,   77,   77,
      693,  693,  693,   77,   77,   77,   77,  537,   77,   77,
       77,  605,   77,   77,   77,  693,   77,  693,   77,  693,

      601,   77,   77,   77,   77,   77,   77,   77,  602,   77,
       77,   77,  693,   77,   77,  693,   77,   77,   77,  693,
       77,   77,   77,  603,   77,  693,   77,  693,  604,   77,
       77,  693,  693,   77,  693,  606,  602,   77,   77,   77,
      693,  693,   77,   77,   77,  607,   77,   77,   77,  693,
       77,  603,   77,  693,   77,  693,  604,   77,   77,  693,
      610,   77,  608,  606,   77,   77,  693,   77,   77,  693,
      609,   77,   77,  607,   77,   77,   77,  693,   77,  693,
       77,  693,   77,  611,  693,   77,  693,  612,  610,   77,
      608,   77,   77,   77,  693,   77,   77,   77,  609,   77,

       77,   77,   77,   77,   77,   77,   77,  613,   77,   77,
       77,  611,   77,   77,  693,  612,   77,   77,  614,   77,
       77,  693,   77,   77,  693,   77,   77,   77,  693,   77,
       77,   77,  693,   77,  693,  613,  615,   77,  693,  693,
       77,   77,  693,  693,   77,   77,  614,  693,   77,  693,
       77,  693,   73,  693,   77,  573,  574,  693,   77,  693,
      693,  693,   73,  693,  615,   74,   75,  575,  575,  575,
      575,  575,  575,  575,  575,  693,  693,   76,   76,   76,
       76,   76,   76,   76,   76,  693,   77,  617,   77,  693,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,  693,  624,   77,   77,  575,   77,   77,
      623,  693,  693,  625,   77,  617,   77,   76,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  624,   77,   77,   77,   77,   77,  623,   77,
      627,  625,  627,  693,   77,  693,   77,  693,   77,  626,
      628,  693,   77,   77,   77,  693,   77,  629,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  693,   77,
      693,   77,   77,   77,   77,   77,   77,  626,  628,   77,
       77,   77,   77,  630,   77,  629,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  631,   77,

       77,   77,   77,   77,   77,   77,  632,   77,   77,   77,
       77,  630,   77,  633,  693,   77,   77,  693,  693,   77,
      693,  693,  693,   77,   77,  693,  631,   77,   77,  693,
       77,   77,   77,   77,  632,   77,   77,   77,   77,  693,
       77,  633,  693,   77,   77,  693,  634,   77,   77,  693,
      635,   77,   77,  636,   77,   77,   77,   77,   77,   77,
      693,  638,   77,   77,   77,   77,  693,  693,   77,   77,
      693,   77,   77,   77,  634,   77,   77,   77,  635,   77,
       77,  636,   77,  637,   77,   77,   77,   77,  693,  638,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  639,

       77,   77,   77,  693,   77,   77,  693,  640,   77,  693,
      693,  637,   77,  693,  693,   77,  693,  641,  693,   77,
      693,  693,   77,   77,  693,  693,   77,  639,  693,  693,
       77,  693,   77,  693,   73,  640,   77,   74,   75,   77,
       77,  693,  693,   77,  693,  641,  693,   77,  644,  642,
      642,  642,  642,  642,  642,  642,  642,  693,   77,  693,
       77,  693,   77,  693,   77,   77,  647,   77,   77,   77,
       77,   77,  693,   77,   77,   77,  644,   77,   77,   77,
      693,   77,  648,   77,  651,   77,   77,   77,   77,  642,
       77,  693,   77,   77,  647,  650,   77,   77,   77,  693,

       77,   77,   77,  693,  652,   77,   77,   77,   77,   77,
      648,   77,  651,   77,   77,   77,   77,  693,  653,  693,
       77,  693,   77,  650,  654,  693,   77,   77,   77,  655,
       77,   77,  652,  693,   77,   77,   77,  693,  693,   77,
      693,   77,   77,  656,   77,   77,  653,   77,   77,   77,
       77,  693,  654,  693,   77,   77,  657,  655,   77,   77,
      658,  693,   77,   77,   77,  693,   77,   77,  659,   77,
       77,  656,   77,   77,   77,   77,  693,   77,   77,   77,
      693,  693,  660,  663,  657,   77,   77,   77,  658,   77,
      693,  693,   77,   77,   77,  693,  659,   77,   77,  693,

       77,   77,   77,  693,  661,   77,   77,   77,  693,  693,
      660,  663,  693,   77,   77,   77,  662,   77,  693,   73,
       77,   77,   74,   75,  666,   77,  693,  693,   77,   77,
      693,  693,  661,   77,  642,  642,  642,  642,  642,  642,
      642,  642,  693,   77,  662,   77,  693,   77,   77,   77,
      670,   77,  666,   77,   77,   77,   77,  665,   77,   77,
       77,   77,  693,   77,   77,   77,  693,  671,   77,   77,
      693,   77,   77,   77,  642,   77,  674,   77,  670,   77,
       77,   77,   77,   77,  693,  665,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  671,   77,   77,   77,   77,

       77,  693,   77,   77,  674,  693,   77,   77,   77,  672,
       77,   77,  693,   77,  693,   77,  673,   77,   77,   77,
       77,   77,   77,  693,   77,   77,   77,   77,   77,   77,
       77,   77,  693,   77,   77,   77,  693,  672,   77,   77,
      693,   77,   77,   77,  673,   77,   77,   77,   77,   77,
       77,  693,   77,   77,  693,  677,   77,   77,   77,   77,
      675,   77,   77,   77,  678,  693,   77,   77,   77,   77,
       77,  682,   77,   77,   77,  683,   77,   77,   77,  693,
      693,  693,  693,  677,  693,   77,   77,   77,  675,   77,
       77,   77,  678,   77,   77,   77,   77,   77,  693,  682,

       77,   77,   77,  683,   77,   77,   77,   77,   77,  684,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  693,
      693,   77,   77,  693,   77,   77,  693,  685,   77,  688,
       77,  693,   77,   77,   77,   77,   77,  684,   77,   77,
       77,  687,   77,   77,   77,  693,   77,  693,  693,  693,
       77,  693,   77,   77,   77,  685,   77,  688,   77,   77,
       77,   77,   77,   77,   77,  693,  690,   77,   77,  687,
       77,   77,   77,  689,   77,   77,   77,   77,  693,   77,
       77,   77,   77,  693,   77,   77,   77,   77,  693,  691,
       77,   77,   77,  693,  690,   77,   77,  693,   77,   77,

       77,  689,   77,   77,   77,   77,   77,   77,   77,   77,
      692,   77,   77,   77,   77,   77,  693,  691,  693,   77,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,   77,  693,  693,  693,  692,   77,
      693,  693,   77,   77,  693,  693,  693,   77,   53,   53,
       53,   77,   77,  163,  163,  163,   76,   76,  210,  210,
      323,  323,  322,  322,  456,  456,  356,  356,  356,  361,
      361,  361,  498,  498,  538,  538,  576,  576,  537,  537,
      575,  575,  616,  616,  643,  643,  642,  642,  667,  667,
      667,  679,  679,  679,    3,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693
    } ;

static const flex_int16_t yy_chk[5683] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    5,    2,
        5,    7,    9,    9,   25,   25,   18,   18,   18,   18,

       18,   18,   18,   18,   19,    2,    2,    2,    2,    2,
        2,    2,    2,   18,   53,   20,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   23,   23,   23,   33,   35,
      695,   76,   33,   35,   76,   76,   33,   35,   51,  163,
       51,   18,   35,   35,    7,   50,  470,   50,   50,   50,
       50,   50,   50,   50,   50,  469,   33,   35,    9,   26,
       33,   35,   26,   26,   33,   35,   55,   53,  360,   55,
       35,   35,  368,  368,   26,   26,   26,   26,   26,   26,
       26,   26,  359,   36,  164,   31,  358,   36,   26,   26,
      408,   36,  163,   31,   56,   56,   31,   36,   31,   31,

       26,  410,  411,  412,  413,   26,   26,  165,   31,  649,
      165,   36,  501,   31,   26,   36,   26,   26,  408,   36,
      357,   31,   55,  356,   31,   36,   31,   31,   26,  410,
      411,  412,  413,   26,   26,   27,   31,  164,   27,   27,
      501,  324,   61,   61,   61,   61,   61,   61,   61,   61,
       27,   27,   27,   27,   27,   27,   27,   27,   32,   61,
       56,  503,  649,  165,  505,   32,  409,   32,   32,   27,
      506,   32,  507,  409,   27,   44,  579,   32,   27,   44,
       27,  322,  580,   44,  322,  322,   32,   61,   72,  503,
       27,   68,  505,   32,  409,   32,   32,   27,  506,   32,

      507,  409,   27,   44,  579,   32,   27,   44,   27,   28,
      580,   44,  581,   67,   34,   28,   28,   28,   34,   34,
       28,   37,   34,   28,   28,   37,   28,   34,   43,   37,
      582,  583,   43,   28,   63,   37,   43,   28,  667,   52,
      581,   43,   34,   28,   28,   28,   34,   34,   28,   37,
       34,   28,   28,   37,   28,   34,   43,   37,  582,  583,
       43,   28,   29,   37,   43,   21,   29,   45,   29,   43,
       29,   45,  619,   29,   45,   45,   62,   29,   62,   29,
       17,   62,   62,   62,   62,   62,   62,   62,   62,  441,
       29,  667,  441,  441,   29,   45,   29,  679,   29,   45,

      619,   29,   45,   45,  441,   29,  622,   29,   30,  441,
       40,  645,  664,   30,   40,   30,   30,   30,   40,   30,
       15,  676,   14,   40,   40,   30,    6,    3,  446,   46,
        0,  446,  446,   46,  622,  680,   30,   46,   40,  645,
      664,   30,   40,   30,   30,   30,   40,   30,  446,  676,
      679,   40,   40,   30,   38,    0,    0,   46,   38,   38,
        0,   46,    0,  462,   38,   46,  462,  462,   38,    0,
       38,   38,   38,   65,   65,   65,   65,   65,   65,   65,
       65,  524,   38,  462,  524,  524,   38,   38,  680,    0,
       65,  525,   38,    0,  525,  525,   38,    0,   38,   38,

       38,   39,   49,   39,   49,  669,   39,    0,  669,   39,
       39,    0,   39,  526,   39,    0,  526,  526,   65,    0,
       49,   49,   49,   49,   49,   49,   49,   49,   77,   39,
        0,   39,   77,    0,   39,    0,   77,   39,   39,    0,
       39,    0,   39,   41,   83,   41,    0,   41,   83,   41,
       41,   41,   83,    0,    0,    0,   77,   41,   41,   41,
       77,  669,   41,    0,   77,   41,  444,    0,    0,  444,
      444,   41,   83,   41,    0,   41,   83,   41,   41,   41,
       83,  444,    0,    0,    0,   41,   41,   41,   78,    0,
       41,   79,   78,   41,   42,   79,   78,    0,   42,   79,

      445,   42,   42,  445,  445,    0,   78,    0,   42,   79,
      460,   42,    0,  460,  460,  445,   78,    0,   42,   79,
       78,    0,   42,   79,   78,  460,   42,   79,  461,   42,
       42,  461,  461,    0,   78,    0,   42,   79,  527,   42,
        0,  527,  527,  461,    0,   66,   42,   66,   66,   66,
       66,   66,   66,   66,   66,   80,    0,   82,   80,   80,
       81,   82,   81,   80,   81,   82,    0,  627,   81,  627,
       82,  627,   86,   81,   84,    0,   86,    0,   84,    0,
       86,    0,   84,   80,    0,   82,   80,   80,   81,   82,
       81,   80,   81,   82,   84,   85,   81,    0,   82,   85,

       86,   81,   84,   85,   86,    0,   84,    0,   86,   88,
       84,    0,   87,   88,    0,   85,   87,   88,    0,    0,
       87,   89,   84,   85,    0,   89,   88,   85,   90,   89,
       87,   85,   90,    0,    0,    0,   90,   88,   89,    0,
       87,   88,   90,   85,   87,   88,   90,    0,   87,   89,
        0,   91,    0,   89,   88,   91,   90,   89,   87,   91,
       90,    0,   91,   92,   90,    0,   89,   92,   93,   91,
       90,   92,   93,   94,   90,    0,   93,   94,    0,   91,
        0,   94,    0,   91,    0,   98,    0,   91,   98,   98,
       91,   92,   94,   98,    0,   92,   93,   91,    0,   92,

       93,   94,   95,   95,   93,   94,    0,   96,   95,   94,
        0,   96,   95,   98,   95,   96,   98,   98,    0,   96,
       94,   98,    0,  523,    0,    0,  523,  523,   96,    0,
       95,   95,    0,   97,    0,   96,   95,   97,  523,   96,
       95,   97,   95,   96,  100,   99,    0,   96,  100,   99,
       99,   97,  100,   99,  528,    0,   96,  528,  528,  100,
      529,   97,   99,  529,  529,   97,    0,  530,    0,   97,
      530,  530,  100,   99,    0,    0,  100,   99,   99,   97,
      100,   99,    0,    0,  101,  102,  101,  100,  101,  102,
       99,    0,  101,  102,  103,  101,  102,  531,  103,    0,

      531,  531,  103,  537,    0,    0,  537,  537,  103,    0,
        0,    0,  101,  102,  101,  540,  101,  102,  540,  540,
      101,  102,  103,  101,  102,  104,  103,    0,  104,  104,
      103,  105,    0,    0,  541,  105,  103,  541,  541,  105,
      104,  104,  104,  104,  104,  104,  104,  104,  105,  106,
      107,    0,  542,  106,  107,  542,  542,  106,  107,  105,
        0,    0,  109,  105,  107,  108,  109,  105,  106,  108,
      109,  110,    0,  108,    0,  110,  105,  106,  107,  110,
      104,  106,  107,  108,  108,  106,  107,    0,  681,    0,
      109,  681,  107,  108,  109,    0,  106,  108,  109,  110,

        0,  108,  112,  110,    0,  543,  112,  110,  543,  543,
      112,  108,  108,  111,  113,    0,    0,  111,  113,  113,
      112,  111,  113,  111,    0,    0,    0,  113,  111,    0,
      112,  111,  111,  113,  112,    0,  544,    0,  112,  544,
      544,  111,  113,    0,  681,  111,  113,  113,  112,  111,
      113,  111,    0,    0,  114,  113,  111,    0,  114,  111,
      111,  113,  114,    0,    0,  115,    0,  114,    0,  115,
      117,    0,  114,  115,  117,  116,  117,  116,  117,  116,
        0,  116,  114,  116,  118,    0,  114,  118,  118,    0,
      114,    0,  118,  115,    0,  114,    0,  115,  117,    0,

      114,  115,  117,  116,  117,  116,  117,  116,    0,  116,
      119,  116,  118,  119,  119,  118,  118,  120,  119,    0,
      118,  120,    0,  119,  121,  120,    0,  122,  121,  123,
      119,  122,  121,  123,    0,  122,  122,  123,  119,    0,
      120,  119,  119,  121,  545,  120,  119,  545,  545,  120,
        0,  119,  121,  120,    0,  122,  121,  123,  119,  122,
      121,  123,  124,  122,  122,  123,  124,    0,  120,  125,
      124,  121,  126,  125,  126,  127,  126,  125,    0,  127,
      126,  128,  127,  127,    0,  128,    0,  130,    0,  128,
      124,  130,    0,    0,  124,  130,    0,  125,  124,    0,

      126,  125,  126,  127,  126,  125,    0,  127,  126,  128,
      127,  127,  129,  128,  131,  130,  129,  128,  131,  130,
      129,  132,  131,  130,    0,  132,  129,  133,  131,  132,
      133,  133,    0,  546,    0,  133,  546,  546,  132,    0,
      129,    0,  131,    0,  129,    0,  131,    0,  129,  132,
      131,    0,    0,  132,  129,  133,  131,  132,  133,  133,
        0,  547,    0,  133,  547,  547,  132,  134,  135,  134,
      134,    0,  135,    0,  135,    0,  135,  134,    0,  134,
      134,    0,  134,    0,  136,  134,  134,  136,  136,    0,
      575,    0,  136,  575,  575,  134,  135,  134,  134,    0,

      135,    0,  135,    0,  135,  134,    0,  134,  134,    0,
      134,    0,  136,  134,  134,  136,  136,  137,  138,  139,
      136,  137,  138,  139,    0,  137,  138,  139,    0,  140,
        0,    0,  139,  140,    0,  138,  137,  140,  596,    0,
        0,  596,  596,  140,    0,  137,  138,  139,  142,  137,
      138,  139,  142,  137,  138,  139,  142,  140,    0,  142,
      139,  140,  141,  138,  137,  140,  141,    0,    0,  599,
      141,  140,  599,  599,  144,  141,  142,  143,  144,  143,
      142,  143,  144,    0,  142,  143,    0,  142,  146,    0,
      141,  144,  146,    0,  141,    0,  146,    0,  141,    0,

      145,    0,  144,  141,  145,  143,  144,  143,  145,  143,
      144,    0,    0,  143,  147,    0,  146,  145,  147,  144,
      146,  148,  147,    0,  146,  148,  149,  147,  145,  148,
      149,  150,  145,  151,  149,  150,  145,  151,    0,  150,
        0,  151,  147,  150,  148,  145,  147,    0,  152,  148,
      147,    0,  152,  148,  149,  147,  152,  148,  149,  150,
        0,  151,  149,  150,    0,  151,  153,  150,  152,  151,
      153,  150,  148,    0,  153,    0,  152,    0,  154,  155,
      152,  153,  154,  155,  152,  157,  154,  155,    0,  157,
      155,  156,    0,  157,  153,  156,  152,  154,  153,  156,

      642,    0,  153,  642,  642,    0,  154,  155,  156,  153,
      154,  155,  158,  157,  154,  155,  158,  157,  155,  156,
      158,  157,  159,  156,  171,  154,  159,  156,  171,  158,
      159,  442,  171,  159,  442,  442,  156,    0,  539,    0,
      158,  539,  539,    0,  158,  160,  442,  160,  158,    0,
      159,  442,  171,  539,  159,    0,  171,  158,  159,    0,
      171,  159,    0,  160,  160,  160,  160,  160,  160,  160,
      160,  161,  161,  161,  161,  161,  161,  161,  161,  162,
        0,  162,  162,  162,  162,  162,  162,  162,  162,  166,
      166,  166,  166,  166,  166,  166,  166,  167,  167,  167,

      167,  167,  167,  167,  167,  172,  173,  174,  175,  172,
      173,  174,  175,  172,  173,  174,  175,  176,    0,    0,
      179,  176,    0,    0,  179,  176,    0,    0,  179,    0,
        0,    0,    0,  172,  173,  174,  175,  172,  173,  174,
      175,  172,  173,  174,  175,  176,  177,    0,  179,  176,
      177,    0,  179,  176,  177,  178,  179,  178,  180,  178,
      181,    0,  180,  178,  181,  177,  180,  182,  181,    0,
        0,  182,  183,  184,  177,  182,  183,  180,  177,    0,
      183,    0,  177,  178,    0,  178,  180,  178,  181,    0,
      180,  178,  181,  177,  180,  182,  181,    0,  184,  182,

      183,    0,  184,  182,  183,  180,  184,  185,  183,  185,
      186,  185,  188,  187,  186,  185,  188,  187,  186,  189,
      188,  187,    0,  189,  190,  186,  184,  189,  190,    0,
      184,  187,  190,  189,  184,  185,    0,  185,  186,  185,
      188,  187,  186,  185,  188,  187,  186,  189,  188,  187,
      191,  189,  190,  186,  191,  189,  190,    0,  191,  187,
      190,  189,  192,  193,  194,    0,  192,  193,  194,  194,
      192,  193,  194,  195,    0,  192,  196,  195,  191,  194,
      196,  195,  191,    0,  196,  197,  191,    0,  201,  197,
      192,  193,  194,  197,  192,  193,  194,  194,  192,  193,

      194,  195,  198,  192,  196,  195,  198,  194,  196,  195,
      198,  199,  196,  197,  201,  199,    0,  197,  201,  199,
        0,  197,  201,  202,  203,  204,    0,  202,  203,  204,
      198,  202,  203,  204,  198,    0,  209,  211,  198,  199,
      209,  211,  201,  199,  209,  211,  201,  199,  200,    0,
      201,  202,  203,  204,    0,  202,  203,  204,  205,  202,
      203,  204,  205,    0,  209,  211,  205,    0,  209,  211,
      217,    0,  209,  211,  217,    0,  205,  200,  217,  200,
      206,  200,  200,    0,  206,  200,  205,    0,  206,  207,
      205,  206,  200,  207,  205,    0,  200,  207,  217,  200,

      207,    0,  217,    0,  205,  200,  217,  200,  206,  200,
      200,    0,  206,  200,  208,    0,  206,  207,  208,  206,
      200,  207,  208,    0,  200,  207,    0,  200,  207,  208,
        0,    0,    0,    0,  443,    0,  457,  443,  443,  457,
      457,    0,  208,  212,  210,    0,  208,  210,  210,  443,
      208,  457,    0,    0,  443,    0,  457,  208,    0,  210,
      210,  210,  210,  210,  210,  210,  210,    0,  212,  213,
      213,    0,  212,  213,  214,  215,  212,  213,  214,  215,
      216,    0,  214,  215,  216,    0,    0,    0,  216,  215,
        0,    0,    0,    0,  214,  216,  212,  213,  213,  210,

      212,  213,  214,  215,  212,  213,  214,  215,  216,    0,
      214,  215,  216,    0,    0,    0,  216,  215,    0,    0,
      218,  219,  214,  216,  218,  219,  220,  221,  218,  219,
      220,  221,  222,    0,  220,  221,  222,    0,    0,  224,
      222,  219,  223,  224,    0,  220,  223,  224,  218,  219,
      223,  222,  218,  219,  220,  221,  218,  219,  220,  221,
      222,  223,  220,  221,  222,    0,    0,  224,  222,  219,
      223,  224,  225,  220,  223,  224,  225,  226,  223,  222,
      225,  226,  227,    0,  228,  226,  227,  228,  228,  223,
      227,  229,  228,    0,  230,  229,    0,    0,  230,  229,

      225,  227,  230,  231,  225,  226,    0,  231,  225,  226,
      227,  231,  228,  226,  227,  228,  228,  232,  227,  229,
      228,    0,  230,  229,  233,    0,  230,  229,  233,  227,
      230,  231,  233,  234,    0,  231,  235,  234,    0,  231,
      235,  234,  232,    0,  235,    0,  232,  234,    0,    0,
      232,  237,  233,    0,  235,  237,  233,    0,  236,  237,
      233,  234,  236,  238,  235,  234,  236,  238,  235,  234,
      232,  238,  235,    0,  232,  234,  239,  236,  232,  237,
      239,    0,  235,  237,  239,    0,  236,  237,    0,  239,
      236,  238,  240,  241,  236,  238,  240,  241,    0,  238,

      240,  241,    0,  240,  239,  236,  243,  242,  239,    0,
      243,  242,  239,    0,  243,  242,    0,  239,    0,  243,
      240,  241,    0,  246,  240,  241,  242,    0,  240,  241,
        0,  240,  244,  247,  243,  242,  244,  247,  243,  242,
      244,  247,  243,  242,  245,  244,  245,  243,  245,  246,
        0,    0,  245,  246,  242,    0,    0,  246,    0,  245,
      244,  247,    0,  248,  244,  247,  248,  248,  244,  247,
        0,  248,  245,  244,  245,  250,  245,  246,  249,  250,
      245,  246,  249,  250,  253,  246,  249,  245,  253,    0,
        0,  248,  253,    0,  248,  248,    0,  249,  458,  248,

        0,  458,  458,  250,    0,    0,  249,  250,    0,    0,
      249,  250,  253,  458,  249,    0,  253,    0,  458,    0,
      253,    0,    0,    0,    0,  249,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,

      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  252,  254,  255,  252,  252,  254,  255,
      256,  252,  254,  255,  256,    0,    0,  256,  256,    0,
        0,    0,  258,  254,    0,  255,  258,  257,    0,    0,
      258,  252,  254,  255,  252,  252,  254,  255,  256,  252,
      254,  255,  256,    0,    0,  256,  256,    0,  257,    0,
      258,  254,  257,  255,  258,  259,  257,  260,  258,  259,
      261,  260,    0,  259,  261,  260,  259,  262,  261,    0,
      262,  262,    0,    0,    0,  262,  257,    0,    0,    0,
      257,    0,  262,  259,  257,  260,    0,  259,  261,  260,

        0,  259,  261,  260,  259,  262,  261,  263,  262,  262,
      264,  263,    0,  262,  264,  263,    0,  265,  264,  266,
      262,  265,  267,  266,    0,  265,  267,  266,    0,  263,
      267,  269,    0,  268,    0,  263,    0,  268,  264,  263,
        0,  268,  264,  263,    0,  265,  264,  266,  268,  265,
      267,  266,    0,  265,  267,  266,  269,  263,  267,  270,
      269,  268,  271,  270,  269,  268,  271,  270,    0,  268,
      271,  274,    0,    0,  270,  274,  268,  272,    0,  274,
        0,  272,    0,    0,  269,  272,    0,  270,  269,    0,
      271,  270,  269,  273,  271,  270,  272,  273,  271,  274,

      276,  273,  270,  274,  276,  272,  273,  274,  276,  272,
      275,  277,  275,  272,  275,  277,    0,    0,  275,  277,
        0,  273,  278,  275,  272,  273,  278,  279,  276,  273,
      278,  279,  276,  280,  273,  279,  276,  280,  275,  277,
      275,  280,  275,  277,  282,  281,  275,  277,  282,  281,
      278,  275,  282,  281,  278,  279,    0,  282,  278,  279,
        0,  280,  284,  279,  281,  280,  284,  283,    0,  280,
      284,  283,  282,  281,    0,  283,  282,  281,  283,  286,
      282,  281,    0,  288,    0,  282,  283,  288,    0,  285,
      284,  288,  281,  285,  284,  283,  289,  285,  284,  283,

      285,    0,    0,  283,    0,  286,  283,    0,  287,  286,
        0,  288,  287,  286,  283,  288,  287,  285,  287,  288,
        0,  285,  289,  291,    0,  285,  289,  291,  285,    0,
      289,  291,    0,  286,  292,  290,  287,  286,  292,  290,
      287,  286,  292,  290,  287,  290,  287,  292,  296,  294,
      289,  291,  296,  294,  289,  291,  296,  294,  289,  291,
      294,  299,  292,  290,  295,  299,  292,  290,  295,  299,
      292,  290,  295,  290,    0,  292,  296,  294,  295,  297,
      296,  294,  298,  297,  296,  294,  298,  297,  294,  299,
      298,    0,  295,  299,  300,    0,  295,  299,  300,  297,

      295,  298,  300,    0,  301,    0,  295,  297,  301,    0,
      298,  297,  301,    0,  298,  297,  302,  301,  298,    0,
      302,    0,  300,    0,  302,    0,  300,  297,    0,  298,
      300,  303,  301,  302,  304,  303,  301,    0,  304,  303,
      301,    0,  304,    0,  302,  301,    0,    0,  302,    0,
      303,  305,  302,    0,  305,    0,    0,  305,    0,  303,
        0,  302,  304,  303,  305,  306,  304,  303,  305,  306,
      304,  305,    0,  306,    0,    0,  308,    0,  303,  305,
      308,  308,  305,    0,  308,  305,  309,  307,    0,    0,
      309,  307,  305,  306,  309,  307,  305,  306,    0,  305,

      307,  306,  310,  309,  308,    0,  310,  307,  308,  308,
      310,    0,  308,  311,  309,  307,    0,  311,  309,  307,
      311,  311,  309,  307,    0,  313,  310,  313,  307,  313,
      310,  309,  314,  313,  310,  307,  314,    0,  310,  315,
      314,  311,    0,  315,    0,  311,    0,  315,  311,  311,
        0,    0,    0,  313,  310,  313,    0,  313,    0,    0,
      314,  313,  316,    0,  314,  316,  316,  315,  314,  317,
      316,  315,  318,  317,    0,  315,  318,  317,    0,    0,
      318,    0,    0,  319,  325,    0,    0,  319,  325,    0,
      316,  319,  325,  316,  316,    0,    0,  317,  316,    0,

      318,  317,  319,    0,  318,  317,  323,    0,  318,  323,
      323,  319,  325,    0,    0,  319,  325,    0,    0,  319,
      325,  323,  323,  323,  323,  323,  323,  323,  323,    0,
      319,  326,  326,    0,  327,  326,  328,  329,  327,  326,
      328,  329,  327,  328,  328,  329,    0,    0,    0,    0,
      329,    0,    0,    0,    0,    0,    0,    0,    0,  326,
      326,  323,  327,  326,  328,  329,  327,  326,  328,  329,
      327,  328,  328,  329,    0,  330,  331,  332,  329,  330,
      331,  332,  333,  330,  331,  332,  333,    0,    0,    0,
      333,  334,    0,    0,  332,  331,    0,  333,  335,  330,

        0,    0,  335,  330,  331,  332,  335,  330,  331,  332,
      333,  330,  331,  332,  333,    0,  334,    0,  333,    0,
      334,    0,  332,  331,  334,  333,  335,  330,  336,    0,
      335,  337,  336,  336,  335,  337,  336,  342,  338,  337,
        0,  342,  338,  343,  334,  342,  338,  343,  334,  338,
      337,  343,  334,    0,    0,    0,  336,    0,    0,  337,
      336,  336,    0,  337,  336,  342,  338,  337,  339,  342,
      338,  343,  339,  342,  338,  343,  339,  338,  337,  343,
        0,  339,  341,  341,  341,  341,  341,  344,  341,  344,
        0,  344,    0,  345,  341,  344,  339,  345,  341,    0,

      339,  345,  341,    0,  339,    0,  346,  345,    0,  339,
      346,    0,    0,  345,  346,  344,  347,  344,    0,  344,
      347,  345,  341,  344,  347,  345,  341,    0,  348,  345,
      341,    0,  348,  347,  346,  345,  348,    0,  346,  349,
        0,  345,  346,  349,  347,  354,  350,  349,  347,  354,
      350,    0,  347,  354,  350,    0,  348,    0,  349,    0,
      348,  347,    0,    0,  348,  350,    0,  349,    0,    0,
        0,  349,    0,  354,  350,  349,    0,  354,  350,    0,
      351,  354,  350,  351,  351,    0,  349,    0,    0,    0,
        0,    0,    0,  350,    0,  351,  351,  351,  351,  351,

      351,  351,  351,  352,  352,  352,  352,  352,  355,  352,
      363,    0,  355,  364,  363,  352,  355,  364,  363,  352,
        0,  364,    0,  352,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  351,  355,    0,  363,    0,
      355,  364,  363,  352,  355,  364,  363,  352,    0,  364,
        0,  352,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,    0,    0,    0,    0,    0,    0,    0,    0,  361,
      361,  361,  361,  361,  365,  366,  367,  369,  365,  366,
      367,  369,  365,  366,  367,  369,  370,    0,  365,  371,

      370,    0,  366,  371,  370,  367,  369,  371,    0,    0,
      361,    0,  365,  366,  367,  369,  365,  366,  367,  369,
      365,  366,  367,  369,  370,    0,  365,  371,  370,    0,
      366,  371,  370,  367,  369,  371,  372,  361,  361,  373,
      372,  374,    0,  373,  372,  374,  374,  373,  375,  374,
      376,  375,  375,  378,  376,  379,  375,  378,  376,  379,
        0,  378,    0,  379,  372,    0,  378,  373,  372,  374,
      382,  373,  372,  374,  374,  373,  375,  374,  376,  375,
      375,  378,  376,  379,  375,  378,  376,  379,  380,  378,
      380,  379,  380,  381,  378,  382,  380,  381,  383,  382,

        0,  381,  383,  382,  384,  380,  383,    0,  384,  386,
        0,    0,  384,  386,    0,    0,  380,  386,  380,    0,
      380,  381,  384,  382,  380,  381,  383,  382,    0,  381,
      383,  382,  384,  380,  383,  385,  384,  386,  387,  385,
      384,  386,  387,  385,    0,  386,  387,  388,  385,  389,
      384,  388,  390,  389,    0,  388,  390,  389,  388,    0,
      390,  391,    0,  385,  392,  391,  387,  385,  392,  391,
      387,  385,  392,    0,  387,  388,  385,  389,    0,  388,
      390,  389,    0,  388,  390,  389,  388,    0,  390,  391,
      393,    0,  392,  391,  393,  393,  392,  391,  393,  394,

      392,  396,  398,  394,  399,  396,  398,  394,  399,  396,
      398,  400,  399,  394,    0,  400,  402,  398,  393,  400,
        0,    0,  393,  393,    0,    0,  393,  394,    0,  396,
      398,  394,  399,  396,  398,  394,  399,  396,  398,  400,
      399,  394,  402,  400,  401,  398,  402,  400,  401,  401,
      402,  403,  401,    0,  404,  403,    0,  401,  404,  403,
        0,  407,  404,    0,    0,  407,    0,    0,  403,  407,
      402,    0,  401,    0,  402,    0,  401,  401,  402,  403,
      401,    0,  404,  403,    0,  401,  404,  403,  405,  407,
      404,  405,  405,  407,    0,    0,  403,  407,    0,    0,

        0,    0,    0,  405,  405,  405,  405,  405,  405,  405,
      405,    0,  406,  414,  415,    0,  406,  414,  415,  416,
      406,  414,  415,  416,    0,  417,  406,  416,    0,  417,
        0,  414,  416,  417,    0,    0,    0,    0,    0,    0,
      406,  414,  415,  405,  406,  414,  415,  416,  406,  414,
      415,  416,    0,  417,  406,  416,    0,  417,  418,  414,
      416,  417,  418,  419,    0,  420,  418,  419,    0,  420,
        0,  419,  418,  420,    0,  422,  423,  421,  419,  422,
      423,  421,    0,  422,  423,  421,  418,    0,    0,    0,
      418,  419,    0,  420,  418,  419,  421,  420,    0,  419,

      418,  420,    0,  422,  423,  421,  419,  422,  423,  421,
        0,  422,  423,  421,  424,  425,    0,  424,  424,  425,
        0,  427,  424,  425,  421,  427,  428,  429,    0,  427,
      428,  429,  427,  430,  428,  429,    0,  430,    0,  431,
        0,  430,  424,  425,    0,  424,  424,  425,  432,  427,
      424,  425,  432,  427,  428,  429,  432,  427,  428,  429,
      427,  430,  428,  429,  431,  430,  433,  434,  431,  430,
      433,  434,  431,    0,  433,  434,  432,  433,  437,  435,
      432,  439,  437,  435,  432,  439,  437,  435,    0,  439,
        0,    0,  431,  435,  433,  434,  431,    0,  433,  434,

      431,    0,  433,  434,  438,  433,  437,  435,  438,  439,
      437,  435,  438,  439,  437,  435,  440,  439,  447,  448,
      440,  435,  447,  448,  440,    0,  447,  448,  438,  449,
        0,    0,  438,  449,    0,  440,  438,  449,  448,    0,
      438,  452,  449,    0,  440,  452,  447,  448,  440,  452,
      447,  448,  440,    0,  447,  448,  438,  449,    0,    0,
      450,  449,    0,  440,  450,  449,  448,  451,  450,  452,
      449,  451,    0,  452,    0,  451,    0,  452,    0,  453,
      450,  454,  451,  453,    0,  454,  455,  453,  450,  454,
      455,    0,  450,    0,  455,  451,  450,    0,    0,  451,

        0,  453,    0,  451,    0,    0,    0,  453,  450,  454,
      451,  453,    0,  454,  455,  453,  456,  454,  455,  456,
      456,    0,  455,    0,  459,    0,    0,  459,  459,  453,
        0,  456,  456,  456,  456,  456,  456,  456,  456,  459,
        0,  463,  464,    0,  459,  463,  464,  465,  466,  463,
      464,  465,  466,    0,  463,  465,  466,    0,    0,  464,
        0,    0,    0,    0,    0,  466,  465,    0,    0,  463,
      464,  456,    0,  463,  464,  465,  466,  463,  464,  465,
      466,  468,  463,  465,  466,    0,    0,  464,  467,    0,
        0,  471,  467,  466,  465,  471,  467,    0,    0,  471,

      472,  467,    0,  475,  472,  473,  468,  475,  472,  473,
      468,  475,    0,  473,  468,    0,  467,    0,  473,  471,
      467,    0,  474,  471,  467,  474,  474,  471,  472,  467,
      474,  475,  472,  473,  468,  475,  472,  473,  468,  475,
      476,  473,  468,  477,  476,    0,  473,  477,  476,    0,
      474,  477,    0,  474,  474,  476,  478,  479,  474,  480,
      478,  479,  478,  480,  478,  479,  482,  480,  476,    0,
      482,  477,  476,    0,  482,  477,  476,    0,  485,  477,
      482,    0,  485,  476,  478,  479,  485,  480,  478,  479,
      478,  480,  478,  479,  482,  480,  483,  484,  482,    0,

      483,  484,  482,  484,  483,  484,  485,  483,  482,  487,
      485,  486,  488,  487,  485,  486,  488,  487,    0,  486,
      488,    0,  491,    0,  483,  484,  491,    0,  483,  484,
      491,  484,  483,  484,  486,  483,  491,  487,  489,  486,
      488,  487,  489,  486,  488,  487,  489,  486,  488,  490,
      491,    0,  492,  490,  491,  489,  492,  490,  491,  494,
      492,    0,  486,  494,  491,    0,  489,  494,  493,    0,
      489,  490,  493,  493,  489,    0,  493,  490,  496,  496,
      492,  490,  496,  489,  492,  490,  496,  494,  492,  497,
        0,  494,    0,  497,  497,  494,  493,  497,    0,  490,

      493,  493,    0,    0,  493,    0,  496,  496,    0,    0,
      496,    0,  498,    0,  496,  498,  498,  497,    0,    0,
        0,  497,  497,    0,    0,  497,    0,  498,  498,  498,
      498,  498,  498,  498,  498,    0,  499,  500,  499,    0,
      499,  500,  508,    0,  499,  500,  508,    0,    0,    0,
      508,  500,  509,  510,  509,  510,  509,  510,    0,    0,
      509,  510,    0,    0,  499,  500,  499,  498,  499,  500,
      508,    0,  499,  500,  508,    0,    0,    0,  508,  500,
      509,  510,  509,  510,  509,  510,  511,  512,  509,  510,
      511,  512,  513,    0,  511,  512,  513,  515,  512,  514,

      513,  515,  516,  514,  516,  515,  516,  514,    0,    0,
      516,    0,    0,    0,  511,  512,    0,    0,  511,  512,
      513,  514,  511,  512,  513,  515,  512,  514,  513,  515,
      516,  514,  516,  515,  516,  514,  518,  519,  516,    0,
      518,  519,  520,    0,  518,  519,  520,  518,  521,  514,
      520,    0,  521,  520,  522,  519,  521,    0,  522,    0,
        0,    0,  522,  521,  518,  519,    0,    0,  518,  519,
      520,    0,  518,  519,  520,  518,  521,    0,  520,    0,
      521,  520,  522,  519,  521,  532,  522,    0,  533,  532,
      522,  521,  533,  532,  535,  534,  533,  536,  535,  534,

        0,  536,  535,  534,    0,  536,    0,    0,    0,    0,
        0,    0,    0,  532,  534,    0,  533,  532,    0,    0,
      533,  532,  535,  534,  533,  536,  535,  534,    0,  536,
      535,  534,  538,  536,    0,  538,  538,  548,    0,    0,
        0,  548,  534,  548,    0,  548,    0,  538,  538,  538,
      538,  538,  538,  538,  538,    0,  549,    0,  550,    0,
      549,    0,  550,    0,  549,  548,  550,    0,  551,  548,
      552,  548,  551,  548,  552,  556,  551,    0,  552,  556,
        0,    0,    0,  556,  549,  558,  550,  538,  549,  558,
      550,  560,  549,  558,  550,    0,  551,    0,  552,    0,

      551,  557,  552,  556,  551,  557,  552,  556,  557,  557,
      559,  556,    0,  558,  559,    0,  560,  558,  559,    0,
      560,  558,  561,  557,  560,    0,  561,    0,  559,  557,
      561,    0,    0,  557,    0,  561,  557,  557,  559,  562,
        0,    0,  559,  562,  560,  562,  559,  562,  560,    0,
      561,  557,  560,    0,  561,    0,  559,  563,  561,    0,
      564,  563,  563,  561,  564,  563,    0,  562,  564,    0,
      563,  562,  565,  562,  566,  562,  565,    0,  566,    0,
      565,    0,  566,  565,    0,  563,    0,  567,  564,  563,
      563,  567,  564,  563,    0,  567,  564,  568,  563,  569,

      565,  568,  566,  569,  565,  568,  566,  569,  565,  570,
      566,  565,  571,  570,    0,  567,  571,  570,  571,  567,
      571,    0,  572,  567,    0,  568,  572,  569,    0,  568,
      572,  569,    0,  568,    0,  569,  572,  570,    0,    0,
      571,  570,    0,    0,  571,  570,  571,    0,  571,    0,
      572,    0,  576,    0,  572,  576,  576,    0,  572,    0,
        0,    0,  577,    0,  572,  577,  577,  576,  576,  576,
      576,  576,  576,  576,  576,    0,    0,  577,  577,  577,
      577,  577,  577,  577,  577,    0,  578,  578,  584,    0,
      578,  585,  584,  586,  578,  585,  584,  586,  587,  585,

      588,  586,  587,    0,  588,  589,  587,  576,  588,  589,
      585,    0,    0,  589,  578,  578,  584,  577,  578,  585,
      584,  586,  578,  585,  584,  586,  587,  585,  588,  586,
      587,  590,  588,  589,  587,  590,  588,  589,  585,  590,
      591,  589,  591,    0,  592,    0,  593,    0,  592,  590,
      593,    0,  592,  594,  593,    0,  595,  594,  597,  590,
      595,  594,  597,  590,  595,  598,  597,  590,    0,  598,
        0,  591,  592,  598,  593,  591,  592,  590,  593,  591,
      592,  594,  593,  598,  595,  594,  597,  600,  595,  594,
      597,  600,  595,  598,  597,  600,  601,  598,  600,  591,

      601,  598,  602,  591,  601,  603,  602,  591,  604,  603,
      602,  598,  604,  603,    0,  600,  604,    0,    0,  600,
        0,    0,    0,  600,  601,    0,  600,  606,  601,    0,
      602,  606,  601,  603,  602,  606,  604,  603,  602,    0,
      604,  603,    0,  607,  604,    0,  606,  607,  608,    0,
      607,  607,  608,  608,  609,  606,  608,  611,  609,  606,
        0,  611,  609,  606,  610,  611,    0,    0,  610,  614,
        0,  607,  610,  614,  606,  607,  608,  614,  607,  607,
      608,  608,  609,  610,  608,  611,  609,  612,    0,  611,
      609,  612,  610,  611,  613,  612,  610,  614,  613,  612,

      610,  614,  613,    0,  615,  614,    0,  613,  615,    0,
        0,  610,  615,    0,    0,  612,    0,  615,    0,  612,
        0,    0,  613,  612,    0,    0,  613,  612,    0,    0,
      613,    0,  615,    0,  616,  613,  615,  616,  616,  617,
      615,    0,    0,  617,    0,  615,    0,  617,  617,  616,
      616,  616,  616,  616,  616,  616,  616,    0,  623,    0,
      624,    0,  623,    0,  624,  625,  623,  617,  624,  625,
      626,  617,    0,  625,  626,  617,  617,  628,  626,  629,
        0,  628,  625,  629,  629,  628,  623,  629,  624,  616,
      623,    0,  624,  625,  623,  628,  624,  625,  626,    0,

      630,  625,  626,    0,  630,  628,  626,  629,  630,  628,
      625,  629,  629,  628,  631,  629,  632,    0,  631,    0,
      632,    0,  631,  628,  632,    0,  633,  636,  630,  633,
      633,  636,  630,    0,  633,  636,  630,    0,    0,  634,
        0,  635,  631,  634,  632,  635,  631,  634,  632,  635,
      631,    0,  632,    0,  633,  636,  634,  633,  633,  636,
      635,    0,  633,  636,  637,    0,  638,  634,  637,  635,
      638,  634,  637,  635,  638,  634,    0,  635,  639,  644,
        0,    0,  639,  644,  634,  640,  639,  644,  635,  640,
        0,    0,  637,  640,  638,    0,  637,  641,  638,    0,

      637,  641,  638,    0,  640,  641,  639,  644,    0,    0,
      639,  644,    0,  640,  639,  644,  641,  640,    0,  643,
      648,  640,  643,  643,  648,  641,    0,    0,  648,  641,
        0,    0,  640,  641,  643,  643,  643,  643,  643,  643,
      643,  643,    0,  647,  641,  650,    0,  647,  648,  650,
      651,  647,  648,  650,  651,  652,  648,  647,  651,  652,
      653,  654,    0,  652,  653,  654,    0,  654,  653,  654,
        0,  647,  657,  650,  643,  647,  657,  650,  651,  647,
      657,  650,  651,  652,    0,  647,  651,  652,  653,  654,
      655,  652,  653,  654,  655,  654,  653,  654,  655,  656,

      657,    0,  658,  656,  657,    0,  658,  656,  657,  655,
      658,  659,    0,  660,    0,  659,  656,  660,  655,  659,
      661,  660,  655,    0,  661,  662,  655,  656,  661,  662,
      658,  656,    0,  662,  658,  656,    0,  655,  658,  659,
        0,  660,  665,  659,  656,  660,  665,  659,  661,  660,
      665,    0,  661,  662,    0,  665,  661,  662,  663,  666,
      663,  662,  663,  666,  666,    0,  663,  666,  671,  670,
      665,  670,  671,  670,  665,  671,  671,  670,  665,    0,
        0,    0,    0,  665,    0,  673,  663,  666,  663,  673,
      663,  666,  666,  673,  663,  666,  671,  670,    0,  670,

      671,  670,  672,  671,  671,  670,  672,  674,  675,  672,
      672,  674,  675,  673,  677,  674,  675,  673,  677,    0,
        0,  673,  677,    0,  678,  682,    0,  675,  678,  682,
      672,    0,  678,  682,  672,  674,  675,  672,  672,  674,
      675,  678,  677,  674,  675,    0,  677,    0,    0,    0,
      677,    0,  678,  682,  683,  675,  678,  682,  683,  684,
      678,  682,  683,  684,  685,    0,  687,  684,  685,  678,
      687,  688,  685,  683,  687,  688,  689,  690,    0,  688,
      689,  690,  683,    0,  689,  690,  683,  684,    0,  690,
      683,  684,  685,    0,  687,  684,  685,    0,  687,  688,

      685,  683,  687,  688,  689,  690,  691,  688,  689,  690,
      691,  692,  689,  690,  691,  692,    0,  690,    0,  692,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  691,    0,    0,    0,  691,  692,
        0,    0,  691,  692,    0,    0,    0,  692,  694,  694,
      694,  696,  696,  697,  697,  697,  698,  698,  699,  699,
      700,  700,  701,  701,  702,  702,  703,  703,  703,  704,
      704,  704,  705,  705,  706,  706,  707,  707,  708,  708,
      709,  709,  710,  710,  711,  711,  712,  712,  713,  713,
      713,  714,  714,  714,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[224] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Grammar/DARIC.l"
#line 6 "Grammar/DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 1984 "src/parser/flex.cpp"
#line 1985 "src/parser/flex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 51 "Grammar/DARIC.l"


#line 2208 "src/parser/flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 694 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5595 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 53 "Grammar/DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "Grammar/DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "Grammar/DARIC.l"
return NL;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "Grammar/DARIC.l"
return SS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "Grammar/DARIC.l"
return INTEGER_DIVIDE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "Grammar/DARIC.l"
return TILDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "Grammar/DARIC.l"
return TICK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "Grammar/DARIC.l"
return E;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "Grammar/DARIC.l"
return SEMICOLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "Grammar/DARIC.l"
return LE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "Grammar/DARIC.l"
return GE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "Grammar/DARIC.l"
return SHL_E;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "Grammar/DARIC.l"
return SHR_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 67 "Grammar/DARIC.l"
return PLUS_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 68 "Grammar/DARIC.l"
return MINUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 69 "Grammar/DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 70 "Grammar/DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 71 "Grammar/DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "Grammar/DARIC.l"
return NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "Grammar/DARIC.l"
return SHL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "Grammar/DARIC.l"
return SHR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "Grammar/DARIC.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "Grammar/DARIC.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "Grammar/DARIC.l"
return MULTIPLY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "Grammar/DARIC.l"
return DIVIDE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "Grammar/DARIC.l"
return LT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "Grammar/DARIC.l"
return GT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 83 "Grammar/DARIC.l"
return BGET;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 84 "Grammar/DARIC.l"
return BPUT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 85 "Grammar/DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 86 "Grammar/DARIC.l"
return CASE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 87 "Grammar/DARIC.l"
return CHAIN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 88 "Grammar/DARIC.l"
return CLOSE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 89 "Grammar/DARIC.l"
return DATA;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "Grammar/DARIC.l"
return DIM;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "Grammar/DARIC.l"
return ELSE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "Grammar/DARIC.l"
return END;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "Grammar/DARIC.l"
return END_CASE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "Grammar/DARIC.l"
return END_IF;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "Grammar/DARIC.l"
return END_FN;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "Grammar/DARIC.l"
return END_FN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "Grammar/DARIC.l"
return END_PROC;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "Grammar/DARIC.l"
return END_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "Grammar/DARIC.l"
return END_WHILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "Grammar/DARIC.l"
return END_CASE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "Grammar/DARIC.l"
return END_IF;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "Grammar/DARIC.l"
return END_FN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "Grammar/DARIC.l"
return END_FN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "Grammar/DARIC.l"
return END_PROC;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "Grammar/DARIC.l"
return END_TYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "Grammar/DARIC.l"
return END_WHILE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "Grammar/DARIC.l"
return EOFH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "Grammar/DARIC.l"
return EXPECT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "Grammar/DARIC.l"
return FIELD;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "Grammar/DARIC.l"
return FOR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "Grammar/DARIC.l"
return GET;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "Grammar/DARIC.l"
return GETS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "Grammar/DARIC.l"
return GETSH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "Grammar/DARIC.l"
return GLOBAL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "Grammar/DARIC.l"
return GOSUB;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "Grammar/DARIC.l"
return GOTO;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "Grammar/DARIC.l"
return INKEY;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "Grammar/DARIC.l"
return INKEYS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "Grammar/DARIC.l"
return INPUT_;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "Grammar/DARIC.l"
return GLOBAL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "Grammar/DARIC.l"
return IF;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "Grammar/DARIC.l"
return IN_;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "Grammar/DARIC.l"
return LISTFILES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 124 "Grammar/DARIC.l"
return LOCAL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "Grammar/DARIC.l"
return MOUSE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "Grammar/DARIC.l"
return NEXT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "Grammar/DARIC.l"
return OF;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "Grammar/DARIC.l"
return OPENIN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "Grammar/DARIC.l"
return OPENOUT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "Grammar/DARIC.l"
return OPENUP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 131 "Grammar/DARIC.l"
return OTHERWISE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 132 "Grammar/DARIC.l"
return PRINT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "Grammar/DARIC.l"
return PTR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 134 "Grammar/DARIC.l"
return READ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 135 "Grammar/DARIC.l"
return REPEAT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 136 "Grammar/DARIC.l"
return RESTORE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 137 "Grammar/DARIC.l"
return RND;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 138 "Grammar/DARIC.l"
return RND0;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 139 "Grammar/DARIC.l"
return RND1;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "Grammar/DARIC.l"
return OSCLI;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "Grammar/DARIC.l"
return RETURN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "Grammar/DARIC.l"
return SPC;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "Grammar/DARIC.l"
return STEP;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "Grammar/DARIC.l"
return SWAP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "Grammar/DARIC.l"
return THEN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "Grammar/DARIC.l"
return TO;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "Grammar/DARIC.l"
return TIME;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "Grammar/DARIC.l"
return TIMES;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 "Grammar/DARIC.l"
return TRACEON;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "Grammar/DARIC.l"
return TRACEOFF;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 "Grammar/DARIC.l"
return TYPE_;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 152 "Grammar/DARIC.l"
return UNTIL;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 "Grammar/DARIC.l"
return WHEN;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 "Grammar/DARIC.l"
return WHILE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "Grammar/DARIC.l"
return ASC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "Grammar/DARIC.l"
return CHRS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "Grammar/DARIC.l"
return INSTR;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "Grammar/DARIC.l"
return LEFTS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "Grammar/DARIC.l"
return MIDS;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "Grammar/DARIC.l"
return RIGHTS;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "Grammar/DARIC.l"
return LEN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "Grammar/DARIC.l"
return STRS;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "Grammar/DARIC.l"
return STRINGS;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "Grammar/DARIC.l"
return AND;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "Grammar/DARIC.l"
return OR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "Grammar/DARIC.l"
return EOR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "Grammar/DARIC.l"
return NOT; 
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 171 "Grammar/DARIC.l"
return FLOAT_;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 172 "Grammar/DARIC.l"
return INT_;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 173 "Grammar/DARIC.l"
return ACS;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "Grammar/DARIC.l"
return DIV;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "Grammar/DARIC.l"
return MOD;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "Grammar/DARIC.l"
return SQR; 
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "Grammar/DARIC.l"
return LN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "Grammar/DARIC.l"
return LOG;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 179 "Grammar/DARIC.l"
return EXP;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 180 "Grammar/DARIC.l"
return ATN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "Grammar/DARIC.l"
return TAN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "Grammar/DARIC.l"
return COS;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "Grammar/DARIC.l"
return SIN; 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "Grammar/DARIC.l"
return ASN; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 185 "Grammar/DARIC.l"
return ABS; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 186 "Grammar/DARIC.l"
return DEG; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 187 "Grammar/DARIC.l"
return RAD; 
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 188 "Grammar/DARIC.l"
return SGN; 
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 189 "Grammar/DARIC.l"
return PI; 
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "Grammar/DARIC.l"
return VAL; 
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "Grammar/DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "Grammar/DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "Grammar/DARIC.l"
return CIRCLE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "Grammar/DARIC.l"
return CLS;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "Grammar/DARIC.l"
return CLIPON;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "Grammar/DARIC.l"
return CLIPOFF;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "Grammar/DARIC.l"
return COLOUR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "Grammar/DARIC.l"
return COLOURBG;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "Grammar/DARIC.l"
return FILL;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "Grammar/DARIC.l"
return FLIP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "Grammar/DARIC.l"
return SHOWFPS;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "Grammar/DARIC.l"
return GRAPHICS;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "Grammar/DARIC.l"
return LINE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "Grammar/DARIC.l"
return RECTANGLE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "Grammar/DARIC.l"
return PLOT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 209 "Grammar/DARIC.l"
return POINT_;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 210 "Grammar/DARIC.l"
return SHADED;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 211 "Grammar/DARIC.l"
return TEXT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 212 "Grammar/DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 213 "Grammar/DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 214 "Grammar/DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 215 "Grammar/DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 216 "Grammar/DARIC.l"
return CREATEFONT;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 217 "Grammar/DARIC.l"
return MONO15;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 218 "Grammar/DARIC.l"
return MONO20;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 219 "Grammar/DARIC.l"
return MONO25;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 220 "Grammar/DARIC.l"
return MONO30;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 221 "Grammar/DARIC.l"
return MONO35;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 222 "Grammar/DARIC.l"
return MONO40;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 223 "Grammar/DARIC.l"
return MONO50;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 224 "Grammar/DARIC.l"
return MONO75;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 225 "Grammar/DARIC.l"
return MONO100;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 226 "Grammar/DARIC.l"
return PROP15;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 227 "Grammar/DARIC.l"
return PROP20;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 228 "Grammar/DARIC.l"
return PROP25;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 229 "Grammar/DARIC.l"
return PROP30;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 230 "Grammar/DARIC.l"
return PROP35;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 231 "Grammar/DARIC.l"
return PROP40;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 232 "Grammar/DARIC.l"
return PROP50;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 233 "Grammar/DARIC.l"
return PROP75;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 234 "Grammar/DARIC.l"
return PROP100;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 235 "Grammar/DARIC.l"
return TRIANGLE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 236 "Grammar/DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 237 "Grammar/DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 238 "Grammar/DARIC.l"
return RED;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 239 "Grammar/DARIC.l"
return GREEN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 240 "Grammar/DARIC.l"
return YELLOW;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 241 "Grammar/DARIC.l"
return BLUE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 242 "Grammar/DARIC.l"
return MAGENTA;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 243 "Grammar/DARIC.l"
return CYAN;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 244 "Grammar/DARIC.l"
return WHITE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 245 "Grammar/DARIC.l"
return BLACK;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 246 "Grammar/DARIC.l"
return LASTPOS;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 248 "Grammar/DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 249 "Grammar/DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 250 "Grammar/DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 251 "Grammar/DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 252 "Grammar/DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 253 "Grammar/DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 254 "Grammar/DARIC.l"
return TRANSLATE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 255 "Grammar/DARIC.l"
return ROTATE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 256 "Grammar/DARIC.l"
return SCALE; 
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 257 "Grammar/DARIC.l"
return SOLID; 
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 258 "Grammar/DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 259 "Grammar/DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 261 "Grammar/DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        s += ".daric";

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            yyfileno++;
                            files_index.insert(std::pair<std::string, int>(s, yyfileno));
                            strcpy(yytext, s.c_str());
                            included_files.insert(std::move(s));
                            yyin = fopen(yytext, "r");
                            if (!yyin) {
                                fprintf(stderr, "Include file '%s' not found", yytext);
                                exit(1);
                            }
	                        //std::cout << "Including '" << yytext << "' at line " << yylineno << " as file index " << yyfileno << std::endl;
                            file_stack.push(std::move(file));
                            file = yytext;
                            yylineno_stack.push(yylineno);
                            yylineno = 0;
                            yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                            BEGIN(INITIAL);
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 295 "Grammar/DARIC.l"
{
                        static int once = 0; 
                        if (once = !once)
                            return NL;
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 310 "Grammar/DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 311 "Grammar/DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 312 "Grammar/DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 313 "Grammar/DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 314 "Grammar/DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 315 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 316 "Grammar/DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_PROCEDURE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 317 "Grammar/DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_INTEGER_FUNCTION; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 318 "Grammar/DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_STRING_FUNCTION; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 319 "Grammar/DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_REAL_FUNCTION; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 320 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_FUNCTION; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 321 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_FUNCTION; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 322 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return REAL_FUNCTION; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 323 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 324 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 325 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 326 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 327 "Grammar/DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 217:
#line 330 "Grammar/DARIC.l"
case 218:
#line 331 "Grammar/DARIC.l"
case 219:
#line 332 "Grammar/DARIC.l"
case 220:
#line 333 "Grammar/DARIC.l"
case 221:
YY_RULE_SETUP
#line 333 "Grammar/DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 335 "Grammar/DARIC.l"
/* do nothing */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 337 "Grammar/DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3434 "src/parser/flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 694 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 694 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 693);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 337 "Grammar/DARIC.l"

