#line 1 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#line 3 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 227
#define YY_END_OF_BUFFER 228
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[696] =
    {   0,
        0,    0,  228,  226,    3,    4,  226,  225,  206,  205,
        8,  221,  222,   25,   23,  223,   24,  207,   26,  204,
        5,   10,   27,    9,   28,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  224,    7,    3,  203,
        3,    4,    0,  208,    0,  206,  205,   17,   15,   16,
      207,    0,    6,   18,  207,  204,    5,   21,   11,   20,
       12,   22,  219,  218,  217,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
       61,   62,  220,  220,  220,  114,  220,  220,  220,  220,
      220,  220,  220,   67,  220,  105,  220,  220,  126,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,   86,  220,  220,  220,  220,  220,  220,  220,
      220,    3,  203,    0,  203,    0,  208,    0,    0,  207,
       19,   13,   14,  122,  110,  104,   95,  121,  117,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  131,  220,  119,  220,  220,  220,  220,  123,  220,

       37,  111,  220,   39,  220,  106,  116,  220,  220,  220,
      220,  220,  220,  215,   50,   51,  220,  220,  220,  220,
      220,  220,  220,  220,  109,  220,  220,  101,   60,  220,
      220,  220,  220,  115,  220,  220,  112,  220,  220,  220,
      107,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      124,  220,  220,  181,  220,  220,  220,  220,  220,  220,
       77,  220,  220,  220,  220,  125,  220,  220,  120,  220,
       82,  113,  220,  220,  220,  118,  220,  220,  220,  220,
      220,  220,  220,  220,  127,  220,  220,  220,  220,  220,
        0,  220,  220,  220,  184,  220,  220,   33,  220,   96,

      220,  220,  220,  220,  220,  186,   36,  220,  220,  220,
       38,  220,  220,  220,  220,  220,  220,   47,  220,  192,
      220,  220,  136,  137,  220,  213,  214,  215,  215,   52,
      220,  220,   56,  220,  220,  220,  220,  220,  220,  220,
      140,  220,  220,  220,  220,   99,  220,  220,   66,  220,
      220,  220,  220,  142,  220,  220,  220,  220,   73,   74,
      220,    0,    1,  219,  218,  217,  220,  220,  220,  220,
      220,  220,  220,    0,  220,  220,  220,  220,  220,  220,
      220,  220,   83,  102,  220,   84,  145,   85,   87,  220,
      220,  220,  129,   91,  220,  220,   93,  220,  220,  220,

      220,    0,  220,   30,  188,   31,  220,   34,  220,  220,
      220,  220,  220,  220,  220,  220,  220,   43,  220,   41,
      220,  220,  220,  220,  128,   49,  220,  108,   53,  220,
       55,  220,  182,   57,   59,  220,   97,  220,   98,  220,
      220,   64,  220,  220,  220,  220,  220,  220,  220,   65,
      220,  220,  220,  220,   80,  220,  143,   72,  216,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,    0,    0,  220,  198,  220,  220,  220,  193,  220,
      199,  220,  220,  220,   88,  220,  220,  220,   92,  220,
       94,  187,  220,  220,    0,   29,  220,  130,  220,  132,

       35,  134,  220,  212,  220,  220,  220,  220,  220,  220,
      220,   48,  220,   54,  220,   58,  220,  220,  220,  220,
      220,  220,  151,  152,  153,  154,  155,  156,  157,  158,
      195,   68,  220,   70,  220,  216,  216,  220,  160,  161,
      162,  163,  164,  165,  166,  167,  220,  194,   75,  220,
       81,  100,   78,   79,  197,  220,  220,  220,  220,  220,
      220,  220,  144,  220,  220,  220,  220,  220,  220,  220,
      191,  220,  183,    0,    2,  220,  133,  220,  220,  211,
      210,  212,  212,  220,  220,   40,  220,   44,   45,  220,
      220,  220,  220,  189,  220,  220,  185,  159,   69,  220,

      168,  220,   76,  220,  220,  220,  169,  170,  171,  172,
      173,  174,  175,  176,  138,  103,  220,  220,  220,   89,
      220,  220,  220,  220,  135,  220,  209,  220,  220,   46,
      220,  139,    0,  220,  220,  220,  220,  220,  220,  177,
      220,  220,   90,  220,  178,  220,  220,  220,  209,  209,
      220,  220,  220,    0,   63,  220,   71,  141,  220,  220,
      220,  220,  146,  196,  200,   32,  150,  220,  220,  220,
        0,  202,    0,  220,  220,  220,  148,  147,  220,   42,
      220,    0,  202,    0,  220,  220,  179,  190,  220,  149,
      180,  220,  220,  201,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   25,   25,   27,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   58,    1,    1,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   57,    1,   85,    1,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    2,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    2,    3,
        3,    3,    3,    3,    3,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[718] =
    {   0,
        0,   85,  307, 5661,  300,  298,   83, 5661,   70,    0,
     5661, 5661, 5661,  267,  262, 5661,  256,   76,   73,   96,
      252, 5661,   63, 5661,   93,  152,  228,  274,  327,  373,
       93,  152,   94,  225,  236,  279,  286,  425,  473,  375,
      521,  572,  391,  332,  431,  346, 5661, 5661,  125,  220,
      276,  271,  123, 5661,  132,  123,    0, 5661, 5661, 5661,
      506,  638,  243, 5661,  646,  664,  242,  237, 5661, 5661,
     5661,  234, 5661, 5661, 5661,  161,  447,  542,  569,  659,
      664,  526,  661,  671,  704,  706,  709,  711,  727,  756,
      761,  787,  758,  774,  808,  824,  813,  843,  864,  865,

      876,  903,  909,  918,  977,  814,  955,  978,  977,  980,
      989, 1026, 1011, 1027, 1048, 1067, 1077, 1082, 1093, 1119,
     1126, 1133, 1136, 1138, 1171, 1178, 1181, 1184, 1190, 1221,
     1196, 1223, 1230, 1236, 1276, 1277, 1293, 1326, 1327, 1332,
     1333, 1339, 1376, 1379, 1391, 1388, 1422, 1378, 1428, 1434,
     1440, 1443, 1445, 1474, 1480, 1492, 1493, 1509, 1499, 1530,
     1540, 1593, 1601,  130, 1626,  147,  175,  201,  654, 1610,
     5661, 5661, 5661, 1542, 1621, 1622, 1623, 1624, 1633, 1634,
     1663, 1673, 1676, 1679, 1685, 1686, 1688, 1725, 1728, 1719,
     1731, 1737, 1738, 1740, 1771, 1778, 1781, 1790, 1784, 1793,

     1796, 1827, 1830, 1867, 1870, 1845, 1848, 1860, 1883, 1905,
     1920, 1930, 1904, 1988, 1918, 1986, 1984, 1989, 1991, 1996,
     1998, 2036, 2038, 2041, 2043, 2048, 2081, 2055, 2090, 2093,
     2104, 2099, 2106, 2111, 2116, 2158, 2137, 2146, 2149, 2164,
     2171, 2176, 2189, 2205, 2206, 2220, 2218, 2219, 2261, 2262,
     2245, 2271, 2264, 2278, 2346, 2401, 2402, 2403, 2408, 2413,
     2447, 2453, 2454, 2459, 2460, 2466, 2469, 2499, 2506, 2509,
     2511, 2516, 2518, 2555, 2556, 2558, 2570, 2568, 2565, 2603,
     2610, 2615, 2620, 2621, 2622, 2655, 2632, 2661, 2662, 2667,
      127, 2677, 2710, 2707, 2688, 2747, 2722, 2725, 2736, 5661,

     2748, 2774, 2762, 2765, 2792, 2763, 2804, 2814, 2817, 2829,
     2815, 2852, 2859, 2866, 2869, 2885, 2904, 5661, 2916, 2915,
     2922, 2925, 2927, 2934, 2941, 5661, 5661,  192, 2992,  252,
     2989, 2994, 2992, 2999, 3001, 3008, 3039, 3045, 3046, 3076,
     3055, 3064, 3094, 3095, 3101, 5661, 3155, 3120, 3132, 3165,
     3158, 3153, 3171, 3176, 3205, 3210, 3272, 3279, 5661, 3217,
     3222,  253,  231,  216,  214,  206, 3347,    0, 3272, 3274,
     3347, 3348, 3349,  163, 3350, 3277, 3359, 3366, 3403, 3404,
     3405, 3414, 3415, 5661, 3416, 3426, 3459, 3456, 3474, 3465,
     3490, 3499, 3477, 3511, 3517, 3516, 3529, 3530, 3542, 3555,

     3567,  143, 3569, 5661, 3576, 5661, 3598, 3582, 3607, 3616,
     3619, 3628, 3638, 3693, 3663, 3689, 3690, 3696, 3702, 3703,
     3719, 3737, 3740, 3756, 3742, 3749, 3759, 3789, 5661, 3794,
     3796, 3806, 3807, 3808, 3819, 3837, 3846, 3849, 5661, 3852,
     3862, 3864, 3889,  473,  532,  619,  276,  572,  320, 3867,
     3901, 3902, 3919, 3941, 3918, 3953, 3958, 3960, 4023, 1577,
     3264, 4032,  746,  824,  373, 3993, 4023, 4028, 4035, 4033,
     4045,  182,  181, 4054, 4079, 4084, 4110, 4105, 4119, 4124,
     4122, 4153, 4140, 4162, 5661, 4165, 4180, 4196, 4178, 4195,
     4205, 4217, 4234, 4235,  186, 4236, 4261, 4248, 4250, 4273,

     5661, 4287, 4294, 4345, 4341, 4342, 4347, 4357, 4358, 4391,
     4392, 4397, 4404, 4402, 4407, 5661, 4441, 4442, 4447, 4453,
     4459,  949,  220,  329,  348,  381,  418,  446,  510,  541,
     4490, 4493, 4500, 4499, 4502,  609, 4565,  986,  627,  637,
      708,  710,  774,  795,  805,  902, 4542, 4561, 4563, 4573,
     4575, 5661, 5661, 5661, 4580, 4606, 4643, 4645, 4668, 1422,
     1864, 1298, 4625, 4646, 4672, 4658, 4659, 4697, 4675, 4709,
     4714, 4715, 4724,  167,  128, 4727, 4736, 4761, 4762, 5661,
     5661,  911, 4824, 4833, 4774, 4749, 4829, 4830, 4831, 4836,
     4841, 4870, 4882, 4871, 4881, 4883, 4892,  968, 4893, 4904,

     1000, 4923, 4933, 4935, 4938, 1996, 1181, 1270, 1327, 1376,
     1514, 1543, 1584, 1633, 4944, 5661, 4945, 4975, 4985, 4987,
     4997, 4994, 4996, 5027, 5034, 5037, 5099, 5048, 5095, 5096,
     5097, 5102,  216, 5135, 5108, 5146, 5147, 5148, 5157, 1664,
     5169, 5187, 5162, 5164, 5199, 5204, 5209, 5225, 1671, 5275,
     5271, 5273, 5276,  205, 5278, 5285, 5288, 5290, 5319, 5329,
     5328, 5330, 5331, 5342, 5371, 5377, 5380, 5387, 5393, 5422,
      233, 5661,  326, 5431, 5436, 5438, 5382, 5392, 5475, 5448,
     5478,  250,  311,  463, 5449, 5489, 5488, 5501, 5526, 5527,
     5538, 5539, 5540, 5541, 5661, 5611,  111, 5613, 5616, 5618,

     5620, 5622, 5624, 5626, 5629, 5632, 5634, 5636, 5639, 5641,
     5643, 5645, 5647, 5649, 5651, 5654, 5657
    } ;

static const flex_int16_t yy_def[718] =
    {   0,
      695,    1,  695,  695,  695,  695,  696,  695,  695,  697,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  698,  698,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  695,  695,  695,  695,
      695,  695,  696,  695,  699,  695,  697,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  700,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,  701,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  112,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  695,  695,  695,  695,  696,  696,  699,  695,  695,
      695,  695,  695,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  702,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  695,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      695,   29,   29,   29,   29,   29,   29,   29,   29,  695,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  695,   29,   29,
       29,   29,   29,   29,   29,  695,  695,  703,  702,  695,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  695,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  704,   29,  695,   29,
       29,  705,  695,  705,  705,  705,  706,  255,   29,   29,
       29,   29,   29,  695,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  695,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,  695,   29,  695,   29,  695,   29,   29,   29,   29,
       29,   29,   29,  707,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  695,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  695,   29,
       29,   29,   29,  700,  700,  700,  700,  700,  700,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  708,  700,
      700,  700,  700,  700,  700,   29,   29,   29,   29,   29,
       29,  695,  695,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  695,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  709,   29,   29,   29,   29,   29,

      695,   29,   29,  710,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  695,   29,   29,   29,   29,
       29,  700,  700,  700,  700,  700,  700,  700,  700,  700,
       29,   29,   29,   29,   29,  711,  708,  700,  700,  700,
      700,  700,  700,  700,  700,  700,   29,   29,   29,   29,
       29,  695,  695,  695,   29,   29,  700,  700,  700,  700,
      700,  700,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  709,  695,   29,   29,   29,   29,  695,
      695,  712,  710,  713,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  700,   29,   29,

      700,   29,   29,   29,   29,  700,  700,  700,  700,  700,
      700,  700,  700,  700,   29,  695,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  714,   29,   29,   29,
       29,   29,  695,   29,   29,   29,   29,   29,   29,  700,
       29,   29,   29,   29,   29,   29,   29,   29,  715,  714,
       29,   29,   29,  716,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      716,  695,  717,   29,   29,   29,   29,   29,   29,   29,
       29,  716,  716,  717,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,    0,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695
    } ;

static const flex_int16_t yy_nxt[5748] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       33,   33,   35,   36,   37,   38,   39,   33,   40,   41,
       42,   43,   44,   45,   33,   46,   33,    4,    4,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   33,   33,
       35,   36,   37,   38,   39,   33,   40,   41,   42,   43,
       44,   45,   33,   46,   47,   48,   49,   54,   56,   56,
       63,   68,   69,   70,   61,   61,   61,   61,   61,   61,

       61,   61,   64,   50,   50,   50,   50,   50,   50,   50,
       50,   62,   65,   57,   66,   66,   66,   66,   66,   66,
       66,   66,   71,   72,  102,   77,  162,   54,   77,   77,
      575,  164,  103,   77,   53,  104,  167,  105,  106,   62,
       55,   56,   56,  163,  163,  163,  163,  163,  163,  163,
      163,   54,  102,   77,   56,   73,   77,   77,   74,   75,
      103,   77,  402,  104,   73,  105,  106,   74,   75,  575,
       76,   76,   76,   76,   76,   76,   76,   76,  291,   54,
       55,  472,  473,   77,   78,   79,  495,  107,  575,  168,
      402,   77,  554,  553,  108,   73,   80,  109,  326,  327,

      110,   81,   82,   53,   55,  167,  291,   56,  363,  672,
       76,   77,   78,   79,  495,  107,  363,  633,  363,   77,
      654,  164,  108,   73,   80,  109,   74,   75,  110,   81,
       82,   73,   55,  363,   74,   75,   65,  672,  165,  165,
      165,  165,  165,  165,  165,  165,   76,   76,   76,   76,
       76,   76,   76,   76,  672,  363,   77,  429,  168,   83,
       77,  111,  673,  173,   77,   84,  172,  113,   67,  112,
       85,  114,  171,   52,   86,  115,   87,   51,   67,   73,
      116,  117,   74,   75,   77,   60,   76,   83,   77,  111,
      673,   59,   77,   84,  528,  113,   58,  112,   85,  114,

       52,   51,   86,  115,   87,   88,  695,  673,  116,  117,
      118,   77,   89,   90,   77,  672,   91,   77,  119,   92,
       77,  121,   93,   73,  120,   77,   74,   75,  671,   94,
      683,  122,   73,   88,  695,   74,   75,  695,  118,   77,
       89,   90,   77,  530,   91,   77,  119,   92,   77,  121,
       93,   73,  120,   77,   74,   75,  695,   94,   95,  122,
      695,  695,   96,  157,   77,  695,   97,  158,  673,   77,
      695,   77,  695,   77,  695,   77,   73,   77,  695,   74,
       75,  161,  695,  684,   73,   77,   95,   74,   75,  695,
       96,  157,   77,  695,   97,  158,  546,   77,  695,   77,

      695,   77,  695,   77,   77,   77,  134,  695,   77,  161,
      135,  695,   77,   77,  136,   98,  695,   99,  100,  137,
      138,   73,   77,  695,   74,   75,   77,  101,  695,  695,
       77,  695,   77,  695,  134,  156,   77,  695,  135,  695,
       77,  695,  136,   98,  695,   99,  100,  137,  138,   73,
       77,  695,   74,   75,   77,  101,   77,  123,   77,  695,
       77,  124,   77,  156,   77,  671,   77,  683,  695,  159,
      160,  125,  695,  126,  127,  128,   73,  695,   77,   74,
       75,  695,   77,  695,   77,  123,   77,  695,   77,  124,
       77,  522,   77,  695,   77,  695,  523,  159,  160,  125,

      695,  126,  127,  128,   77,  695,   77,  695,   77,  695,
       77,  695,  129,   73,   77,  130,   74,   75,  131,  695,
      684,  132,  695,  133,   61,   61,   61,   61,   61,   61,
       61,   61,   77,  695,  695,   73,   77,  695,   74,   75,
      129,   62,  695,  130,   73,  695,  131,   74,   75,  132,
      524,  133,   77,  695,  139,  525,  140,   77,  141,  142,
      143,   77,  695,  695,  695,   77,  144,  145,  146,   62,
      179,  147,  695,   77,  148,   73,  695,   77,   74,   75,
       77,   77,  139,  695,  140,   77,  141,  142,  143,   77,
      529,  174,  695,   77,  144,  145,  146,  695,  179,  147,

       77,   77,  148,  149,   77,   77,  695,  150,   77,   77,
      151,  152,   73,  695,  695,   74,   75,  153,  175,  174,
      154,  695,   73,  695,  695,   74,   75,  155,   77,  695,
       73,  149,   77,   74,   75,  150,   77,  526,  151,  152,
       73,  695,  527,   74,   75,  153,  175,  695,  154,  695,
      695,  169,  695,  169,  695,  155,  170,  170,  170,  170,
      170,  170,  170,  170,   61,   61,   61,   61,   61,   61,
       61,   61,  170,  170,  170,  170,  170,  170,  170,  170,
       65,   62,   66,   66,   66,   66,   66,   66,   66,   66,
       77,  695,   77,  176,   77,   77,   77,  177,   77,   77,

       77,  695,   77,   77,  695,  180,  181,  695,  178,   62,
       77,   73,  695,   73,   74,   75,   74,   75,   77,  695,
       77,  176,   77,   77,   77,  177,   77,   77,   77,  695,
       77,   77,  695,  180,  181,  182,  178,   77,   77,   77,
       77,   77,   77,   77,  185,   77,   77,  695,   77,   73,
       77,  695,   74,   75,  695,  183,  695,  184,  187,  695,
      186,  695,   77,  182,  544,   77,   77,   77,   77,   77,
       77,   77,  185,   77,   77,  188,   77,   73,   77,  695,
       74,   75,  695,  183,  695,  184,  187,   77,  186,   77,
       77,   77,   77,  195,   77,   77,   77,   77,   73,  695,

      190,   74,   75,  188,  189,  196,  191,  695,   73,   77,
      192,   74,   75,   77,  695,   77,  695,   77,   77,   77,
       77,  195,   77,   77,   77,   77,   77,   73,  190,  193,
       74,   75,  189,  196,  191,  695,  194,   77,  192,   77,
      695,   77,  545,   77,   77,   77,   77,   77,   77,   77,
       77,  695,   77,   77,   77,   77,  201,  193,  197,   77,
      198,  199,  215,   77,  194,  202,  200,   77,  695,  695,
      695,   77,   77,   77,   77,   77,   77,   77,   77,  695,
       77,   77,   77,   77,  201,  695,  197,   77,  198,  199,
      215,   77,  203,  202,  200,   77,   77,  695,  204,   77,

       77,  205,   77,   77,   77,   73,   77,   77,   74,   75,
       77,   77,  695,  206,   73,   77,  695,  580,  581,  695,
      203,  695,  207,   77,   77,  695,  204,   77,   77,  205,
      695,   77,   77,  695,   77,   77,  208,  695,   77,   77,
       77,  206,   77,   77,  210,  209,  695,  695,   77,   77,
      207,  211,   73,   77,  695,   74,   75,  212,  695,  695,
      695,  695,   77,  213,  208,  695,   77,  598,   77,  695,
       77,   73,  210,  209,   74,   75,   77,   77,  695,  211,
       73,   77,  695,   74,   75,  212,   77,  695,  695,   73,
       77,  213,   74,   75,   77,   76,   76,   76,   76,   76,

       76,   76,   76,   73,  601,  216,   74,   75,   77,   77,
      695,  220,   77,   77,   77,  221,   77,   77,   77,   77,
       77,  695,   77,  217,   77,  695,  218,  219,   77,  695,
      695,  695,  695,  216,  695,   76,   77,   77,  695,  220,
       77,   77,   77,  221,   77,   77,   77,   77,   77,  695,
       77,  217,   77,  695,  218,  219,   77,   77,   77,  695,
      226,   77,   77,  227,  695,   77,   77,  222,  695,  695,
       77,  228,  223,  695,   77,  224,  225,  229,   77,   77,
      695,  695,  695,   77,  695,   77,   77,   77,  226,   77,
       77,  227,  230,   77,   77,  222,  695,  231,   77,  228,

      223,  695,   77,  224,  225,  229,   77,   77,  232,  695,
      233,   77,   77,   77,  234,   77,   77,   77,  695,  235,
      230,   77,  695,  695,   77,  231,   77,  236,   77,  695,
       77,  695,   77,  695,   77,  695,  232,  695,  233,  695,
       77,   77,  234,  695,   77,   77,  695,  235,  695,   77,
       77,  695,   77,  237,   77,  236,   77,   77,   77,  695,
       77,   77,  695,  238,   77,   77,  695,   77,   77,   77,
      239,   77,   77,   77,  695,   77,  242,   77,   77,  695,
      240,  237,   77,  241,   73,   77,   77,   74,   75,   77,
      695,  238,   77,   77,  695,   77,   77,   77,  239,   77,

       77,   77,   77,   77,  242,   77,  243,  695,  240,   77,
       77,  241,   77,   77,  244,   77,   77,   77,  695,   77,
       77,   77,  245,   77,  695,   77,  695,   77,  695,   77,
       77,   77,  695,  695,  243,  247,  695,   77,   77,  695,
       77,   77,  244,   77,   77,   77,  695,   77,   77,   77,
      245,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  248,  247,  695,   77,  246,   77,  249,   77,
      251,   77,  695,   73,  695,   77,   74,   75,  250,  695,
       77,  695,   77,  695,   77,  695,   77,  695,   77,   77,
      248,  695,  695,   77,  246,   77,  249,   77,  251,   77,

      695,   73,  695,   77,   74,   75,  250,  252,   77,  253,
      254,  695,   77,  695,  260,  695,   77,   77,  695,  255,
      256,  614,  257,  695,   77,  258,  259,  261,   77,  695,
       73,  695,   77,   74,   75,  252,   77,  253,  254,  695,
       77,  695,  260,  695,   77,   77,  695,  255,  256,  695,
      257,  695,   77,  258,  259,  261,   77,   77,  263,  695,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  695,
      267,   77,   77,  695,   77,  264,  262,  266,   77,   73,
      265,  695,   74,   75,  268,   77,  263,  695,  695,   77,
       77,   77,   77,   77,   77,   77,   77,  695,  267,   77,

       77,  695,   77,  264,  262,  266,   77,   77,  265,  275,
       77,   77,  268,   77,   77,   77,  695,   77,   77,   77,
      269,  270,   77,   77,  271,   73,   77,   77,   74,   75,
       77,  695,  695,  695,  695,   77,  272,  275,   77,   77,
      612,   77,   77,   77,  695,   77,   77,   77,  269,  270,
       77,   77,  271,   77,   77,   77,  695,  273,   77,   77,
      695,   77,  695,   77,  272,   77,  695,   77,  695,   77,
      274,   77,  276,   77,   77,  278,   77,  695,   77,   77,
       77,   77,   77,  695,   77,  273,  279,   77,  277,   77,
      695,   77,  695,   77,  695,   77,  695,   77,  274,   77,

      276,   77,   77,  278,   77,  280,   77,   77,   77,   77,
       77,   77,   77,  281,  279,   77,  277,   73,  695,   77,
       74,   75,  695,   77,   77,  282,  283,   77,   77,  695,
       77,   77,   77,  280,  287,  285,  695,   77,  288,   77,
       77,  281,  284,   77,   77,  695,   73,   77,   77,   74,
       75,   77,   77,  282,  283,   77,   77,  286,   77,   77,
       77,   77,  287,  285,  695,   77,  288,  695,   77,   77,
      284,   77,   77,   77,  695,   77,   77,   77,  289,   77,
       73,   77,  290,   74,   75,  286,  695,   73,  695,   77,
       74,   75,  695,   77,  162,  538,  695,   77,  695,   77,

      539,   77,  164,   77,  695,   77,  289,   77,  695,   77,
      290,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  164,  170,  170,
      170,  170,  170,  170,  170,  170,   73,  695,  695,   74,
       75,  695,   65,  695,  165,  165,  165,  165,  165,  165,
      165,  165,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  695,   73,   77,   77,
       74,   75,   77,   77,   73,  292,  695,   74,   75,  695,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  695,   77,   77,   77,  695,

       77,   77,   77,  292,   77,  695,  294,   77,   77,  695,
       77,  295,   77,  293,   77,   77,  297,   77,   77,   77,
       77,  298,   77,   77,   77,   77,   77,  299,  695,  296,
       77,  300,   77,  695,  294,   77,   77,  695,   77,  295,
       77,  293,   77,   77,  297,   77,   77,   77,   77,  298,
       77,   77,   77,   77,   77,  299,   77,  296,   77,   77,
       77,  301,   77,   77,   77,  302,   77,   77,   77,   77,
       77,   77,   77,   77,  695,   77,   77,   77,   77,   77,
      303,  695,   77,  304,   77,  695,   77,   77,   77,  301,
       77,   77,   77,  302,   77,   77,   77,   77,   77,   77,

       77,   77,  305,   77,   77,   77,   77,   77,  303,   77,
       77,  304,  307,   77,  695,   77,   77,   77,  695,   77,
       77,   77,  306,   77,   77,   77,  308,   77,  310,   77,
      305,   77,   77,  695,   77,   77,  309,   77,   77,  695,
      307,   77,  695,   77,   77,   77,  695,   77,   77,   77,
      306,   77,   77,   77,  308,   77,  310,   77,   77,   77,
       77,   77,   77,   77,  309,  311,   77,   73,  695,   77,
       74,   75,  695,  695,  695,  318,   77,  695,  695,   77,
       77,  695,  613,  319,   77,  695,   77,   77,  695,   77,
       77,   77,  695,  311,   77,  320,  695,   77,   77,   77,

      312,   77,   77,  313,   77,   77,  314,   77,   77,   77,
      695,  319,   77,  315,   77,   77,  695,  316,   77,   77,
      317,  695,   77,  320,  695,  695,   77,   77,  312,   77,
       77,  313,  321,   77,  314,  325,   77,   77,  695,   77,
       77,  315,   77,   77,   77,  316,   77,  322,  317,   77,
       77,   77,  695,   77,  695,   77,  695,   77,  695,   77,
      321,   77,  323,  325,   77,   77,  695,   77,   77,   77,
      695,   77,   77,  695,  695,  322,  324,   77,  695,   77,
      695,   77,  695,   77,  695,   77,  695,   77,  695,   77,
      323,   73,  330,   77,  326,  327,  695,   77,  695,   73,

      695,  695,   74,   75,  324,  695,  328,  328,  328,  328,
      328,  328,  328,  328,  640,   77,  331,   77,  695,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  695,  335,  695,   77,  333,   77,  695,  695,
      332,  695,  334,   77,  331,   77,  328,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      695,  335,  695,   77,  333,   77,  695,   77,  332,   77,
      334,  336,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  695,   77,   77,  695,  695,   77,   77,  695,  337,
       77,  338,  695,  695,   77,   77,  695,   77,  339,  336,

       77,   77,   77,   77,   77,   77,   77,   77,   77,  695,
       77,   77,   77,  695,   77,   77,   77,  337,   77,  338,
       77,   77,   77,  695,   77,   77,  339,  695,  341,   77,
       77,  340,   77,  343,   77,   77,  695,  344,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  345,   77,   77,  342,   77,  341,   77,   77,  340,
       77,  343,   77,   77,  346,  344,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  345,
       77,   77,  342,   77,   77,   77,  695,  695,   77,   77,
      695,  347,  695,   77,  695,   77,   77,   77,  348,   77,

       77,  695,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  350,   77,   77,  349,   77,   77,   77,  695,  347,
       77,   77,  695,   77,   77,   77,  348,   77,   77,  695,
       77,   77,  695,  351,   77,   77,   77,   77,   77,  350,
       77,  353,  349,   77,   77,   77,  695,  352,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      695,  351,  355,  356,   77,   77,  695,  359,   77,  353,
      354,  695,   77,   77,  695,  352,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  695,  695,
      355,  356,   77,   77,  357,   77,   77,   77,  354,   77,

       77,   77,   77,   77,   77,  360,   77,  358,   77,   77,
       77,  695,   77,   77,  361,  695,  695,   77,  695,  695,
       77,   77,  357,   77,   77,   77,  695,   77,   77,   77,
       77,   77,  695,  360,   77,  358,  695,   77,   77,  695,
      695,   77,  361,  695,  695,   77,  362,  362,  363,  364,
      362,  362,  365,  366,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  367,  367,  367,  367,  367,  367,
      367,  367,  362,  362,  362,  362,  362,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  362,  367,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      362,  362,   77,   77,   77,  369,   77,  370,   77,   77,
       77,   77,   77,   77,   77,  695,  695,   77,   77,  695,
      695,  373,   77,  371,  695,  695,  695,  374,  695,  372,
       77,   77,   77,  369,   77,  370,   77,   77,   77,   77,
       77,   77,   77,  695,  695,   77,   77,  695,   77,  373,
       77,  371,   77,  695,  375,   77,   77,  372,   77,   77,
       77,   77,   77,   77,  377,   77,  376,   77,   77,  378,

       77,   77,  695,  379,   77,   77,   77,  695,   77,  695,
       77,  695,  375,   77,   77,  380,   77,   77,   77,   77,
       77,   77,  377,   77,  376,   77,   77,  378,   77,   77,
       77,  379,   77,   77,   77,  695,   77,   77,   77,  695,
       77,   77,   77,  380,   77,   77,   77,   77,  382,   77,
       77,   77,  381,   77,  695,   77,  695,   77,   77,  695,
      695,  384,   77,  695,  383,   77,   77,  695,   77,   77,
       77,  695,   77,   77,   77,   77,  382,   77,   77,   77,
      381,   77,  695,   77,  695,   77,   77,   77,  695,   77,
       77,   77,  383,   77,  385,   77,   77,   77,  695,   77,

      389,   77,  386,   77,   77,   77,  695,   77,  695,   77,
      695,  695,  388,  695,   77,   77,  695,   77,   77,   77,
      387,   77,  385,   77,   77,   77,  695,   77,  389,   77,
      386,   77,   77,   77,   77,   77,  390,   77,   77,  695,
      388,  392,   77,  695,  695,   77,   77,  391,  387,   77,
      393,   77,   77,   77,   77,  394,   77,   77,  695,   77,
      395,   77,   77,   77,  390,  695,   77,   77,  695,  392,
       77,   77,  695,   77,   77,  391,  397,   77,  393,   77,
       77,   77,   77,  394,   77,   77,   77,   77,  395,   77,
       77,   77,   77,   77,   77,   77,   77,  400,   77,   77,

       77,   77,   77,  398,  397,  396,   77,  695,   77,  401,
      695,  399,  403,  695,   77,  404,   77,  695,   77,   77,
       77,   77,   77,   77,   77,  400,   77,   77,   77,   77,
       77,  398,  695,  396,   77,  695,   77,  401,   77,  399,
      403,   77,   77,  695,   77,   77,   77,   77,  405,   77,
      695,   77,  406,   77,  695,   77,   77,   77,  695,  695,
       77,   77,  695,  407,   77,  695,   77,   77,  695,   77,
       77,   77,  695,   77,   77,   77,  405,   77,   77,   77,
      408,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      409,  407,   77,   77,   77,   77,   77,  411,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,  408,   77,
       77,   77,  695,   77,   77,   77,  412,  695,  409,  410,
      695,   77,   77,   77,   77,  411,   77,   77,   77,   77,
       77,   77,   77,   77,  695,   77,  695,   77,  695,   77,
      695,   77,  413,   77,  412,   77,   77,  410,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  695,  414,   77,
       77,  695,  695,   77,   77,  415,  695,   77,   77,  695,
      413,   77,  695,   77,   77,  695,   77,   77,   77,  416,
       77,   77,   77,  417,   77,  695,  414,   77,   77,  695,
       77,   77,   77,  415,   77,  695,   77,   77,   77,  695,

       77,   77,  420,  418,   77,   77,  695,  416,   77,  695,
      419,  417,  695,  695,  695,   77,   77,  421,   77,   77,
       77,  695,   77,  695,   77,   77,   77,  695,   77,   77,
      420,  418,   77,   77,  695,   77,   77,  695,  419,   77,
      422,  695,  423,   77,   77,  421,   77,   77,   77,  424,
       77,   77,   77,   77,   77,   77,   77,  425,   77,  426,
       77,   77,  427,   77,   77,   77,   77,   77,  422,   77,
      423,   77,   77,   77,   77,   77,   77,  424,   77,   77,
       77,   77,   77,   77,   77,  425,   77,  426,   77,   77,
      427,  428,   77,   77,   77,   73,  695,   77,  326,  327,

       77,   77,  695,  695,   77,  695,  695,  695,   77,  695,
      328,  328,  328,  328,  328,  328,  328,  328,  695,  428,
      430,  695,  695,   77,   77,   77,  431,   77,   77,   77,
       77,   77,   77,   77,   77,  695,   77,  432,   77,   77,
       77,  695,  695,   77,  695,  433,  695,   77,  430,  695,
      328,   77,   77,   77,  431,   77,   77,   77,   77,   77,
       77,   77,   77,  434,   77,  432,   77,   77,   77,  695,
       77,   77,  695,  433,   77,   77,  436,   77,   77,  695,
       77,   77,  439,  695,   77,   77,   77,  695,  695,  435,
       77,  434,  438,  437,   77,   77,  695,  695,   77,   77,

      440,  695,   77,   77,  436,   77,   77,   77,   77,   77,
      695,   77,   77,   77,   77,   77,  695,  435,   77,  695,
      438,  437,   77,   77,  695,   77,   77,   77,  440,   77,
       77,   77,   77,   77,   77,   77,   77,  442,  695,   77,
       77,  695,  695,   77,  441,  443,  695,  695,  695,  695,
      695,   77,  695,   77,   77,  450,  695,   77,   77,   77,
       77,   77,   77,   77,   77,  442,  695,   77,   77,  695,
      695,   77,  441,  443,  444,  445,  446,  447,  448,   77,
      449,  695,  695,  450,   77,  695,   77,   77,   77,   77,
       77,   77,  455,   77,   77,   77,   77,  452,  451,   77,

       77,  695,   77,  453,   77,  695,   77,   77,  695,  454,
       77,   77,   77,  695,   77,   77,   77,   77,   77,  456,
      455,   77,   77,  695,   77,  452,  451,  695,   77,  695,
       77,  453,   77,  695,   77,   77,   77,  454,   77,   77,
       77,   77,  695,   77,   77,   77,  695,  456,   77,   77,
      695,  695,   77,  466,  695,  457,   77,   77,  695,  695,
      458,   77,  695,  695,   77,  695,  695,   73,   77,   77,
       74,   75,   77,   77,  695,   73,   77,   77,   74,   75,
       77,  466,  540,  457,   77,   77,  695,  541,  458,   77,
       76,   76,   76,   76,   76,   76,   76,   76,  460,  461,

      462,  463,  464,   77,  465,  468,  695,  467,   77,   77,
       77,   77,  475,   77,   77,  695,   77,  695,   77,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
       76,   77,  695,  468,  695,  467,   77,   77,   77,   77,
      475,   77,   77,  695,   77,  695,   77,  362,  362,  363,
      364,  362,  362,  365,  366,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  695,  695,  695,  695,  695,
      695,  695,  695,  362,  362,  362,  362,  362,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  695,  469,  695,  476,  695,  470,   77,   77,  471,

      474,   77,  477,  695,  362,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  695,
      469,  695,  476,  695,  470,   77,   77,  471,  474,   77,
      477,  362,  362,   77,   77,   77,   77,  695,  478,  479,
       77,  480,   77,   77,   77,   77,   77,   77,  481,   77,
       77,   77,  695,   77,   77,   77,  695,   77,  695,  695,
      482,   77,   77,   77,   77,   77,  478,  479,   77,  480,
       77,   77,   77,   77,   77,   77,  481,   77,   77,   77,
      485,   77,   77,   77,  695,   77,  695,   77,  482,   77,
       77,   77,  483,   77,   77,   77,   77,  695,   77,  695,

      486,  695,  695,  695,   77,   77,  695,  484,   77,   77,
      695,  695,   77,   77,  695,   77,   77,  695,   77,   77,
      483,   77,   77,   77,   77,   77,   77,  695,  486,   77,
       77,  695,   77,   77,   77,  484,   77,   77,   77,  487,
       77,   77,   77,  488,   77,  695,   77,   77,   77,   77,
       77,  490,   77,   77,  695,   77,   77,   77,   77,  489,
       77,   77,   77,  695,   77,  491,   77,  487,   77,   77,
       77,  488,  695,   77,   77,   77,   77,  492,   77,  490,
       77,   77,  695,   77,   77,  695,   77,  489,   77,   77,
       77,  493,   77,  491,   77,  695,   77,   77,   77,  695,

       77,   77,   77,  496,   77,  492,   77,   77,   77,   77,
      695,   77,  494,   77,   77,   77,  695,   77,   77,  493,
      695,   77,   77,  695,  501,  695,   77,  695,   77,   77,
       77,  496,   77,   77,   77,   77,   77,   77,   77,   77,
      494,   77,  498,   77,  497,   77,   77,   77,  695,   77,
       77,   77,  499,  695,   77,   77,  695,   77,   77,   77,
      500,   77,  695,   77,  695,   77,   77,   77,  695,   77,
      498,  695,  497,  503,   77,   77,  502,   77,   77,   77,
      499,  695,   77,   77,  695,  695,   77,   77,  500,  695,
      695,   77,  695,  695,   77,   77,   73,   77,   77,   74,

       75,  503,   77,  695,  502,   77,  695,  695,  505,  695,
      695,   76,   76,   76,   76,   76,   76,   76,   76,  695,
       77,   77,   77,  695,  506,   77,   77,   77,   77,   77,
       77,   77,  695,   77,   77,   77,  505,   77,   77,  507,
      695,   77,   77,  695,  695,  695,  508,  695,   77,   77,
       77,   76,  506,   77,   77,   77,   77,   77,   77,   77,
      695,   77,   77,   77,  509,   77,   77,  507,   77,   77,
       77,   77,   77,   77,  508,   77,   77,   77,   77,  511,
       77,   77,   77,  510,   77,  695,   77,   77,   77,  695,
       77,   77,  509,  513,   77,   77,   77,  695,   77,   77,

       77,   77,  695,   77,   77,   77,  512,  511,   77,   77,
      695,  510,   77,  695,  516,   77,   77,  695,   77,   77,
       77,  513,   77,   77,   77,   77,   77,   77,   77,   77,
      695,   77,  695,   77,  512,   77,  514,   77,   77,   77,
      695,   77,   77,   77,  695,  515,   77,   77,   77,  695,
       77,  695,   77,   77,   77,   77,   77,   77,   77,   77,
      695,   77,  695,   77,  514,   77,   77,   77,   77,   77,
       77,   77,   77,  515,   77,   77,   77,   77,   77,  517,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  695,
      695,  519,  695,   77,  518,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,  517,   77,   77,
      695,   77,   77,   77,  695,   77,   77,  520,  695,  519,
       77,   77,  518,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  695,   77,   77,  695,  521,
       77,   77,  695,  695,  695,  520,  532,  695,   77,   77,
       77,  531,   77,   77,   77,  695,   77,   77,   77,  695,
       77,   77,  695,  695,   77,   77,  695,  521,   77,   77,
      533,  695,   77,  695,  532,  695,   77,   77,   77,  531,
       77,   77,   77,  695,   77,   77,   77,  534,   77,   77,
      695,   77,   77,   77,  695,   77,  695,   77,  533,   77,

       77,  695,  695,  695,   77,  695,  535,  695,   77,  695,
      695,  695,   77,  695,  695,  534,   77,   77,  695,   77,
       77,   77,  695,   77,   77,   77,   73,   77,   77,   74,
       75,  695,   77,  695,  535,   73,  695,  547,   74,   75,
      695,  536,  536,  536,  536,  536,  536,  536,  536,  695,
      542,  552,   77,  695,   77,  543,   77,  695,   77,   77,
       77,  695,   77,   77,   77,  547,   77,   77,   77,  695,
       77,  548,   77,  695,   77,  695,   77,  551,  549,  695,
       77,  536,   77,  550,   77,   77,   77,   77,  695,  555,
       77,   77,   77,   77,   77,   77,   77,  695,   77,  548,

       77,  695,   77,  695,   77,  551,  549,  695,   77,  695,
       77,  550,   77,   77,   77,   77,  695,  555,   77,   77,
      695,   77,  695,   77,  695,  695,  695,  695,  556,  557,
      558,  559,  560,  561,  695,  562,   77,  695,   77,  563,
       77,   77,   77,   77,   77,   77,   77,   77,  695,   77,
       77,   77,  695,   77,   77,   77,  556,   77,   77,   77,
      695,   77,  695,   77,   77,  695,  695,  563,   77,   77,
      564,   77,   77,   77,  695,  566,  695,   77,   77,   77,
      695,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      565,   77,   77,   77,  695,  695,   77,   77,  564,   77,

       77,  567,  695,  566,   77,  695,  695,   77,  695,   77,
      568,   77,   77,   77,  695,   77,   77,   77,  565,   77,
       77,   77,  569,  695,   77,   77,   77,   77,   77,  567,
       77,   77,   77,  570,   77,   77,   77,   77,  568,   77,
       77,   77,  695,   77,   77,   77,  695,   77,   77,  571,
      569,  695,   77,  695,   77,   77,   77,  695,   77,   77,
      695,  570,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  571,  695,   77,
       77,   77,  572,   77,   77,   77,  577,   77,  573,   77,
      695,  695,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,  695,  576,   77,   77,   77,
      572,   77,   77,   77,  577,   77,  573,   77,   77,  578,
       77,  695,   77,  695,   77,   77,   77,  695,   77,   77,
      579,  695,   77,   77,  576,  695,   77,  695,  695,  695,
       77,  695,  695,  695,  695,  695,   77,  578,   73,  695,
       77,  580,  581,   77,   77,  695,  695,   77,  579,  695,
      695,   77,  695,  582,  582,  582,  582,  582,  582,  582,
      582,  695,   77,   77,  584,  695,   77,   77,   77,  695,
       77,   77,  586,  695,  695,  695,   77,  585,   77,   77,
      587,  588,   77,   77,  695,  695,   77,   77,  695,  695,

       77,   77,  584,  582,   77,   77,   77,  695,   77,   77,
      586,  695,  695,  695,   77,  585,   77,   77,  587,  588,
       77,   77,   77,   77,   77,   77,  589,   77,   77,  695,
       77,   77,   77,   77,  590,   77,   77,   77,   77,   77,
      592,   77,   77,   77,  695,  695,   77,  695,  695,  695,
       77,   77,  695,  695,  589,   77,   77,  591,   77,   77,
       77,   77,  590,   77,   77,   77,   77,   77,  592,   77,
       77,   77,   77,   77,   77,  695,   77,   77,   77,  695,
       77,   77,   77,  593,   77,  591,   77,  695,   77,  595,
      597,  594,   77,  695,   77,  695,  695,  695,   77,  596,

       77,   77,  695,  695,   77,   77,   77,  695,   77,   77,
       77,  593,   77,  695,   77,  695,   77,  595,  597,  594,
       77,   77,   77,  695,   77,   77,   77,  596,   77,   77,
       77,   77,   77,   77,   77,   77,  695,   77,   77,   77,
      695,  600,  695,  695,  695,  695,  695,  695,  695,   77,
      599,  695,   77,   77,  695,  695,   77,   77,   77,   77,
       77,   77,   77,   77,  695,   77,   77,   77,   73,  600,
      695,   74,   75,   77,  695,  695,  695,   77,  599,  602,
      695,   77,  695,  536,  536,  536,  536,  536,  536,  536,
      536,  695,   77,  695,   77,  695,   77,  695,   77,  695,

       77,   77,   77,  695,   77,   77,   77,  602,  603,   77,
       77,   77,   77,  695,   77,   77,  695,  695,  695,   77,
       77,  695,   77,  536,   77,  695,   77,  695,   77,  695,
       77,  695,   77,  695,   77,  695,  603,   77,   77,   77,
       77,   77,   77,   77,  604,   77,   73,   77,   73,   74,
       75,   74,   75,  695,  695,  695,   77,  695,  695,  605,
       77,  606,  695,  608,   77,   77,  607,  695,  609,   77,
      695,   73,  604,   77,   74,   75,  695,   77,  616,  695,
      695,   77,  695,  695,   77,   77,  610,  605,   77,   77,
       77,  611,   77,   77,   77,  615,  618,   77,   77,  695,

      695,  695,  617,   77,  695,   77,  621,   77,  695,   77,
       77,   77,  695,   77,   77,  695,  695,   77,   77,  695,
      695,   77,   77,  615,  618,   77,   77,  695,   77,  695,
      617,   77,   77,  619,  621,   77,   77,  695,   77,   77,
       77,  620,   77,  695,   77,   77,  623,  695,   77,   77,
       77,  622,  695,   77,   77,   77,   77,  695,   77,   77,
       77,  619,   77,   77,   77,  695,  624,   77,   77,  620,
      695,   77,   77,   77,  623,   77,   77,   77,   77,  622,
       77,   77,   77,   77,   77,  695,   77,   77,   77,  695,
       77,   77,   77,   77,  624,   77,   77,   77,  625,   77,

       77,   77,  695,   77,  695,   77,  628,  626,   77,   77,
      695,  695,   77,   77,  695,  695,   77,  695,  695,  695,
       77,   77,  695,  695,   77,   77,  625,   73,   77,   77,
      580,  581,  695,   77,  628,  626,   73,   77,  695,   74,
       75,   77,  582,  582,  582,  582,  582,  582,  582,  582,
      695,   76,   76,   76,   76,   76,   76,   76,   76,  695,
       77,   77,   77,  695,   77,   77,   77,   77,   77,   77,
       77,  630,   77,  695,  695,   77,   77,  695,  695,  629,
      631,  695,  582,  633,  695,  695,  695,  695,   77,   77,
       77,   76,   77,   77,   77,   77,   77,   77,   77,  630,

       77,   77,   77,   77,   77,   77,   77,  629,  631,   77,
       77,  695,   77,   77,   77,  695,  634,   77,  635,  632,
       77,   77,   77,   77,   77,  695,  695,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  695,   77,   77,   77,
       77,   77,   77,   77,  634,   77,  635,  632,   77,   77,
       77,   77,   77,  636,   77,   77,   77,  695,   77,   77,
       77,  695,   77,   77,   77,  637,   77,   77,   77,   77,
      638,   77,   77,   77,   77,   77,   77,  639,  695,   77,
       77,  636,   77,   77,   77,  695,   77,  695,  695,  695,
       77,  695,   77,  637,   77,  641,   77,   77,  638,  695,

       77,   77,   77,   77,   77,  639,   77,   77,   77,  695,
       77,   77,   77,  642,   77,  695,   77,  695,   77,  695,
       77,  643,   77,  641,   77,   77,   77,   77,   77,  645,
      695,   77,   77,   77,   77,   77,   77,  695,   77,  646,
      695,  642,   77,  695,   77,  695,   77,  644,   77,  643,
       77,  695,   77,   77,   77,   77,   77,  645,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  646,   77,   77,
      695,  647,   77,   77,  695,  644,   77,  695,  695,   77,
      695,  648,  695,   77,  695,  695,   77,   77,  651,  695,
       77,  695,  695,   77,   77,  695,   77,   77,  695,  647,

       77,   77,   73,  695,   77,   74,   75,   77,  695,  648,
      695,   77,  695,  695,  695,   77,  651,  649,  649,  649,
      649,  649,  649,  649,  649,  695,   77,   77,   77,  695,
       77,   77,   77,   77,  652,   77,   77,   77,  695,   77,
      695,   77,  695,   77,  656,  653,  695,   77,  695,  695,
      695,  695,  695,  695,   77,   77,   77,  649,   77,   77,
       77,   77,  652,   77,   77,   77,   77,   77,  695,   77,
       77,   77,  656,  653,   77,   77,  695,   77,   77,   77,
      695,  657,  658,   77,  655,   77,   77,  659,   77,  695,
      695,  660,   77,   77,   77,   77,   77,   77,   77,  664,

       77,   77,   77,   77,  661,   77,   77,   77,   77,  657,
      658,   77,  655,   77,   77,  659,   77,  662,   77,  660,
       77,   77,   77,   77,   77,   77,   77,  664,   77,   77,
       77,   77,  661,  695,   77,   77,   77,  663,   77,  665,
       77,  695,  695,   77,   77,  662,   77,  695,   77,  695,
       77,  695,  695,  695,   77,  695,   77,  695,   77,  666,
       77,  695,   77,   77,   77,  663,   77,  665,   77,  695,
      695,   77,   77,  695,  695,  667,   77,  695,   73,  695,
      695,   74,   75,  695,   77,  695,  695,  666,   77,  695,
      695,  695,   77,  649,  649,  649,  649,  649,  649,  649,

      649,  695,   77,  667,   77,  695,  668,   77,   77,   77,
       77,  670,   77,   77,  695,   77,  674,   77,  669,   77,
       77,   77,  695,   77,   77,   77,  695,   77,  695,   77,
       77,  695,   77,  649,  668,   77,   77,   77,   77,  670,
       77,   77,  695,   77,  674,   77,  669,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  675,   77,   77,   77,
       77,   77,   77,   77,   77,  678,   77,   77,   77,   77,
       77,  695,  695,   77,  695,  695,  677,   77,   77,  676,
      695,   77,   77,  695,  675,  695,   77,   77,   77,   77,
       77,   77,   77,  678,   77,   77,   77,   77,   77,  695,

      695,   77,   77,  695,  677,   77,   77,  676,   77,   77,
       77,   77,   77,   77,  695,   77,   77,   77,   77,   77,
      679,   77,   77,   77,   77,  695,   77,   77,   77,  695,
       77,   77,   77,  695,   77,  695,   77,  680,   77,   77,
       77,   77,  695,   77,   77,   77,   77,   77,  679,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  681,   77,
       77,   77,   77,  695,  685,  680,   77,   77,  695,   77,
       77,   77,  695,   77,  686,   77,  687,   77,  695,   77,
       77,   77,  695,   77,  690,   77,  681,   77,   77,   77,
       77,  695,  685,  695,   77,   77,  695,   77,   77,   77,

      695,   77,  686,   77,  687,   77,   77,   77,   77,   77,
       77,   77,  690,   77,   77,   77,   77,   77,  695,   77,
       77,  695,  695,   77,   77,  688,  689,   77,   77,  695,
      695,  695,   77,  695,   77,  695,   77,   77,   77,  691,
       77,   77,   77,  695,  695,   77,  695,   77,   77,  695,
      695,   77,   77,  688,  689,   77,   77,  692,   77,  695,
       77,   77,   77,  695,   77,   77,   77,  691,   77,   77,
       77,   77,   77,   77,   77,  694,   77,   77,   77,   77,
       77,  695,  693,  695,  695,  692,   77,  695,  695,   77,
       77,  695,  695,   77,   77,  695,  695,   77,   77,   77,

       77,   77,   77,  694,   77,   77,   77,   77,   77,  695,
      693,   53,   53,   53,   77,   77,  166,  166,  166,   76,
       76,  214,  214,  329,  329,  328,  328,  459,  459,  362,
      362,  362,  367,  367,  367,  504,  504,  537,  537,  574,
      574,  574,  583,  583,  536,  536,  582,  582,  627,  627,
      650,  650,  649,  649,  671,  671,  671,  682,  682,  682,
        3,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695
    } ;

static const flex_int16_t yy_chk[5748] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    7,    9,    9,
       19,   23,   23,   23,   18,   18,   18,   18,   18,   18,

       18,   18,   19,    2,    2,    2,    2,    2,    2,    2,
        2,   18,   20,  697,   20,   20,   20,   20,   20,   20,
       20,   20,   25,   25,   31,   33,   49,   53,   31,   33,
      575,  164,   31,   33,   55,   31,   55,   31,   31,   18,
        7,   56,   56,   49,   49,   49,   49,   49,   49,   49,
       49,  166,   31,   33,    9,   26,   31,   33,   26,   26,
       31,   33,  291,   31,   76,   31,   31,   76,   76,  574,
       26,   26,   26,   26,   26,   26,   26,   26,  164,  167,
       53,  374,  374,   32,   26,   26,  402,   32,  495,   55,
      291,   32,  473,  472,   32,  328,   26,   32,  328,  328,

       32,   26,   26,  168,  166,  168,  164,   56,  366,  654,
       26,   32,   26,   26,  402,   32,  365,  633,  364,   32,
      633,   50,   32,  523,   26,   32,  523,  523,   32,   26,
       26,   27,  167,  363,   27,   27,   50,  671,   50,   50,
       50,   50,   50,   50,   50,   50,   27,   27,   27,   27,
       27,   27,   27,   27,  682,  362,   34,  330,  168,   27,
       34,   34,  654,   72,   34,   27,   68,   35,   67,   34,
       27,   35,   63,   52,   27,   35,   27,   51,   21,  447,
       35,   35,  447,  447,   34,   17,   27,   27,   34,   34,
      671,   15,   34,   27,  447,   35,   14,   34,   27,   35,

        6,    5,   27,   35,   27,   28,    3,  682,   35,   35,
       36,   28,   28,   28,   36,  683,   28,   37,   36,   28,
       28,   37,   28,  449,   36,   37,  449,  449,  673,   28,
      673,   37,  524,   28,    0,  524,  524,    0,   36,   28,
       28,   28,   36,  449,   28,   37,   36,   28,   28,   37,
       28,  525,   36,   37,  525,  525,    0,   28,   29,   37,
        0,    0,   29,   44,   29,    0,   29,   44,  683,   29,
        0,   44,    0,   29,    0,   29,  465,   46,    0,  465,
      465,   46,    0,  673,  526,   46,   29,  526,  526,    0,
       29,   44,   29,    0,   29,   44,  465,   29,    0,   44,

        0,   29,    0,   29,   30,   46,   40,    0,   30,   46,
       40,    0,   30,   46,   40,   30,    0,   30,   30,   40,
       40,  527,   43,    0,  527,  527,   43,   30,    0,    0,
       43,    0,   30,    0,   40,   43,   30,    0,   40,    0,
       30,    0,   40,   30,    0,   30,   30,   40,   40,  528,
       43,    0,  528,  528,   43,   30,   38,   38,   43,    0,
       38,   38,   45,   43,   38,  684,   45,  684,    0,   45,
       45,   38,    0,   38,   38,   38,  444,    0,   77,  444,
      444,    0,   77,    0,   38,   38,   77,    0,   38,   38,
       45,  444,   38,    0,   45,    0,  444,   45,   45,   38,

        0,   38,   38,   38,   39,    0,   77,    0,   39,    0,
       77,    0,   39,  529,   77,   39,  529,  529,   39,    0,
      684,   39,    0,   39,   61,   61,   61,   61,   61,   61,
       61,   61,   39,    0,    0,  445,   39,    0,  445,  445,
       39,   61,    0,   39,  530,    0,   39,  530,  530,   39,
      445,   39,   41,    0,   41,  445,   41,   82,   41,   41,
       41,   82,    0,    0,    0,   82,   41,   41,   41,   61,
       82,   41,    0,   78,   41,  448,    0,   78,  448,  448,
       41,   78,   41,    0,   41,   82,   41,   41,   41,   82,
      448,   78,    0,   82,   41,   41,   41,    0,   82,   41,

       79,   78,   41,   42,   79,   78,    0,   42,   79,   78,
       42,   42,  536,    0,    0,  536,  536,   42,   79,   78,
       42,    0,  446,    0,    0,  446,  446,   42,   79,    0,
      539,   42,   79,  539,  539,   42,   79,  446,   42,   42,
      540,    0,  446,  540,  540,   42,   79,    0,   42,    0,
        0,   62,    0,   62,    0,   42,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,  169,  169,  169,  169,  169,  169,  169,  169,
       66,   65,   66,   66,   66,   66,   66,   66,   66,   66,
       80,    0,   83,   80,   80,   81,   83,   81,   80,   81,

       83,    0,   84,   81,    0,   83,   84,    0,   81,   65,
       84,  541,    0,  542,  541,  541,  542,  542,   80,    0,
       83,   80,   80,   81,   83,   81,   80,   81,   83,    0,
       84,   81,    0,   83,   84,   85,   81,   86,   84,   85,
       87,   86,   88,   85,   87,   86,   88,    0,   87,  463,
       88,    0,  463,  463,    0,   85,    0,   86,   89,    0,
       88,    0,   89,   85,  463,   86,   89,   85,   87,   86,
       88,   85,   87,   86,   88,   89,   87,  543,   88,    0,
      543,  543,    0,   85,    0,   86,   89,   90,   88,   93,
       89,   90,   91,   93,   89,   90,   91,   93,  544,    0,

       91,  544,  544,   89,   90,   94,   91,    0,  545,   94,
       91,  545,  545,   94,    0,   90,    0,   93,   92,   90,
       91,   93,   92,   90,   91,   93,   92,  464,   91,   92,
      464,  464,   90,   94,   91,    0,   92,   94,   91,   95,
        0,   94,  464,   95,   97,  106,   92,   95,   97,  106,
       92,    0,   97,  106,   92,   96,   97,   92,   95,   96,
       96,   96,  106,   96,   92,   97,   96,   95,    0,    0,
        0,   95,   97,  106,   98,   95,   97,  106,   98,    0,
       97,  106,   98,   96,   97,    0,   95,   96,   96,   96,
      106,   96,   98,   97,   96,   99,  100,    0,   99,   99,

      100,  100,   98,   99,  100,  546,   98,  101,  546,  546,
       98,  101,    0,  100,  582,  101,    0,  582,  582,    0,
       98,    0,  101,   99,  100,    0,   99,   99,  100,  100,
        0,   99,  100,    0,  102,  101,  102,    0,  102,  101,
      103,  100,  102,  101,  103,  102,    0,    0,  103,  104,
      101,  103,  522,  104,    0,  522,  522,  104,    0,    0,
        0,    0,  102,  104,  102,    0,  102,  522,  103,    0,
      102,  598,  103,  102,  598,  598,  103,  104,    0,  103,
      105,  104,    0,  105,  105,  104,  107,    0,    0,  538,
      107,  104,  538,  538,  107,  105,  105,  105,  105,  105,

      105,  105,  105,  601,  538,  107,  601,  601,  109,  108,
        0,  110,  109,  108,  107,  110,  109,  108,  107,  110,
      111,    0,  107,  108,  111,    0,  109,  109,  111,    0,
        0,    0,    0,  107,    0,  105,  109,  108,    0,  110,
      109,  108,  113,  110,  109,  108,  113,  110,  111,    0,
      113,  108,  111,    0,  109,  109,  111,  112,  114,    0,
      113,  112,  114,  114,    0,  112,  114,  112,    0,    0,
      113,  114,  112,    0,  113,  112,  112,  114,  113,  115,
        0,    0,    0,  115,    0,  112,  114,  115,  113,  112,
      114,  114,  115,  112,  114,  112,    0,  115,  116,  114,

      112,    0,  116,  112,  112,  114,  116,  115,  117,    0,
      117,  115,  117,  118,  117,  115,  117,  118,    0,  118,
      115,  118,    0,    0,  119,  115,  116,  119,  119,    0,
      116,    0,  119,    0,  116,    0,  117,    0,  117,    0,
      117,  118,  117,    0,  117,  118,    0,  118,    0,  118,
      120,    0,  119,  120,  120,  119,  119,  121,  120,    0,
      119,  121,    0,  120,  122,  121,    0,  123,  122,  124,
      120,  123,  122,  124,    0,  123,  123,  124,  120,    0,
      121,  120,  120,  122,  607,  121,  120,  607,  607,  121,
        0,  120,  122,  121,    0,  123,  122,  124,  120,  123,

      122,  124,  125,  123,  123,  124,  125,    0,  121,  126,
      125,  122,  127,  126,  127,  128,  127,  126,    0,  128,
      127,  129,  128,  128,    0,  129,    0,  131,    0,  129,
      125,  131,    0,    0,  125,  131,    0,  126,  125,    0,
      127,  126,  127,  128,  127,  126,    0,  128,  127,  129,
      128,  128,  130,  129,  132,  131,  130,  129,  132,  131,
      130,  133,  132,  131,    0,  133,  130,  134,  132,  133,
      134,  134,    0,  608,    0,  134,  608,  608,  133,    0,
      130,    0,  132,    0,  130,    0,  132,    0,  130,  133,
      132,    0,    0,  133,  130,  134,  132,  133,  134,  134,

        0,  562,    0,  134,  562,  562,  133,  135,  136,  135,
      135,    0,  136,    0,  136,    0,  136,  135,    0,  135,
      135,  562,  135,    0,  137,  135,  135,  137,  137,    0,
      609,    0,  137,  609,  609,  135,  136,  135,  135,    0,
      136,    0,  136,    0,  136,  135,    0,  135,  135,    0,
      135,    0,  137,  135,  135,  137,  137,  138,  139,    0,
      137,  138,  139,  140,  141,  138,  139,  140,  141,    0,
      142,  140,  141,    0,  142,  139,  138,  141,  142,  610,
      140,    0,  610,  610,  142,  138,  139,    0,    0,  138,
      139,  140,  141,  138,  139,  140,  141,    0,  142,  140,

      141,    0,  142,  139,  138,  141,  142,  143,  140,  148,
      144,  143,  142,  148,  144,  143,    0,  148,  144,  146,
      143,  144,  145,  146,  145,  560,  145,  146,  560,  560,
      145,    0,    0,    0,    0,  143,  146,  148,  144,  143,
      560,  148,  144,  143,    0,  148,  144,  146,  143,  144,
      145,  146,  145,  147,  145,  146,    0,  147,  145,  149,
        0,  147,    0,  149,  146,  150,    0,  149,    0,  150,
      147,  151,  149,  150,  152,  151,  153,    0,  152,  151,
      153,  147,  152,    0,  153,  147,  152,  149,  150,  147,
        0,  149,    0,  150,    0,  149,    0,  150,  147,  151,

      149,  150,  152,  151,  153,  154,  152,  151,  153,  154,
      152,  155,  153,  154,  152,  155,  150,  611,    0,  155,
      611,  611,    0,  156,  157,  154,  155,  156,  157,    0,
      159,  156,  157,  154,  159,  157,    0,  154,  159,  155,
      158,  154,  156,  155,  158,    0,  612,  155,  158,  612,
      612,  156,  157,  154,  155,  156,  157,  158,  159,  156,
      157,  160,  159,  157,    0,  160,  159,    0,  158,  160,
      156,  161,  158,  174,    0,  161,  158,  174,  160,  161,
      460,  174,  161,  460,  460,  158,    0,  613,    0,  160,
      613,  613,    0,  160,  162,  460,    0,  160,    0,  161,

      460,  174,  163,  161,    0,  174,  160,  161,    0,  174,
      161,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  163,  163,  163,  163,  163,  165,  170,  170,
      170,  170,  170,  170,  170,  170,  614,    0,    0,  614,
      614,    0,  165,    0,  165,  165,  165,  165,  165,  165,
      165,  165,  175,  176,  177,  178,  175,  176,  177,  178,
      175,  176,  177,  178,  179,  180,    0,  640,  179,  180,
      640,  640,  179,  180,  649,  180,    0,  649,  649,    0,
      175,  176,  177,  178,  175,  176,  177,  178,  175,  176,
      177,  178,  179,  180,  181,    0,  179,  180,  181,    0,

      179,  180,  181,  180,  182,    0,  182,  183,  182,    0,
      184,  183,  182,  181,  184,  183,  185,  186,  184,  187,
      185,  186,  181,  187,  185,  186,  181,  187,    0,  184,
      181,  188,  182,    0,  182,  183,  182,    0,  184,  183,
      182,  181,  184,  183,  185,  186,  184,  187,  185,  186,
      190,  187,  185,  186,  190,  187,  188,  184,  190,  189,
      188,  189,  191,  189,  188,  190,  191,  189,  192,  193,
      191,  194,  192,  193,    0,  194,  192,  193,  190,  194,
      191,    0,  190,  193,  188,    0,  190,  189,  188,  189,
      191,  189,  188,  190,  191,  189,  192,  193,  191,  194,

      192,  193,  195,  194,  192,  193,  195,  194,  191,  196,
      195,  193,  197,  196,    0,  199,  197,  196,    0,  199,
      197,  198,  196,  199,  200,  198,  198,  201,  200,  198,
      195,  201,  200,    0,  195,  201,  198,  196,  195,    0,
      197,  196,    0,  199,  197,  196,    0,  199,  197,  198,
      196,  199,  200,  198,  198,  201,  200,  198,  202,  201,
      200,  203,  202,  201,  198,  203,  202,  561,    0,  203,
      561,  561,    0,    0,    0,  205,  206,    0,    0,  207,
      206,    0,  561,  207,  206,    0,  202,  207,    0,  203,
      202,  208,    0,  203,  202,  208,    0,  203,  204,  208,

      204,  205,  204,  204,  206,  205,  204,  207,  206,  205,
        0,  207,  206,  204,  209,  207,    0,  204,  209,  208,
      204,    0,  209,  208,    0,    0,  204,  208,  204,  205,
      204,  204,  209,  205,  204,  213,  210,  205,    0,  213,
      210,  204,  209,  213,  210,  204,  209,  210,  204,  215,
      209,  211,    0,  215,    0,  211,    0,  215,    0,  211,
      209,  212,  211,  213,  210,  212,    0,  213,  210,  212,
        0,  213,  210,    0,    0,  210,  212,  215,    0,  211,
        0,  215,    0,  211,    0,  215,    0,  211,    0,  212,
      211,  214,  216,  212,  214,  214,    0,  212,    0,  606,

        0,    0,  606,  606,  212,    0,  214,  214,  214,  214,
      214,  214,  214,  214,  606,  217,  217,  216,    0,  217,
      218,  216,  219,  217,  218,  216,  219,  220,  218,  221,
      219,  220,    0,  221,    0,  220,  219,  221,    0,    0,
      218,    0,  220,  217,  217,  216,  214,  217,  218,  216,
      219,  217,  218,  216,  219,  220,  218,  221,  219,  220,
        0,  221,    0,  220,  219,  221,    0,  222,  218,  223,
      220,  222,  224,  223,  225,  222,  224,  223,  225,  226,
      224,    0,  225,  226,    0,    0,  228,  226,    0,  223,
      228,  224,    0,    0,  228,  222,    0,  223,  226,  222,

      224,  223,  225,  222,  224,  223,  225,  226,  224,    0,
      225,  226,  227,    0,  228,  226,  227,  223,  228,  224,
      227,  229,  228,    0,  230,  229,  226,    0,  230,  229,
      232,  227,  230,  232,  232,  231,    0,  233,  232,  231,
      227,  233,  234,  231,  227,  233,  234,  235,  227,  229,
      234,  235,  230,  229,  231,  235,  230,  229,  232,  227,
      230,  232,  232,  231,  236,  233,  232,  231,  237,  233,
      234,  231,  237,  233,  234,  235,  237,  238,  234,  235,
      239,  238,  231,  235,  239,  238,    0,    0,  239,  236,
        0,  238,    0,  236,    0,  240,  237,  236,  239,  240,

      237,    0,  241,  240,  237,  238,  241,  242,  239,  238,
      241,  242,  239,  238,  240,  242,  239,  236,    0,  238,
      243,  236,    0,  240,  243,  236,  239,  240,  243,    0,
      241,  240,    0,  243,  241,  242,  244,  245,  241,  242,
      244,  245,  240,  242,  244,  245,    0,  244,  243,  247,
      248,  246,  243,  247,  248,  246,  243,  247,  248,  246,
        0,  243,  247,  248,  244,  245,    0,  250,  244,  245,
      246,    0,  244,  245,    0,  244,  251,  247,  248,  246,
      251,  247,  248,  246,  251,  247,  248,  246,    0,    0,
      247,  248,  249,  250,  249,  253,  249,  250,  246,  253,

      249,  250,  252,  253,  251,  252,  252,  249,  251,  254,
      252,    0,  251,  254,  253,    0,    0,  254,    0,    0,
      249,  250,  249,  253,  249,  250,    0,  253,  249,  250,
      252,  253,    0,  252,  252,  249,    0,  254,  252,    0,
        0,  254,  253,    0,    0,  254,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  256,  257,  258,  256,  256,  257,  258,  259,
      256,  257,  258,  259,  260,    0,    0,  259,  260,    0,
        0,  260,  260,  258,    0,    0,    0,  261,    0,  259,
      256,  257,  258,  256,  256,  257,  258,  259,  256,  257,
      258,  259,  260,    0,    0,  259,  260,    0,  261,  260,
      260,  258,  261,    0,  262,  263,  261,  259,  262,  263,
      264,  265,  262,  263,  264,  265,  263,  266,  264,  265,

      267,  266,    0,  267,  267,  266,  261,    0,  267,    0,
      261,    0,  262,  263,  261,  267,  262,  263,  264,  265,
      262,  263,  264,  265,  263,  266,  264,  265,  267,  266,
      268,  267,  267,  266,  268,    0,  267,  269,  268,    0,
      270,  269,  271,  267,  270,  269,  271,  272,  270,  273,
      271,  272,  268,  273,    0,  272,    0,  273,  268,    0,
        0,  274,  268,    0,  273,  269,  268,    0,  270,  269,
      271,    0,  270,  269,  271,  272,  270,  273,  271,  272,
      268,  273,    0,  272,    0,  273,  274,  275,    0,  276,
      274,  275,  273,  276,  274,  275,  279,  276,    0,  278,

      279,  277,  275,  278,  279,  277,    0,  278,    0,  277,
        0,    0,  278,    0,  274,  275,    0,  276,  274,  275,
      277,  276,  274,  275,  279,  276,    0,  278,  279,  277,
      275,  278,  279,  277,  280,  278,  280,  277,  280,    0,
      278,  281,  280,    0,    0,  281,  282,  280,  277,  281,
      282,  283,  284,  285,  282,  283,  284,  285,    0,  283,
      284,  285,  280,  287,  280,    0,  280,  287,    0,  281,
      280,  287,    0,  281,  282,  280,  287,  281,  282,  283,
      284,  285,  282,  283,  284,  285,  286,  283,  284,  285,
      286,  287,  288,  289,  286,  287,  288,  289,  290,  287,

      288,  289,  290,  288,  287,  286,  290,    0,  292,  290,
        0,  288,  292,    0,  286,  293,  292,    0,  286,  295,
      288,  289,  286,  295,  288,  289,  290,  295,  288,  289,
      290,  288,    0,  286,  290,    0,  292,  290,  294,  288,
      292,  293,  294,    0,  292,  293,  294,  295,  294,  293,
        0,  295,  296,  297,    0,  295,  298,  297,    0,    0,
      298,  297,    0,  297,  298,    0,  294,  299,    0,  293,
      294,  299,    0,  293,  294,  299,  294,  293,  296,  301,
      299,  297,  296,  301,  298,  297,  296,  301,  298,  297,
      301,  297,  298,  303,  306,  299,  304,  303,  306,  299,

      304,  303,  306,  299,  304,  302,  296,  301,  299,  302,
      296,  301,    0,  302,  296,  301,  304,    0,  301,  302,
        0,  303,  306,  305,  304,  303,  306,  305,  304,  303,
      306,  305,  304,  302,    0,  307,    0,  302,    0,  307,
        0,  302,  305,  307,  304,  308,  311,  302,  309,  308,
      311,  305,  309,  308,  311,  305,  309,    0,  308,  305,
      310,    0,    0,  307,  310,  309,    0,  307,  310,    0,
      305,  307,    0,  308,  311,    0,  309,  308,  311,  310,
      309,  308,  311,  312,  309,    0,  308,  312,  310,    0,
      313,  312,  310,  309,  313,    0,  310,  314,  313,    0,

      315,  314,  314,  313,  315,  314,    0,  310,  315,    0,
      313,  312,    0,    0,    0,  312,  316,  315,  313,  312,
      316,    0,  313,    0,  316,  314,  313,    0,  315,  314,
      314,  313,  315,  314,    0,  317,  315,    0,  313,  317,
      316,    0,  317,  317,  316,  315,  320,  319,  316,  319,
      320,  319,  316,  321,  320,  319,  322,  321,  323,  322,
      322,  321,  323,  317,  322,  324,  323,  317,  316,  324,
      317,  317,  325,  324,  320,  319,  325,  319,  320,  319,
      325,  321,  320,  319,  322,  321,  323,  322,  322,  321,
      323,  325,  322,  324,  323,  329,    0,  324,  329,  329,

      325,  324,    0,    0,  325,    0,    0,    0,  325,    0,
      329,  329,  329,  329,  329,  329,  329,  329,    0,  325,
      331,    0,    0,  333,  331,  332,  332,  333,  331,  332,
      334,  333,  335,  332,  334,    0,  335,  334,  334,  336,
      335,    0,    0,  336,    0,  335,    0,  336,  331,    0,
      329,  333,  331,  332,  332,  333,  331,  332,  334,  333,
      335,  332,  334,  336,  335,  334,  334,  336,  335,    0,
      337,  336,    0,  335,  337,  336,  338,  339,  337,    0,
      338,  339,  340,    0,  338,  339,  341,    0,    0,  337,
      341,  336,  339,  338,  341,  342,    0,    0,  337,  342,

      342,    0,  337,  342,  338,  339,  337,  340,  338,  339,
        0,  340,  338,  339,  341,  340,    0,  337,  341,    0,
      339,  338,  341,  342,    0,  343,  344,  342,  342,  343,
      344,  342,  345,  343,  344,  340,  345,  344,    0,  340,
      345,    0,    0,  340,  343,  345,    0,    0,    0,    0,
        0,  348,    0,  343,  344,  348,    0,  343,  344,  348,
      345,  343,  344,  349,  345,  344,    0,  349,  345,    0,
        0,  349,  343,  345,  347,  347,  347,  347,  347,  348,
      347,    0,    0,  348,  352,    0,  347,  348,  352,  351,
      347,  349,  352,  351,  347,  349,  350,  351,  350,  349,

      350,    0,  353,  351,  350,    0,  353,  354,    0,  351,
      353,  354,  352,    0,  347,  354,  352,  351,  347,  353,
      352,  351,  347,    0,  350,  351,  350,    0,  350,    0,
      353,  351,  350,    0,  353,  354,  355,  351,  353,  354,
      355,  356,    0,  354,  355,  356,    0,  353,  360,  356,
        0,    0,  360,  361,    0,  355,  360,  361,    0,    0,
      356,  361,    0,    0,  355,    0,    0,  461,  355,  356,
      461,  461,  355,  356,    0,  357,  360,  356,  357,  357,
      360,  361,  461,  355,  360,  361,    0,  461,  356,  361,
      357,  357,  357,  357,  357,  357,  357,  357,  358,  358,

      358,  358,  358,  369,  358,  370,    0,  369,  376,  370,
      358,  369,  376,  370,  358,    0,  376,    0,  358,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      357,  369,    0,  370,    0,  369,  376,  370,  358,  369,
      376,  370,  358,    0,  376,    0,  358,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,    0,    0,    0,    0,    0,
        0,    0,    0,  367,  367,  367,  367,  367,  371,  372,
      373,  375,  371,  372,  373,  375,  371,  372,  373,  375,
      377,    0,  371,    0,  377,    0,  372,  378,  377,  373,

      375,  378,  378,    0,  367,  378,  371,  372,  373,  375,
      371,  372,  373,  375,  371,  372,  373,  375,  377,    0,
      371,    0,  377,    0,  372,  378,  377,  373,  375,  378,
      378,  367,  367,  378,  379,  380,  381,    0,  379,  380,
      381,  381,  379,  380,  381,  382,  383,  385,  382,  382,
      383,  385,    0,  382,  383,  385,    0,  386,    0,    0,
      385,  386,  379,  380,  381,  386,  379,  380,  381,  381,
      379,  380,  381,  382,  383,  385,  382,  382,  383,  385,
      389,  382,  383,  385,    0,  386,    0,  388,  385,  386,
      387,  388,  387,  386,  387,  388,  390,    0,  387,    0,

      390,    0,    0,    0,  390,  389,    0,  387,  393,  389,
        0,    0,  393,  389,    0,  388,  393,    0,  387,  388,
      387,  391,  387,  388,  390,  391,  387,    0,  390,  391,
      392,    0,  390,  389,  392,  387,  393,  389,  392,  391,
      393,  389,  394,  392,  393,    0,  394,  396,  395,  391,
      394,  396,  395,  391,    0,  396,  395,  391,  392,  395,
      397,  398,  392,    0,  397,  398,  392,  391,  397,  398,
      394,  392,    0,  399,  394,  396,  395,  399,  394,  396,
      395,  399,    0,  396,  395,    0,  400,  395,  397,  398,
      400,  400,  397,  398,  400,    0,  397,  398,  401,    0,

      403,  399,  401,  403,  403,  399,  401,  405,  403,  399,
        0,  405,  401,  408,  400,  405,    0,  408,  400,  400,
        0,  408,  400,    0,  411,    0,  401,    0,  403,  407,
      401,  403,  403,  407,  401,  405,  403,  407,  409,  405,
      401,  408,  409,  405,  407,  408,  409,  410,    0,  408,
      411,  410,  410,    0,  411,  410,    0,  407,  411,  412,
      410,  407,    0,  412,    0,  407,  409,  412,    0,  413,
      409,    0,  407,  413,  409,  410,  412,  413,  411,  410,
      410,    0,  411,  410,    0,    0,  411,  412,  410,    0,
        0,  412,    0,    0,  415,  412,  414,  413,  415,  414,

      414,  413,  415,    0,  412,  413,    0,    0,  415,    0,
        0,  414,  414,  414,  414,  414,  414,  414,  414,    0,
      416,  417,  415,    0,  416,  417,  415,  418,  416,  417,
      415,  418,    0,  419,  420,  418,  415,  419,  420,  417,
        0,  419,  420,    0,    0,    0,  419,    0,  416,  417,
      421,  414,  416,  417,  421,  418,  416,  417,  421,  418,
        0,  419,  420,  418,  421,  419,  420,  417,  422,  419,
      420,  423,  422,  425,  419,  423,  422,  425,  421,  423,
      426,  425,  421,  422,  426,    0,  421,  424,  426,    0,
      427,  424,  421,  427,  427,  424,  422,    0,  427,  423,

      422,  425,    0,  423,  422,  425,  424,  423,  426,  425,
        0,  422,  426,    0,  434,  424,  426,    0,  427,  424,
      428,  427,  427,  424,  428,  430,  427,  431,  428,  430,
        0,  431,    0,  430,  424,  431,  430,  432,  433,  434,
        0,  432,  433,  434,    0,  432,  433,  434,  428,    0,
      435,    0,  428,  430,  435,  431,  428,  430,  435,  431,
        0,  430,    0,  431,  430,  432,  433,  434,  436,  432,
      433,  434,  436,  432,  433,  434,  436,  437,  435,  436,
      438,  437,  435,  440,  438,  437,  435,  440,  438,    0,
        0,  440,    0,  441,  438,  442,  436,  441,  450,  442,

      436,  441,  450,  442,  436,  437,  450,  436,  438,  437,
        0,  440,  438,  437,    0,  440,  438,  441,    0,  440,
      443,  441,  438,  442,  443,  441,  450,  442,  443,  441,
      450,  442,  451,  452,  450,    0,  451,  452,    0,  443,
      451,  452,    0,    0,    0,  441,  452,    0,  443,  455,
      453,  451,  443,  455,  453,    0,  443,  455,  453,    0,
      451,  452,    0,    0,  451,  452,    0,  443,  451,  452,
      453,    0,  454,    0,  452,    0,  454,  455,  453,  451,
      454,  455,  453,    0,  456,  455,  453,  454,  456,  457,
        0,  458,  456,  457,    0,  458,    0,  457,  453,  458,

      454,    0,    0,    0,  454,    0,  456,    0,  454,    0,
        0,    0,  456,    0,    0,  454,  456,  457,    0,  458,
      456,  457,    0,  458,  466,  457,  459,  458,  466,  459,
      459,    0,  466,    0,  456,  462,    0,  466,  462,  462,
        0,  459,  459,  459,  459,  459,  459,  459,  459,    0,
      462,  471,  466,    0,  467,  462,  466,    0,  467,  468,
      466,    0,  467,  468,  470,  466,  469,  468,  470,    0,
      469,  467,  470,    0,  469,    0,  471,  470,  468,    0,
      471,  459,  467,  469,  471,  474,  467,  468,    0,  474,
      467,  468,  470,  474,  469,  468,  470,    0,  469,  467,

      470,    0,  469,    0,  471,  470,  468,    0,  471,    0,
      475,  469,  471,  474,  475,  476,    0,  474,  475,  476,
        0,  474,    0,  476,    0,    0,    0,    0,  476,  477,
      477,  477,  477,  477,    0,  477,  478,    0,  475,  478,
      478,  477,  475,  476,  478,  477,  475,  476,    0,  477,
      479,  476,    0,  481,  479,  480,  476,  481,  479,  480,
        0,  481,    0,  480,  478,    0,    0,  478,  478,  477,
      480,  483,  478,  477,    0,  483,    0,  477,  479,  483,
        0,  481,  479,  480,  482,  481,  479,  480,  482,  481,
      482,  480,  482,  484,    0,    0,  486,  484,  480,  483,

      486,  484,    0,  483,  486,    0,    0,  483,    0,  489,
      486,  487,  482,  489,    0,  487,  482,  489,  482,  487,
      482,  484,  487,    0,  486,  484,  490,  488,  486,  484,
      490,  488,  486,  488,  490,  488,  491,  489,  486,  487,
      491,  489,    0,  487,  491,  489,    0,  487,  492,  490,
      487,    0,  492,    0,  490,  488,  492,    0,  490,  488,
        0,  488,  490,  488,  491,  493,  494,  496,  491,  493,
      494,  496,  491,  493,  494,  496,  492,  490,    0,  498,
      492,  499,  493,  498,  492,  499,  499,  498,  494,  499,
        0,    0,  497,  493,  494,  496,  497,  493,  494,  496,

      497,  493,  494,  496,  500,    0,  497,  498,  500,  499,
      493,  498,  500,  499,  499,  498,  494,  499,  502,  502,
      497,    0,  502,    0,  497,  503,  502,    0,  497,  503,
      503,    0,  500,  503,  497,    0,  500,    0,    0,    0,
      500,    0,    0,    0,    0,    0,  502,  502,  504,    0,
      502,  504,  504,  503,  502,    0,    0,  503,  503,    0,
        0,  503,    0,  504,  504,  504,  504,  504,  504,  504,
      504,    0,  505,  506,  505,    0,  505,  506,  507,    0,
      505,  506,  507,    0,    0,    0,  507,  506,  508,  509,
      508,  509,  508,  509,    0,    0,  508,  509,    0,    0,

      505,  506,  505,  504,  505,  506,  507,    0,  505,  506,
      507,    0,    0,    0,  507,  506,  508,  509,  508,  509,
      508,  509,  510,  511,  508,  509,  510,  511,  512,    0,
      510,  511,  512,  514,  511,  513,  512,  514,  515,  513,
      515,  514,  515,  513,    0,    0,  515,    0,    0,    0,
      510,  511,    0,    0,  510,  511,  512,  513,  510,  511,
      512,  514,  511,  513,  512,  514,  515,  513,  515,  514,
      515,  513,  517,  518,  515,    0,  517,  518,  519,    0,
      517,  518,  519,  517,  520,  513,  519,    0,  520,  519,
      521,  518,  520,    0,  521,    0,    0,    0,  521,  520,

      517,  518,    0,    0,  517,  518,  519,    0,  517,  518,
      519,  517,  520,    0,  519,    0,  520,  519,  521,  518,
      520,  531,  521,    0,  532,  531,  521,  520,  532,  531,
      534,  533,  532,  535,  534,  533,    0,  535,  534,  533,
        0,  535,    0,    0,    0,    0,    0,    0,    0,  531,
      533,    0,  532,  531,    0,    0,  532,  531,  534,  533,
      532,  535,  534,  533,    0,  535,  534,  533,  537,  535,
        0,  537,  537,  547,    0,    0,    0,  547,  533,  547,
        0,  547,    0,  537,  537,  537,  537,  537,  537,  537,
      537,    0,  548,    0,  549,    0,  548,    0,  549,    0,

      548,  547,  549,    0,  550,  547,  551,  547,  550,  547,
      551,  555,  550,    0,  551,  555,    0,    0,    0,  555,
      548,    0,  549,  537,  548,    0,  549,    0,  548,    0,
      549,    0,  550,    0,  551,    0,  550,  556,  551,  555,
      550,  556,  551,  555,  556,  556,  557,  555,  558,  557,
      557,  558,  558,    0,    0,    0,  563,    0,    0,  556,
      563,  557,    0,  558,  563,  556,  557,    0,  558,  556,
        0,  559,  556,  556,  559,  559,    0,  564,  565,    0,
        0,  564,    0,    0,  563,  564,  559,  556,  563,  566,
      567,  559,  563,  566,  567,  564,  567,  566,  567,    0,

        0,    0,  566,  565,    0,  564,  569,  565,    0,  564,
      569,  565,    0,  564,  569,    0,    0,  566,  567,    0,
        0,  566,  567,  564,  567,  566,  567,    0,  568,    0,
      566,  565,  568,  568,  569,  565,  568,    0,  569,  565,
      570,  568,  569,    0,  570,  571,  572,    0,  570,  571,
      572,  570,    0,  571,  572,  573,  568,    0,  576,  573,
      568,  568,  576,  573,  568,    0,  576,  577,  570,  568,
        0,  577,  570,  571,  572,  577,  570,  571,  572,  570,
      586,  571,  572,  573,  586,    0,  576,  573,  586,    0,
      576,  573,  578,  579,  576,  577,  578,  579,  578,  577,

      578,  579,    0,  577,    0,  585,  585,  579,  586,  585,
        0,    0,  586,  585,    0,    0,  586,    0,    0,    0,
      578,  579,    0,    0,  578,  579,  578,  583,  578,  579,
      583,  583,    0,  585,  585,  579,  584,  585,    0,  584,
      584,  585,  583,  583,  583,  583,  583,  583,  583,  583,
        0,  584,  584,  584,  584,  584,  584,  584,  584,    0,
      587,  588,  589,    0,  587,  588,  589,  590,  587,  588,
      589,  590,  591,    0,    0,  590,  591,    0,    0,  587,
      591,    0,  583,  593,    0,    0,    0,    0,  587,  588,
      589,  584,  587,  588,  589,  590,  587,  588,  589,  590,

      591,  592,  594,  590,  591,  592,  594,  587,  591,  592,
      594,    0,  595,  593,  596,    0,  595,  593,  596,  592,
      595,  593,  596,  597,  599,    0,    0,  597,  599,  592,
      594,  597,  599,  592,  594,  600,    0,  592,  594,  600,
      595,  593,  596,  600,  595,  593,  596,  592,  595,  593,
      596,  597,  599,  600,  602,  597,  599,    0,  602,  597,
      599,    0,  602,  600,  603,  602,  604,  600,  603,  605,
      604,  600,  603,  605,  604,  615,  617,  605,    0,  615,
      617,  600,  602,  615,  617,    0,  602,    0,    0,    0,
      602,    0,  603,  602,  604,  617,  603,  605,  604,    0,

      603,  605,  604,  615,  617,  605,  618,  615,  617,    0,
      618,  615,  617,  618,  618,    0,  619,    0,  620,    0,
      619,  619,  620,  617,  619,  622,  620,  623,  621,  622,
        0,  623,  621,  622,  618,  623,  621,    0,  618,  623,
        0,  618,  618,    0,  619,    0,  620,  621,  619,  619,
      620,    0,  619,  622,  620,  623,  621,  622,  624,  623,
      621,  622,  624,  623,  621,  625,  624,  623,  626,  625,
        0,  624,  626,  625,    0,  621,  626,    0,    0,  628,
        0,  626,    0,  628,    0,    0,  624,  628,  628,    0,
      624,    0,    0,  625,  624,    0,  626,  625,    0,  624,

      626,  625,  627,    0,  626,  627,  627,  628,    0,  626,
        0,  628,    0,    0,    0,  628,  628,  627,  627,  627,
      627,  627,  627,  627,  627,    0,  629,  630,  631,    0,
      629,  630,  631,  632,  629,  630,  631,  632,    0,  635,
        0,  632,    0,  635,  635,  631,    0,  635,    0,    0,
        0,    0,    0,    0,  629,  630,  631,  627,  629,  630,
      631,  632,  629,  630,  631,  632,  634,  635,    0,  632,
      634,  635,  635,  631,  634,  635,    0,  636,  637,  638,
        0,  636,  637,  638,  634,  636,  637,  638,  639,    0,
        0,  639,  639,  643,  634,  644,  639,  643,  634,  644,

      641,  643,  634,  644,  641,  636,  637,  638,  641,  636,
      637,  638,  634,  636,  637,  638,  639,  641,  642,  639,
      639,  643,  642,  644,  639,  643,  642,  644,  641,  643,
      645,  644,  641,    0,  645,  646,  641,  642,  645,  646,
      647,    0,    0,  646,  647,  641,  642,    0,  647,    0,
      642,    0,    0,    0,  642,    0,  648,    0,  645,  647,
      648,    0,  645,  646,  648,  642,  645,  646,  647,    0,
        0,  646,  647,    0,    0,  648,  647,    0,  650,    0,
        0,  650,  650,    0,  648,    0,    0,  647,  648,    0,
        0,    0,  648,  650,  650,  650,  650,  650,  650,  650,

      650,    0,  651,  648,  652,    0,  651,  653,  652,  655,
      651,  653,  652,  655,    0,  653,  656,  655,  652,  657,
      656,  658,    0,  657,  656,  658,    0,  657,    0,  658,
      651,    0,  652,  650,  651,  653,  652,  655,  651,  653,
      652,  655,    0,  653,  656,  655,  652,  657,  656,  658,
      659,  657,  656,  658,  659,  657,  659,  658,  659,  661,
      660,  662,  663,  661,  660,  662,  663,  661,  660,  662,
      663,    0,    0,  664,    0,    0,  661,  664,  659,  660,
        0,  664,  659,    0,  659,    0,  659,  661,  660,  662,
      663,  661,  660,  662,  663,  661,  660,  662,  663,    0,

        0,  664,  665,    0,  661,  664,  665,  660,  666,  664,
      665,  667,  666,  677,    0,  667,  666,  677,  668,  667,
      668,  677,  668,  678,  669,    0,  668,  678,  669,    0,
      665,  678,  669,    0,  665,    0,  666,  669,  665,  667,
      666,  677,    0,  667,  666,  677,  668,  667,  668,  677,
      668,  678,  669,  670,  668,  678,  669,  670,  670,  678,
      669,  670,  674,    0,  674,  669,  674,  675,    0,  676,
      674,  675,    0,  676,  675,  675,  676,  676,    0,  680,
      685,  670,    0,  680,  685,  670,  670,  680,  685,  670,
      674,    0,  674,    0,  674,  675,    0,  676,  674,  675,

        0,  676,  675,  675,  676,  676,  679,  680,  685,  681,
      679,  680,  685,  681,  679,  680,  685,  681,    0,  687,
      686,    0,    0,  687,  686,  679,  681,  687,  686,    0,
        0,    0,  688,    0,  679,    0,  688,  681,  679,  686,
      688,  681,  679,    0,    0,  681,    0,  687,  686,    0,
        0,  687,  686,  679,  681,  687,  686,  689,  690,    0,
      688,  689,  690,    0,  688,  689,  690,  686,  688,  691,
      692,  693,  694,  691,  692,  693,  694,  691,  692,  693,
      694,    0,  692,    0,    0,  689,  690,    0,    0,  689,
      690,    0,    0,  689,  690,    0,    0,  691,  692,  693,

      694,  691,  692,  693,  694,  691,  692,  693,  694,    0,
      692,  696,  696,  696,  698,  698,  699,  699,  699,  700,
      700,  701,  701,  702,  702,  703,  703,  704,  704,  705,
      705,  705,  706,  706,  706,  707,  707,  708,  708,  709,
      709,  709,  710,  710,  711,  711,  712,  712,  713,  713,
      714,  714,  715,  715,  716,  716,  716,  717,  717,  717,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[228] =
    {   0,
1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "DARIC.l"
#line 6 "DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <sstream>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
extern std::list<std::string> error_list;
extern int status;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 2000 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"
#line 2001 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 54 "DARIC.l"


#line 2221 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 696 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5661 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 56 "DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 57 "DARIC.l"
/* skip comments */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 58 "DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 59 "DARIC.l"
return NL;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "DARIC.l"
return COLON;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "DARIC.l"
return INTEGERDIVIDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "DARIC.l"
return TILDE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "DARIC.l"
return TICK;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "DARIC.l"
return E;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "DARIC.l"
return SEMICOLON;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "DARIC.l"
return LE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 67 "DARIC.l"
return GE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "DARIC.l"
return SHL_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "DARIC.l"
return SHR_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "DARIC.l"
return PLUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "DARIC.l"
return MINUS_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "DARIC.l"
return NE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "DARIC.l"
return SHL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "DARIC.l"
return SHR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "DARIC.l"
return PLUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "DARIC.l"
return MINUS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "DARIC.l"
return MULTIPLY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "DARIC.l"
return DIVIDE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "DARIC.l"
return LT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "DARIC.l"
return GT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "DARIC.l"
return BANKED;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "DARIC.l"
return BGET;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "DARIC.l"
return BPUT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "DARIC.l"
return CASE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "DARIC.l"
return CHAIN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "DARIC.l"
return CLOSE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "DARIC.l"
return DATA;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "DARIC.l"
return DIM;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "DARIC.l"
return ELSE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "DARIC.l"
return END;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "DARIC.l"
return ENDCASE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "DARIC.l"
return ENDIF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "DARIC.l"
return ENDFN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "DARIC.l"
return ENDFN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "DARIC.l"
return ENDPROC;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "DARIC.l"
return ENDTYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "DARIC.l"
return ENDWHILE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "DARIC.l"
return EOFH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "DARIC.l"
return EXPECT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "DARIC.l"
return FIELD;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "DARIC.l"
return FOR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "DARIC.l"
return GET;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "DARIC.l"
return GETS;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "DARIC.l"
return GETSH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "DARIC.l"
return GOSUB;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "DARIC.l"
return GOTO;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "DARIC.l"
return INKEY;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "DARIC.l"
return INKEYS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "DARIC.l"
return INPUT_;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "DARIC.l"
return IF;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "DARIC.l"
return IN_;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "DARIC.l"
return LISTFILES;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "DARIC.l"
return LOCAL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "DARIC.l"
return MOUSE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "DARIC.l"
return NEXT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "DARIC.l"
return OF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "DARIC.l"
return OPENIN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "DARIC.l"
return OPENOUT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "DARIC.l"
return OPENUP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "DARIC.l"
return OTHERWISE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "DARIC.l"
return PRINT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "DARIC.l"
return PTR;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "DARIC.l"
return READ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "DARIC.l"
return REPEAT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "DARIC.l"
return RESTORE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "DARIC.l"
return RND;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "DARIC.l"
return RND0;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "DARIC.l"
return RND1;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "DARIC.l"
return OSCLI;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "DARIC.l"
return RETURN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "DARIC.l"
return SPC;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "DARIC.l"
return STEP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "DARIC.l"
return SWAP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "DARIC.l"
return THEN;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "DARIC.l"
return TO;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "DARIC.l"
return TIME;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "DARIC.l"
return TIMES;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "DARIC.l"
return TRACEON;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "DARIC.l"
return TRACEOFF;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "DARIC.l"
return TYPE_;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "DARIC.l"
return UNTIL;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "DARIC.l"
return WHEN;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 152 "DARIC.l"
return WHILE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "DARIC.l"
return ASC;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "DARIC.l"
return CHRS;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "DARIC.l"
return INSTR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "DARIC.l"
return LEFTS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "DARIC.l"
return MIDS;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "DARIC.l"
return RIGHTS;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "DARIC.l"
return LEN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "DARIC.l"
return STRS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "DARIC.l"
return STRINGS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "DARIC.l"
return AND;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "DARIC.l"
return OR;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "DARIC.l"
return EOR;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "DARIC.l"
return NOT; 
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "DARIC.l"
return FLOAT_;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "DARIC.l"
return INT_;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "DARIC.l"
return ACS;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "DARIC.l"
return DIV;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "DARIC.l"
return MOD;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "DARIC.l"
return SQR; 
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "DARIC.l"
return LN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "DARIC.l"
return LOG;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "DARIC.l"
return EXP;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "DARIC.l"
return ATN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "DARIC.l"
return TAN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "DARIC.l"
return COS;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "DARIC.l"
return SIN; 
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "DARIC.l"
return ASN; 
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "DARIC.l"
return ABS; 
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "DARIC.l"
return DEG; 
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "DARIC.l"
return RAD; 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "DARIC.l"
return SGN; 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "DARIC.l"
return PI; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 189 "DARIC.l"
return VAL; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 191 "DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 192 "DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "DARIC.l"
return CIRCLE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "DARIC.l"
return CLS;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "DARIC.l"
return CLIPON;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "DARIC.l"
return CLIPOFF;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "DARIC.l"
return COLOUR;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "DARIC.l"
return COLOURBG;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "DARIC.l"
return FILL;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "DARIC.l"
return FLIP;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "DARIC.l"
return SHOWFPS;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "DARIC.l"
return GRAPHICS;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "DARIC.l"
return LINE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "DARIC.l"
return RECTANGLE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "DARIC.l"
return PLOT;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "DARIC.l"
return POINT_;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "DARIC.l"
return SHADED;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "DARIC.l"
return TEXT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 211 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 213 "DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "DARIC.l"
return CREATEFONT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 215 "DARIC.l"
return MONO15;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "DARIC.l"
return MONO20;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "DARIC.l"
return MONO25;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "DARIC.l"
return MONO30;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 219 "DARIC.l"
return MONO35;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 220 "DARIC.l"
return MONO40;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 221 "DARIC.l"
return MONO50;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 222 "DARIC.l"
return MONO75;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "DARIC.l"
return MONO100;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 224 "DARIC.l"
return PROP15;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "DARIC.l"
return PROP20;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "DARIC.l"
return PROP25;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "DARIC.l"
return PROP30;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "DARIC.l"
return PROP35;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "DARIC.l"
return PROP40;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "DARIC.l"
return PROP50;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "DARIC.l"
return PROP75;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 232 "DARIC.l"
return PROP100;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "DARIC.l"
return SERIF15;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "DARIC.l"
return SERIF20;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "DARIC.l"
return SERIF25;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "DARIC.l"
return SERIF30;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "DARIC.l"
return SERIF35;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "DARIC.l"
return SERIF40;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "DARIC.l"
return SERIF50;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "DARIC.l"
return SERIF75;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 241 "DARIC.l"
return SERIF100;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "DARIC.l"
return TRIANGLE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 244 "DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 245 "DARIC.l"
return RED;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 246 "DARIC.l"
return GREEN;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 247 "DARIC.l"
return YELLOW;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 248 "DARIC.l"
return BLUE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "DARIC.l"
return MAGENTA;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 250 "DARIC.l"
return CYAN;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "DARIC.l"
return WHITE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 252 "DARIC.l"
return BLACK;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "DARIC.l"
return LASTPOS;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 255 "DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 256 "DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 257 "DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 258 "DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 259 "DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 260 "DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 261 "DARIC.l"
return TRANSLATE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 262 "DARIC.l"
return ROTATE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 263 "DARIC.l"
return SCALE; 
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "DARIC.l"
return SOLID; 
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 266 "DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 268 "DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
#ifdef WINDOWS
                        s += ".daric";
#endif

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            // Test exists
                            FILE *f = fopen(s.c_str(), "r");
                            if (!f) {
                                std::stringstream stream;   
                                stream << "Include file '" << s << "' not found";
                                error_list.push_back(stream.str());
                                status = 0;
                            } else {
                                yyin = fopen(s.c_str(), "r");
                                yyfileno++;
                                files_index.insert(std::pair<std::string, int>(s, yyfileno));
                                strcpy(yytext, s.c_str());
                                included_files.insert(std::move(s));
                                file_stack.push(std::move(file));
                                file = yytext;
                                yylineno_stack.push(yylineno);
                                yylineno = 0;
                                yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                                BEGIN(INITIAL);
                            }
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 308 "DARIC.l"
{
                        static int once = 0; 
                        if (once = !once)
                            return NL;
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 323 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 324 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 325 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 326 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 327 "DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 328 "DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 329 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFPROC; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 330 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_INTEGER; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 331 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_STRING; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 332 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_REAL; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 333 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_STRING; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 334 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_INTEGER; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 335 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_REAL; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 336 "DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 337 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 338 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 339 "DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 340 "DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 221:
#line 343 "DARIC.l"
case 222:
#line 344 "DARIC.l"
case 223:
#line 345 "DARIC.l"
case 224:
#line 346 "DARIC.l"
case 225:
YY_RULE_SETUP
#line 346 "DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 348 "DARIC.l"
/* do nothing */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 350 "DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3474 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 696 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 696 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 695);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 350 "DARIC.l"

