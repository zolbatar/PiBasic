#line 1 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#line 3 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 226
#define YY_END_OF_BUFFER 227
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[695] =
    {   0,
        4,    4,  227,  225,    3,    4,  225,  224,  205,  204,
        7,  220,  221,   24,   22,  222,   23,  206,   25,  203,
        4,    9,   26,    8,   27,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,    4,    6,    3,  202,
        3,    4,    0,  207,    0,  205,  204,   16,   14,   15,
      206,    0,    5,   17,  206,  203,   20,   10,   19,   11,
       21,  218,  217,  216,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,   60,
       61,  219,  219,  219,  113,  219,  219,  219,  219,  219,
      219,  219,   66,  219,  104,  219,  219,  125,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,   85,  219,  219,  219,  219,  219,  219,  219,  219,
        3,  202,    0,  202,    0,  207,    0,    0,  206,   18,
       12,   13,  121,  109,  103,   94,  120,  116,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      130,  219,  118,  219,  219,  219,  219,  122,  219,   36,

      110,  219,   38,  219,  105,  115,  219,  219,  219,  219,
      219,  219,  214,   49,   50,  219,  219,  219,  219,  219,
      219,  219,  219,  108,  219,  219,  100,   59,  219,  219,
      219,  219,  114,  219,  219,  111,  219,  219,  219,  106,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  123,
      219,  219,  180,  219,  219,  219,  219,  219,  219,   76,
      219,  219,  219,  219,  124,  219,  219,  119,  219,   81,
      112,  219,  219,  219,  117,  219,  219,  219,  219,  219,
      219,  219,  219,  126,  219,  219,  219,  219,  219,    0,
      219,  219,  219,  183,  219,  219,   32,  219,   95,  219,

      219,  219,  219,  219,  185,   35,  219,  219,  219,   37,
      219,  219,  219,  219,  219,  219,   46,  219,  191,  219,
      219,  135,  136,  219,  212,  213,  214,  214,   51,  219,
      219,   55,  219,  219,  219,  219,  219,  219,  219,  139,
      219,  219,  219,  219,   98,  219,  219,   65,  219,  219,
      219,  219,  141,  219,  219,  219,  219,   72,   73,  219,
        0,    1,  218,  217,  216,  219,  219,  219,  219,  219,
      219,  219,    0,  219,  219,  219,  219,  219,  219,  219,
      219,   82,  101,  219,   83,  144,   84,   86,  219,  219,
      219,  128,   90,  219,  219,   92,  219,  219,  219,  219,

        0,  219,   29,  187,   30,  219,   33,  219,  219,  219,
      219,  219,  219,  219,  219,  219,   42,  219,   40,  219,
      219,  219,  219,  127,   48,  219,  107,   52,  219,   54,
      219,  181,   56,   58,  219,   96,  219,   97,  219,  219,
       63,  219,  219,  219,  219,  219,  219,  219,   64,  219,
      219,  219,  219,   79,  219,  142,   71,  215,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
        0,    0,  219,  197,  219,  219,  219,  192,  219,  198,
      219,  219,  219,   87,  219,  219,  219,   91,  219,   93,
      186,  219,  219,    0,   28,  219,  129,  219,  131,   34,

      133,  219,  211,  219,  219,  219,  219,  219,  219,  219,
       47,  219,   53,  219,   57,  219,  219,  219,  219,  219,
      219,  150,  151,  152,  153,  154,  155,  156,  157,  194,
       67,  219,   69,  219,  215,  215,  219,  159,  160,  161,
      162,  163,  164,  165,  166,  219,  193,   74,  219,   80,
       99,   77,   78,  196,  219,  219,  219,  219,  219,  219,
      219,  143,  219,  219,  219,  219,  219,  219,  219,  190,
      219,  182,    0,    2,  219,  132,  219,  219,  210,  209,
      211,  211,  219,  219,   39,  219,   43,   44,  219,  219,
      219,  219,  188,  219,  219,  184,  158,   68,  219,  167,

      219,   75,  219,  219,  219,  168,  169,  170,  171,  172,
      173,  174,  175,  137,  102,  219,  219,  219,   88,  219,
      219,  219,  219,  134,  219,  208,  219,  219,   45,  219,
      138,    0,  219,  219,  219,  219,  219,  219,  176,  219,
      219,   89,  219,  177,  219,  219,  219,  208,  208,  219,
      219,  219,    0,   62,  219,   70,  140,  219,  219,  219,
      219,  145,  195,  199,   31,  149,  219,  219,  219,    0,
      201,    0,  219,  219,  219,  147,  146,  219,   41,  219,
        0,  201,    0,  219,  219,  178,  189,  219,  148,  179,
      219,  219,  200,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   25,   25,   27,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   58,    1,    1,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   57,    1,   85,    1,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    2,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    2,    3,
        3,    3,    3,    3,    3,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[717] =
    {   0,
        0,   85,  316, 5680,  309,   85,   84, 5680,   71,    0,
     5680, 5680, 5680,  268,  267, 5680,  262,   77,   96,   98,
       89, 5680,   64, 5680,   97,  171,  247,  293,  346,  392,
       93,  171,  108,  244,  255,  298,  305,  444,  492,  394,
      540,  591,  410,  351,  450,  365,  127, 5680,  161,  239,
      286,  128,  130, 5680,  140,  130,    0, 5680, 5680, 5680,
      525,  657,  256, 5680,  665,  683,  253, 5680, 5680, 5680,
      245, 5680, 5680, 5680,  202,  466,  561,  588,  678,  683,
      545,  680,  690,  723,  725,  728,  730,  746,  775,  780,
      806,  777,  793,  827,  843,  832,  862,  883,  884,  895,

      922,  928,  937,  996,  833,  974,  997,  996,  999, 1008,
     1045, 1030, 1046, 1067, 1086, 1096, 1101, 1112, 1138, 1145,
     1152, 1155, 1157, 1190, 1197, 1200, 1203, 1209, 1240, 1215,
     1242, 1249, 1255, 1295, 1296, 1312, 1345, 1346, 1351, 1352,
     1358, 1395, 1398, 1410, 1407, 1441, 1397, 1447, 1453, 1459,
     1462, 1464, 1493, 1499, 1511, 1512, 1528, 1518, 1549, 1559,
     1612, 1620,  150, 1645,  142,  160,  166,  673, 1629, 5680,
     5680, 5680, 1561, 1640, 1641, 1642, 1643, 1652, 1653, 1682,
     1692, 1695, 1698, 1704, 1705, 1707, 1744, 1747, 1738, 1750,
     1756, 1757, 1759, 1790, 1797, 1800, 1809, 1803, 1812, 1815,

     1846, 1849, 1886, 1889, 1864, 1867, 1879, 1902, 1924, 1939,
     1949, 1923, 2007, 1937, 2005, 2003, 2008, 2010, 2015, 2017,
     2055, 2057, 2060, 2062, 2067, 2100, 2074, 2109, 2112, 2123,
     2118, 2125, 2130, 2135, 2177, 2156, 2165, 2168, 2183, 2190,
     2195, 2208, 2224, 2225, 2239, 2237, 2238, 2280, 2281, 2264,
     2290, 2283, 2297, 2365, 2420, 2421, 2422, 2427, 2432, 2466,
     2472, 2473, 2478, 2479, 2485, 2488, 2518, 2525, 2528, 2530,
     2535, 2537, 2574, 2575, 2577, 2589, 2587, 2584, 2622, 2629,
     2634, 2639, 2640, 2641, 2674, 2651, 2680, 2681, 2686,   96,
     2696, 2729, 2726, 2707, 2766, 2741, 2744, 2755, 5680, 2767,

     2793, 2781, 2784, 2811, 2782, 2823, 2833, 2836, 2848, 2834,
     2871, 2878, 2885, 2888, 2904, 2923, 5680, 2935, 2934, 2941,
     2944, 2946, 2953, 2960, 5680, 5680,  221, 3011,  247, 3008,
     3013, 3011, 3018, 3020, 3027, 3058, 3064, 3065, 3095, 3074,
     3083, 3113, 3114, 3120, 5680, 3174, 3139, 3151, 3184, 3177,
     3172, 3190, 3195, 3224, 3229, 3291, 3298, 5680, 3236, 3241,
      233,  216,  205,  199,  198, 3366,    0, 3291, 3293, 3366,
     3367, 3368,  139, 3369, 3296, 3378, 3385, 3422, 3423, 3424,
     3433, 3434, 5680, 3435, 3445, 3478, 3475, 3493, 3484, 3509,
     3518, 3496, 3530, 3536, 3535, 3548, 3549, 3561, 3574, 3586,

       90, 3588, 5680, 3595, 5680, 3617, 3601, 3626, 3635, 3638,
     3647, 3657, 3712, 3682, 3708, 3709, 3715, 3721, 3722, 3738,
     3756, 3759, 3775, 3761, 3768, 3778, 3808, 5680, 3813, 3815,
     3825, 3826, 3827, 3838, 3856, 3865, 3868, 5680, 3871, 3881,
     3883, 3908,  492,  551,  638,  295,  591,  339, 3886, 3920,
     3921, 3938, 3960, 3937, 3972, 3977, 3979, 4042, 1596, 3283,
     4051,  765,  843,  392, 4012, 4042, 4047, 4054, 4052, 4064,
      177,  165, 4073, 4098, 4103, 4129, 4124, 4138, 4143, 4141,
     4172, 4159, 4181, 5680, 4184, 4199, 4215, 4197, 4214, 4224,
     4236, 4253, 4254,  170, 4255, 4280, 4267, 4269, 4292, 5680,

     4306, 4313, 4364, 4360, 4361, 4366, 4376, 4377, 4410, 4411,
     4416, 4423, 4421, 4426, 5680, 4460, 4461, 4466, 4472, 4478,
      968,  230,  239,  270,  348,  367,  400,  437,  465, 4509,
     4512, 4519, 4518, 4521,  529, 4584, 1005,  560,  628,  646,
      656,  727,  729,  793,  814, 4561, 4580, 4582, 4592, 4594,
     5680, 5680, 5680, 4599, 4625, 4662, 4664, 4687, 1441, 1883,
      921, 4644, 4665, 4691, 4677, 4678, 4716, 4694, 4728, 4733,
     4734, 4743,  148,  143, 4746, 4755, 4780, 4781, 5680, 5680,
      824, 4843, 4852, 4793, 4768, 4848, 4849, 4850, 4855, 4860,
     4889, 4901, 4890, 4900, 4902, 4911,  930, 4912, 4923,  987,

     4942, 4952, 4954, 4957, 2015, 1019, 1200, 1289, 1317, 1346,
     1395, 1533, 1562, 4963, 5680, 4964, 4994, 5004, 5006, 5016,
     5013, 5015, 5046, 5053, 5056, 5118, 5067, 5114, 5115, 5116,
     5121,  221, 5154, 5127, 5165, 5166, 5167, 5176, 1603, 5188,
     5206, 5181, 5183, 5218, 5223, 5228, 5244, 1652, 5294, 5290,
     5292, 5295,  235, 5297, 5304, 5307, 5309, 5338, 5348, 5347,
     5349, 5350, 5361, 5390, 5396, 5399, 5406, 5412, 5441,  247,
     5680,  345, 5450, 5455, 5457, 5401, 5411, 5494, 5467, 5497,
      252,  277,  385, 5468, 5508, 5507, 5520, 5545, 5546, 5557,
     5558, 5559, 5560, 5680, 5630,  134, 5632, 5635, 5637, 5639,

     5641, 5643, 5645, 5648, 5651, 5653, 5655, 5658, 5660, 5662,
     5664, 5666, 5668, 5670, 5673, 5676
    } ;

static const flex_int16_t yy_def[717] =
    {   0,
      694,    1,  694,  694,  694,  694,  695,  694,  694,  696,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  697,  697,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  694,  694,  694,  694,
      694,  694,  695,  694,  698,  694,  696,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  699,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,  700,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  111,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      694,  694,  694,  694,  695,  695,  698,  694,  694,  694,
      694,  694,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  701,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  694,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  694,
       29,   29,   29,   29,   29,   29,   29,   29,  694,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  694,   29,   29,   29,
       29,   29,   29,   29,  694,  694,  702,  701,  694,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  694,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  703,   29,  694,   29,   29,
      704,  694,  704,  704,  704,  705,  254,   29,   29,   29,
       29,   29,  694,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  694,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

      694,   29,  694,   29,  694,   29,   29,   29,   29,   29,
       29,   29,  706,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  694,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  694,   29,   29,
       29,   29,  699,  699,  699,  699,  699,  699,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  707,  699,  699,
      699,  699,  699,  699,   29,   29,   29,   29,   29,   29,
      694,  694,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  694,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  708,   29,   29,   29,   29,   29,  694,

       29,   29,  709,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  694,   29,   29,   29,   29,   29,
      699,  699,  699,  699,  699,  699,  699,  699,  699,   29,
       29,   29,   29,   29,  710,  707,  699,  699,  699,  699,
      699,  699,  699,  699,  699,   29,   29,   29,   29,   29,
      694,  694,  694,   29,   29,  699,  699,  699,  699,  699,
      699,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  708,  694,   29,   29,   29,   29,  694,  694,
      711,  709,  712,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  699,   29,   29,  699,

       29,   29,   29,   29,  699,  699,  699,  699,  699,  699,
      699,  699,  699,   29,  694,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  713,   29,   29,   29,   29,
       29,  694,   29,   29,   29,   29,   29,   29,  699,   29,
       29,   29,   29,   29,   29,   29,   29,  714,  713,   29,
       29,   29,  715,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  715,
      694,  716,   29,   29,   29,   29,   29,   29,   29,   29,
      715,  715,  716,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,    0,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694
    } ;

static const flex_int16_t yy_nxt[5767] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       33,   33,   35,   36,   37,   38,   39,   33,   40,   41,
       42,   43,   44,   45,   33,   46,   33,    4,    4,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   33,   33,
       35,   36,   37,   38,   39,   33,   40,   41,   42,   43,
       44,   45,   33,   46,   47,   48,   49,   52,   54,   56,
       56,   52,   67,   68,   69,   61,   61,   61,   61,   61,

       61,   61,   61,   50,   50,   50,   50,   50,   50,   50,
       50,   52,   62,   63,   65,   52,   66,   66,   66,   66,
       66,   66,   66,   66,  101,   64,   70,   71,   76,   52,
       52,  401,  102,  494,   54,  103,   57,  104,  105,   76,
       62,   55,   53,   76,  166,  574,   54,   76,   56,   56,
      574,  163,  101,   52,   52,   56,   76,  471,  472,  401,
      102,  494,  161,  103,   54,  104,  105,   76,   53,   52,
      166,   76,  574,   52,   72,   76,  553,   73,   74,  162,
      162,  162,  162,  162,  162,  162,  162,   55,  552,   75,
       75,   75,   75,   75,   75,   75,   75,  167,  290,   55,

      362,  362,   76,   77,   78,   72,  106,  362,   73,   74,
       76,   52,   52,  107,   56,   79,  108,   55,  362,  109,
       80,   81,  632,  167,   72,  653,  290,  325,  326,   75,
       76,   77,   78,   72,  106,  362,   73,   74,   76,  671,
      163,  107,   72,   79,  108,   73,   74,  109,   80,   81,
       72,  671,  428,   73,   74,   65,  671,  164,  164,  164,
      164,  164,  164,  164,  164,   75,   75,   75,   75,   75,
       75,   75,   75,   72,  172,   76,   73,   74,   82,   76,
      110,  671,  171,   76,   83,  170,  112,   51,  111,   84,
      113,   60,  672,   85,  114,   86,   59,   58,   72,  115,

      116,   73,   74,   76,  672,   75,   82,   76,  110,  672,
       51,   76,   83,  527,  112,  694,  111,   84,  113,  694,
      694,   85,  114,   86,   87,  694,  694,  115,  116,  117,
       76,   88,   89,   76,  672,   90,   76,  118,   91,   76,
      120,   92,   72,  119,   76,   73,   74,  670,   93,  682,
      121,   72,   87,  694,   73,   74,  694,  117,   76,   88,
       89,   76,  529,   90,   76,  118,   91,   76,  120,   92,
       72,  119,   76,   73,   74,  694,   93,   94,  121,  694,
      694,   95,  156,   76,  694,   96,  157,  670,   76,  682,
       76,  694,   76,  694,   76,   72,   76,  694,   73,   74,

      160,  694,  683,   72,   76,   94,   73,   74,  694,   95,
      156,   76,  694,   96,  157,  545,   76,  694,   76,  694,
       76,  694,   76,   76,   76,  133,  694,   76,  160,  134,
      694,   76,   76,  135,   97,  694,   98,   99,  136,  137,
       72,   76,  683,   73,   74,   76,  100,  694,  694,   76,
      694,   76,  694,  133,  155,   76,  694,  134,  694,   76,
      694,  135,   97,  694,   98,   99,  136,  137,   72,   76,
      694,   73,   74,   76,  100,   76,  122,   76,  694,   76,
      123,   76,  155,   76,  694,   76,  694,  694,  158,  159,
      124,  694,  125,  126,  127,   72,  694,   76,   73,   74,

      694,   76,  694,   76,  122,   76,  694,   76,  123,   76,
      521,   76,  694,   76,  694,  522,  158,  159,  124,  694,
      125,  126,  127,   76,  694,   76,  694,   76,  694,   76,
      694,  128,   72,   76,  129,   73,   74,  130,  694,  694,
      131,  694,  132,   61,   61,   61,   61,   61,   61,   61,
       61,   76,  694,  694,   72,   76,  694,   73,   74,  128,
       62,  694,  129,   72,  694,  130,   73,   74,  131,  523,
      132,   76,  694,  138,  524,  139,   76,  140,  141,  142,
       76,  694,  694,  694,   76,  143,  144,  145,   62,  178,
      146,  694,   76,  147,   72,  694,   76,   73,   74,   76,

       76,  138,  694,  139,   76,  140,  141,  142,   76,  528,
      173,  694,   76,  143,  144,  145,  694,  178,  146,   76,
       76,  147,  148,   76,   76,  694,  149,   76,   76,  150,
      151,   72,  694,  694,   73,   74,  152,  174,  173,  153,
      694,   72,  694,  694,   73,   74,  154,   76,  694,   72,
      148,   76,   73,   74,  149,   76,  525,  150,  151,   72,
      694,  526,   73,   74,  152,  174,  694,  153,  694,  694,
      168,  694,  168,  694,  154,  169,  169,  169,  169,  169,
      169,  169,  169,   61,   61,   61,   61,   61,   61,   61,
       61,  169,  169,  169,  169,  169,  169,  169,  169,   65,

       62,   66,   66,   66,   66,   66,   66,   66,   66,   76,
      694,   76,  175,   76,   76,   76,  176,   76,   76,   76,
      694,   76,   76,  694,  179,  180,  694,  177,   62,   76,
       72,  694,   72,   73,   74,   73,   74,   76,  694,   76,
      175,   76,   76,   76,  176,   76,   76,   76,  694,   76,
       76,  694,  179,  180,  181,  177,   76,   76,   76,   76,
       76,   76,   76,  184,   76,   76,  694,   76,   72,   76,
      694,   73,   74,  694,  182,  694,  183,  186,  694,  185,
      694,   76,  181,  543,   76,   76,   76,   76,   76,   76,
       76,  184,   76,   76,  187,   76,   72,   76,  694,   73,

       74,  694,  182,  694,  183,  186,   76,  185,   76,   76,
       76,   76,  194,   76,   76,   76,   76,   72,  694,  189,
       73,   74,  187,  188,  195,  190,  694,   72,   76,  191,
      579,  580,   76,  694,   76,  694,   76,   76,   76,   76,
      194,   76,   76,   76,   76,   76,   72,  189,  192,   73,
       74,  188,  195,  190,  694,  193,   76,  191,   76,  694,
       76,  544,   76,   76,   76,   76,   76,   76,   76,   76,
      694,   76,   76,   76,   76,  200,  192,  196,   76,  197,
      198,  214,   76,  193,  201,  199,   76,  694,  694,  694,
       76,   76,   76,   76,   76,   76,   76,   76,  694,   76,

       76,   76,   76,  200,  694,  196,   76,  197,  198,  214,
       76,  202,  201,  199,   76,   76,  694,  203,   76,   76,
      204,   76,   76,   76,   72,   76,   76,   73,   74,   76,
       76,  694,  205,   72,   76,  694,   73,   74,  694,  202,
      694,  206,   76,   76,  613,  203,   76,   76,  204,  694,
       76,   76,  694,   76,   76,  207,  694,   76,   76,   76,
      205,   76,   76,  209,  208,  694,  694,   76,   76,  206,
      210,   72,   76,  694,   73,   74,  211,  694,  694,  694,
      694,   76,  212,  207,  694,   76,  597,   76,  694,   76,
       72,  209,  208,   73,   74,   76,   76,  694,  210,   72,

       76,  694,   73,   74,  211,   76,  694,  694,   72,   76,
      212,   73,   74,   76,   75,   75,   75,   75,   75,   75,
       75,   75,   72,  600,  215,   73,   74,   76,   76,  694,
      219,   76,   76,   76,  220,   76,   76,   76,   76,   76,
      694,   76,  216,   76,  694,  217,  218,   76,  694,  694,
      694,  694,  215,  694,   75,   76,   76,  694,  219,   76,
       76,   76,  220,   76,   76,   76,   76,   76,  694,   76,
      216,   76,  694,  217,  218,   76,   76,   76,  694,  225,
       76,   76,  226,  694,   76,   76,  221,  694,  694,   76,
      227,  222,  694,   76,  223,  224,  228,   76,   76,  694,

      694,  694,   76,  694,   76,   76,   76,  225,   76,   76,
      226,  229,   76,   76,  221,  694,  230,   76,  227,  222,
      694,   76,  223,  224,  228,   76,   76,  231,  694,  232,
       76,   76,   76,  233,   76,   76,   76,  694,  234,  229,
       76,  694,  694,   76,  230,   76,  235,   76,  694,   76,
      694,   76,  694,   76,  694,  231,  694,  232,  694,   76,
       76,  233,  694,   76,   76,  694,  234,  694,   76,   76,
      694,   76,  236,   76,  235,   76,   76,   76,  694,   76,
       76,  694,  237,   76,   76,  694,   76,   76,   76,  238,
       76,   76,   76,  694,   76,  241,   76,   76,  694,  239,

      236,   76,  240,   72,   76,   76,   73,   74,   76,  694,
      237,   76,   76,  694,   76,   76,   76,  238,   76,   76,
       76,   76,   76,  241,   76,  242,  694,  239,   76,   76,
      240,   76,   76,  243,   76,   76,   76,  694,   76,   76,
       76,  244,   76,  694,   76,  694,   76,  694,   76,   76,
       76,  694,  694,  242,  246,  694,   76,   76,  694,   76,
       76,  243,   76,   76,   76,  694,   76,   76,   76,  244,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  247,  246,  694,   76,  245,   76,  248,   76,  250,
       76,  694,   72,  694,   76,   73,   74,  249,  694,   76,

      694,   76,  694,   76,  694,   76,  694,   76,   76,  247,
      694,  694,   76,  245,   76,  248,   76,  250,   76,  694,
       72,  694,   76,   73,   74,  249,  251,   76,  252,  253,
      694,   76,  694,  259,  694,   76,   76,  694,  254,  255,
      694,  256,  694,   76,  257,  258,  260,   76,  694,   72,
      694,   76,   73,   74,  251,   76,  252,  253,  694,   76,
      694,  259,  694,   76,   76,  694,  254,  255,  694,  256,
      694,   76,  257,  258,  260,   76,   76,  262,  694,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  694,  266,
       76,   76,  694,   76,  263,  261,  265,   76,   72,  264,

      694,   73,   74,  267,   76,  262,  694,  694,   76,   76,
       76,   76,   76,   76,   76,   76,  694,  266,   76,   76,
      694,   76,  263,  261,  265,   76,   76,  264,  274,   76,
       76,  267,   76,   76,   76,  694,   76,   76,   76,  268,
      269,   76,   76,  270,   72,   76,   76,   73,   74,   76,
      694,  694,  694,  694,   76,  271,  274,   76,   76,  611,
       76,   76,   76,  694,   76,   76,   76,  268,  269,   76,
       76,  270,   76,   76,   76,  694,  272,   76,   76,  694,
       76,  694,   76,  271,   76,  694,   76,  694,   76,  273,
       76,  275,   76,   76,  277,   76,  694,   76,   76,   76,

       76,   76,  694,   76,  272,  278,   76,  276,   76,  694,
       76,  694,   76,  694,   76,  694,   76,  273,   76,  275,
       76,   76,  277,   76,  279,   76,   76,   76,   76,   76,
       76,   76,  280,  278,   76,  276,   72,  694,   76,   73,
       74,  694,   76,   76,  281,  282,   76,   76,  694,   76,
       76,   76,  279,  286,  284,  694,   76,  287,   76,   76,
      280,  283,   76,   76,  694,   72,   76,   76,   73,   74,
       76,   76,  281,  282,   76,   76,  285,   76,   76,   76,
       76,  286,  284,  694,   76,  287,  694,   76,   76,  283,
       76,   76,   76,  694,   76,   76,   76,  288,   76,   72,

       76,  289,   73,   74,  285,  694,   72,  694,   76,   73,
       74,  694,   76,  161,  537,  694,   76,  694,   76,  538,
       76,  163,   76,  694,   76,  288,   76,  694,   76,  289,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  163,  169,  169,  169,
      169,  169,  169,  169,  169,   72,  694,  694,   73,   74,
      694,   65,  694,  164,  164,  164,  164,  164,  164,  164,
      164,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  694,  694,   76,   76,  694,
      694,   76,   76,  694,  291,  694,  694,  694,  694,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  694,   76,   76,   76,  694,   76,
       76,   76,  291,   76,  694,  293,   76,   76,  694,   76,
      294,   76,  292,   76,   76,  296,   76,   76,   76,   76,
      297,   76,   76,   76,   76,   76,  298,  694,  295,   76,
      299,   76,  694,  293,   76,   76,  694,   76,  294,   76,
      292,   76,   76,  296,   76,   76,   76,   76,  297,   76,
       76,   76,   76,   76,  298,   76,  295,   76,   76,   76,
      300,   76,   76,   76,  301,   76,   76,   76,   76,   76,
       76,   76,   76,  694,   76,   76,   76,   76,   76,  302,

      694,   76,  303,   76,  694,   76,   76,   76,  300,   76,
       76,   76,  301,   76,   76,   76,   76,   76,   76,   76,
       76,  304,   76,   76,   76,   76,   76,  302,   76,   76,
      303,  306,   76,  694,   76,   76,   76,  694,   76,   76,
       76,  305,   76,   76,   76,  307,   76,  309,   76,  304,
       76,   76,  694,   76,   76,  308,   76,   76,  694,  306,
       76,  694,   76,   76,   76,  694,   76,   76,   76,  305,
       76,   76,   76,  307,   76,  309,   76,   76,   76,   76,
       76,   76,   76,  308,  310,   76,   72,  694,   76,   73,
       74,  694,  694,  694,  317,   76,  694,  694,   76,   76,

      694,  612,  318,   76,  694,   76,   76,  694,   76,   76,
       76,  694,  310,   76,  319,  694,   76,   76,   76,  311,
       76,   76,  312,   76,   76,  313,   76,   76,   76,  694,
      318,   76,  314,   76,   76,  694,  315,   76,   76,  316,
      694,   76,  319,  694,  694,   76,   76,  311,   76,   76,
      312,  320,   76,  313,  324,   76,   76,  694,   76,   76,
      314,   76,   76,   76,  315,   76,  321,  316,   76,   76,
       76,  694,   76,  694,   76,  694,   76,  694,   76,  320,
       76,  322,  324,   76,   76,  694,   76,   76,   76,  694,
       76,   76,  694,  694,  321,  323,   76,  694,   76,  694,

       76,  694,   76,  694,   76,  694,   76,  694,   76,  322,
       72,  329,   76,  325,  326,  694,   76,  694,   72,  694,
      694,   73,   74,  323,  694,  327,  327,  327,  327,  327,
      327,  327,  327,  639,   76,  330,   76,  694,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  694,  334,  694,   76,  332,   76,  694,  694,  331,
      694,  333,   76,  330,   76,  327,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  694,
      334,  694,   76,  332,   76,  694,   76,  331,   76,  333,
      335,   76,   76,   76,   76,   76,   76,   76,   76,   76,

      694,   76,   76,  694,  694,   76,   76,  694,  336,   76,
      337,  694,  694,   76,   76,  694,   76,  338,  335,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  694,   76,
       76,   76,  694,   76,   76,   76,  336,   76,  337,   76,
       76,   76,  694,   76,   76,  338,  694,  340,   76,   76,
      339,   76,  342,   76,   76,  694,  343,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      344,   76,   76,  341,   76,  340,   76,   76,  339,   76,
      342,   76,   76,  345,  343,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  344,   76,

       76,  341,   76,   76,   76,  694,  694,   76,   76,  694,
      346,  694,   76,  694,   76,   76,   76,  347,   76,   76,
      694,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      349,   76,   76,  348,   76,   76,   76,  694,  346,   76,
       76,  694,   76,   76,   76,  347,   76,   76,  694,   76,
       76,  694,  350,   76,   76,   76,   76,   76,  349,   76,
      352,  348,   76,   76,   76,  694,  351,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  694,
      350,  354,  355,   76,   76,  694,  358,   76,  352,  353,
      694,   76,   76,  694,  351,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,  694,  694,  354,
      355,   76,   76,  356,   76,   76,   76,  353,   76,   76,
       76,   76,   76,   76,  359,   76,  357,   76,   76,   76,
      694,   76,   76,  360,  694,  694,   76,  694,  694,   76,
       76,  356,   76,   76,   76,  694,   76,   76,   76,   76,
       76,  694,  359,   76,  357,  694,   76,   76,  694,  694,
       76,  360,  694,  694,   76,  361,  361,  362,  363,  361,
      361,  364,  365,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  366,  366,  366,  366,  366,  366,  366,
      366,  361,  361,  361,  361,  361,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  361,  366,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  361,
      361,   76,   76,   76,  368,   76,  369,   76,   76,   76,
       76,   76,   76,   76,  694,  694,   76,   76,  694,  694,
      372,   76,  370,  694,  694,  694,  373,  694,  371,   76,
       76,   76,  368,   76,  369,   76,   76,   76,   76,   76,
       76,   76,  694,  694,   76,   76,  694,   76,  372,   76,

      370,   76,  694,  374,   76,   76,  371,   76,   76,   76,
       76,   76,   76,  376,   76,  375,   76,   76,  377,   76,
       76,  694,  378,   76,   76,   76,  694,   76,  694,   76,
      694,  374,   76,   76,  379,   76,   76,   76,   76,   76,
       76,  376,   76,  375,   76,   76,  377,   76,   76,   76,
      378,   76,   76,   76,  694,   76,   76,   76,  694,   76,
       76,   76,  379,   76,   76,   76,   76,  381,   76,   76,
       76,  380,   76,  694,   76,  694,   76,   76,  694,  694,
      383,   76,  694,  382,   76,   76,  694,   76,   76,   76,
      694,   76,   76,   76,   76,  381,   76,   76,   76,  380,

       76,  694,   76,  694,   76,   76,   76,  694,   76,   76,
       76,  382,   76,  384,   76,   76,   76,  694,   76,  388,
       76,  385,   76,   76,   76,  694,   76,  694,   76,  694,
      694,  387,  694,   76,   76,  694,   76,   76,   76,  386,
       76,  384,   76,   76,   76,  694,   76,  388,   76,  385,
       76,   76,   76,   76,   76,  389,   76,   76,  694,  387,
      391,   76,  694,  694,   76,   76,  390,  386,   76,  392,
       76,   76,   76,   76,  393,   76,   76,  694,   76,  394,
       76,   76,   76,  389,  694,   76,   76,  694,  391,   76,
       76,  694,   76,   76,  390,  396,   76,  392,   76,   76,

       76,   76,  393,   76,   76,   76,   76,  394,   76,   76,
       76,   76,   76,   76,   76,   76,  399,   76,   76,   76,
       76,   76,  397,  396,  395,   76,  694,   76,  400,  694,
      398,  402,  694,   76,  403,   76,  694,   76,   76,   76,
       76,   76,   76,   76,  399,   76,   76,   76,   76,   76,
      397,  694,  395,   76,  694,   76,  400,   76,  398,  402,
       76,   76,  694,   76,   76,   76,   76,  404,   76,  694,
       76,  405,   76,  694,   76,   76,   76,  694,  694,   76,
       76,  694,  406,   76,  694,   76,   76,  694,   76,   76,
       76,  694,   76,   76,   76,  404,   76,   76,   76,  407,

       76,   76,   76,   76,   76,   76,   76,   76,   76,  408,
      406,   76,   76,   76,   76,   76,  410,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  407,   76,   76,
       76,  694,   76,   76,   76,  411,  694,  408,  409,  694,
       76,   76,   76,   76,  410,   76,   76,   76,   76,   76,
       76,   76,   76,  694,   76,  694,   76,  694,   76,  694,
       76,  412,   76,  411,   76,   76,  409,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  694,  413,   76,   76,
      694,  694,   76,   76,  414,  694,   76,   76,  694,  412,
       76,  694,   76,   76,  694,   76,   76,   76,  415,   76,

       76,   76,  416,   76,  694,  413,   76,   76,  694,   76,
       76,   76,  414,   76,  694,   76,   76,   76,  694,   76,
       76,  419,  417,   76,   76,  694,  415,   76,  694,  418,
      416,  694,  694,  694,   76,   76,  420,   76,   76,   76,
      694,   76,  694,   76,   76,   76,  694,   76,   76,  419,
      417,   76,   76,  694,   76,   76,  694,  418,   76,  421,
      694,  422,   76,   76,  420,   76,   76,   76,  423,   76,
       76,   76,   76,   76,   76,   76,  424,   76,  425,   76,
       76,  426,   76,   76,   76,   76,   76,  421,   76,  422,
       76,   76,   76,   76,   76,   76,  423,   76,   76,   76,

       76,   76,   76,   76,  424,   76,  425,   76,   76,  426,
      427,   76,   76,   76,   72,  694,   76,  325,  326,   76,
       76,  694,  694,   76,  694,  694,  694,   76,  694,  327,
      327,  327,  327,  327,  327,  327,  327,  694,  427,  429,
      694,  694,   76,   76,   76,  430,   76,   76,   76,   76,
       76,   76,   76,   76,  694,   76,  431,   76,   76,   76,
      694,  694,   76,  694,  432,  694,   76,  429,  694,  327,
       76,   76,   76,  430,   76,   76,   76,   76,   76,   76,
       76,   76,  433,   76,  431,   76,   76,   76,  694,   76,
       76,  694,  432,   76,   76,  435,   76,   76,  694,   76,

       76,  438,  694,   76,   76,   76,  694,  694,  434,   76,
      433,  437,  436,   76,   76,  694,  694,   76,   76,  439,
      694,   76,   76,  435,   76,   76,   76,   76,   76,  694,
       76,   76,   76,   76,   76,  694,  434,   76,  694,  437,
      436,   76,   76,  694,   76,   76,   76,  439,   76,   76,
       76,   76,   76,   76,   76,   76,  441,  694,   76,   76,
      694,  694,   76,  440,  442,  694,  694,  694,  694,  694,
       76,  694,   76,   76,  449,  694,   76,   76,   76,   76,
       76,   76,   76,   76,  441,  694,   76,   76,  694,  694,
       76,  440,  442,  443,  444,  445,  446,  447,   76,  448,

      694,  694,  449,   76,  694,   76,   76,   76,   76,   76,
       76,  454,   76,   76,   76,   76,  451,  450,   76,   76,
      694,   76,  452,   76,  694,   76,   76,  694,  453,   76,
       76,   76,  694,   76,   76,   76,   76,   76,  455,  454,
       76,   76,  694,   76,  451,  450,  694,   76,  694,   76,
      452,   76,  694,   76,   76,   76,  453,   76,   76,   76,
       76,  694,   76,   76,   76,  694,  455,   76,   76,  694,
      694,   76,  465,  694,  456,   76,   76,  694,  694,  457,
       76,  694,  694,   76,  694,  694,   72,   76,   76,   73,
       74,   76,   76,  694,   72,   76,   76,   73,   74,   76,

      465,  539,  456,   76,   76,  694,  540,  457,   76,   75,
       75,   75,   75,   75,   75,   75,   75,  459,  460,  461,
      462,  463,   76,  464,  467,  694,  466,   76,   76,   76,
       76,  474,   76,   76,  694,   76,  694,   76,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,   75,
       76,  694,  467,  694,  466,   76,   76,   76,   76,  474,
       76,   76,  694,   76,  694,   76,  361,  361,  362,  363,
      361,  361,  364,  365,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  694,  694,  694,  694,  694,  694,
      694,  694,  361,  361,  361,  361,  361,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      694,  468,  694,  475,  694,  469,   76,   76,  470,  473,
       76,  476,  694,  361,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  694,  468,
      694,  475,  694,  469,   76,   76,  470,  473,   76,  476,
      361,  361,   76,   76,   76,   76,  694,  477,  478,   76,
      479,   76,   76,   76,   76,   76,   76,  480,   76,   76,
       76,  694,   76,   76,   76,  694,   76,  694,  694,  481,
       76,   76,   76,   76,   76,  477,  478,   76,  479,   76,
       76,   76,   76,   76,   76,  480,   76,   76,   76,  484,

       76,   76,   76,  694,   76,  694,   76,  481,   76,   76,
       76,  482,   76,   76,   76,   76,  694,   76,  694,  485,
      694,  694,  694,   76,   76,  694,  483,   76,   76,  694,
      694,   76,   76,  694,   76,   76,  694,   76,   76,  482,
       76,   76,   76,   76,   76,   76,  694,  485,   76,   76,
      694,   76,   76,   76,  483,   76,   76,   76,  486,   76,
       76,   76,  487,   76,  694,   76,   76,   76,   76,   76,
      489,   76,   76,  694,   76,   76,   76,   76,  488,   76,
       76,   76,  694,   76,  490,   76,  486,   76,   76,   76,
      487,  694,   76,   76,   76,   76,  491,   76,  489,   76,

       76,  694,   76,   76,  694,   76,  488,   76,   76,   76,
      492,   76,  490,   76,  694,   76,   76,   76,  694,   76,
       76,   76,  495,   76,  491,   76,   76,   76,   76,  694,
       76,  493,   76,   76,   76,  694,   76,   76,  492,  694,
       76,   76,  694,  500,  694,   76,  694,   76,   76,   76,
      495,   76,   76,   76,   76,   76,   76,   76,   76,  493,
       76,  497,   76,  496,   76,   76,   76,  694,   76,   76,
       76,  498,  694,   76,   76,  694,   76,   76,   76,  499,
       76,  694,   76,  694,   76,   76,   76,  694,   76,  497,
      694,  496,  502,   76,   76,  501,   76,   76,   76,  498,

      694,   76,   76,  694,  694,   76,   76,  499,  694,  694,
       76,  694,  694,   76,   76,   72,   76,   76,   73,   74,
      502,   76,  694,  501,   76,  694,  694,  504,  694,  694,
       75,   75,   75,   75,   75,   75,   75,   75,  694,   76,
       76,   76,  694,  505,   76,   76,   76,   76,   76,   76,
       76,  694,   76,   76,   76,  504,   76,   76,  506,  694,
       76,   76,  694,  694,  694,  507,  694,   76,   76,   76,
       75,  505,   76,   76,   76,   76,   76,   76,   76,  694,
       76,   76,   76,  508,   76,   76,  506,   76,   76,   76,
       76,   76,   76,  507,   76,   76,   76,   76,  510,   76,

       76,   76,  509,   76,  694,   76,   76,   76,  694,   76,
       76,  508,  512,   76,   76,   76,  694,   76,   76,   76,
       76,  694,   76,   76,   76,  511,  510,   76,   76,  694,
      509,   76,  694,  515,   76,   76,  694,   76,   76,   76,
      512,   76,   76,   76,   76,   76,   76,   76,   76,  694,
       76,  694,   76,  511,   76,  513,   76,   76,   76,  694,
       76,   76,   76,  694,  514,   76,   76,   76,  694,   76,
      694,   76,   76,   76,   76,   76,   76,   76,   76,  694,
       76,  694,   76,  513,   76,   76,   76,   76,   76,   76,
       76,   76,  514,   76,   76,   76,   76,   76,  516,   76,

       76,   76,   76,   76,   76,   76,   76,   76,  694,  694,
      518,  694,   76,  517,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  516,   76,   76,  694,
       76,   76,   76,  694,   76,   76,  519,  694,  518,   76,
       76,  517,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  694,   76,   76,  694,  520,   76,
       76,  694,  694,  694,  519,  531,  694,   76,   76,   76,
      530,   76,   76,   76,  694,   76,   76,   76,  694,   76,
       76,  694,  694,   76,   76,  694,  520,   76,   76,  532,
      694,   76,  694,  531,  694,   76,   76,   76,  530,   76,

       76,   76,  694,   76,   76,   76,  533,   76,   76,  694,
       76,   76,   76,  694,   76,  694,   76,  532,   76,   76,
      694,  694,  694,   76,  694,  534,  694,   76,  694,  694,
      694,   76,  694,  694,  533,   76,   76,  694,   76,   76,
       76,  694,   76,   76,   76,   72,   76,   76,   73,   74,
      694,   76,  694,  534,   72,  694,  546,   73,   74,  694,
      535,  535,  535,  535,  535,  535,  535,  535,  694,  541,
      551,   76,  694,   76,  542,   76,  694,   76,   76,   76,
      694,   76,   76,   76,  546,   76,   76,   76,  694,   76,
      547,   76,  694,   76,  694,   76,  550,  548,  694,   76,

      535,   76,  549,   76,   76,   76,   76,  694,  554,   76,
       76,   76,   76,   76,   76,   76,  694,   76,  547,   76,
      694,   76,  694,   76,  550,  548,  694,   76,  694,   76,
      549,   76,   76,   76,   76,  694,  554,   76,   76,  694,
       76,  694,   76,  694,  694,  694,  694,  555,  556,  557,
      558,  559,  560,  694,  561,   76,  694,   76,  562,   76,
       76,   76,   76,   76,   76,   76,   76,  694,   76,   76,
       76,  694,   76,   76,   76,  555,   76,   76,   76,  694,
       76,  694,   76,   76,  694,  694,  562,   76,   76,  563,
       76,   76,   76,  694,  565,  694,   76,   76,   76,  694,

       76,   76,   76,   76,   76,   76,   76,   76,   76,  564,
       76,   76,   76,  694,  694,   76,   76,  563,   76,   76,
      566,  694,  565,   76,  694,  694,   76,  694,   76,  567,
       76,   76,   76,  694,   76,   76,   76,  564,   76,   76,
       76,  568,  694,   76,   76,   76,   76,   76,  566,   76,
       76,   76,  569,   76,   76,   76,   76,  567,   76,   76,
       76,  694,   76,   76,   76,  694,   76,   76,  570,  568,
      694,   76,  694,   76,   76,   76,  694,   76,   76,  694,
      569,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  570,  694,   76,   76,

       76,  571,   76,   76,   76,  576,   76,  572,   76,  694,
      694,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  694,  575,   76,   76,   76,  571,
       76,   76,   76,  576,   76,  572,   76,   76,  577,   76,
      694,   76,  694,   76,   76,   76,  694,   76,   76,  578,
      694,   76,   76,  575,  694,   76,  694,  694,  694,   76,
      694,  694,  694,  694,  694,   76,  577,   72,  694,   76,
      579,  580,   76,   76,  694,  694,   76,  578,  694,  694,
       76,  694,  581,  581,  581,  581,  581,  581,  581,  581,
      694,   76,   76,  583,  694,   76,   76,   76,  694,   76,

       76,  585,  694,  694,  694,   76,  584,   76,   76,  586,
      587,   76,   76,  694,  694,   76,   76,  694,  694,   76,
       76,  583,  581,   76,   76,   76,  694,   76,   76,  585,
      694,  694,  694,   76,  584,   76,   76,  586,  587,   76,
       76,   76,   76,   76,   76,  588,   76,   76,  694,   76,
       76,   76,   76,  589,   76,   76,   76,   76,   76,  591,
       76,   76,   76,  694,  694,   76,  694,  694,  694,   76,
       76,  694,  694,  588,   76,   76,  590,   76,   76,   76,
       76,  589,   76,   76,   76,   76,   76,  591,   76,   76,
       76,   76,   76,   76,  694,   76,   76,   76,  694,   76,

       76,   76,  592,   76,  590,   76,  694,   76,  594,  596,
      593,   76,  694,   76,  694,  694,  694,   76,  595,   76,
       76,  694,  694,   76,   76,   76,  694,   76,   76,   76,
      592,   76,  694,   76,  694,   76,  594,  596,  593,   76,
       76,   76,  694,   76,   76,   76,  595,   76,   76,   76,
       76,   76,   76,   76,   76,  694,   76,   76,   76,  694,
      599,  694,  694,  694,  694,  694,  694,  694,   76,  598,
      694,   76,   76,  694,  694,   76,   76,   76,   76,   76,
       76,   76,   76,  694,   76,   76,   76,   72,  599,  694,
       73,   74,   76,  694,  694,  694,   76,  598,  601,  694,

       76,  694,  535,  535,  535,  535,  535,  535,  535,  535,
      694,   76,  694,   76,  694,   76,  694,   76,  694,   76,
       76,   76,  694,   76,   76,   76,  601,  602,   76,   76,
       76,   76,  694,   76,   76,  694,  694,  694,   76,   76,
      694,   76,  535,   76,  694,   76,  694,   76,  694,   76,
      694,   76,  694,   76,  694,  602,   76,   76,   76,   76,
       76,   76,   76,  603,   76,   72,   76,   72,   73,   74,
       73,   74,  694,  694,  694,   76,  694,  694,  604,   76,
      605,  694,  607,   76,   76,  606,  694,  608,   76,  694,
       72,  603,   76,   73,   74,  694,   76,  615,  694,  694,

       76,  694,  694,   76,   76,  609,  604,   76,   76,   76,
      610,   76,   76,   76,  614,  617,   76,   76,  694,  694,
      694,  616,   76,  694,   76,  620,   76,  694,   76,   76,
       76,  694,   76,   76,  694,  694,   76,   76,  694,  694,
       76,   76,  614,  617,   76,   76,  694,   76,  694,  616,
       76,   76,  618,  620,   76,   76,  694,   76,   76,   76,
      619,   76,  694,   76,   76,  622,  694,   76,   76,   76,
      621,  694,   76,   76,   76,   76,  694,   76,   76,   76,
      618,   76,   76,   76,  694,  623,   76,   76,  619,  694,
       76,   76,   76,  622,   76,   76,   76,   76,  621,   76,

       76,   76,   76,   76,  694,   76,   76,   76,  694,   76,
       76,   76,   76,  623,   76,   76,   76,  624,   76,   76,
       76,  694,   76,  694,   76,  627,  625,   76,   76,  694,
      694,   76,   76,  694,  694,   76,  694,  694,  694,   76,
       76,  694,  694,   76,   76,  624,   72,   76,   76,  579,
      580,  694,   76,  627,  625,   72,   76,  694,   73,   74,
       76,  581,  581,  581,  581,  581,  581,  581,  581,  694,
       75,   75,   75,   75,   75,   75,   75,   75,  694,   76,
       76,   76,  694,   76,   76,   76,   76,   76,   76,   76,
      629,   76,  694,  694,   76,   76,  694,  694,  628,  630,

      694,  581,  632,  694,  694,  694,  694,   76,   76,   76,
       75,   76,   76,   76,   76,   76,   76,   76,  629,   76,
       76,   76,   76,   76,   76,   76,  628,  630,   76,   76,
      694,   76,   76,   76,  694,  633,   76,  634,  631,   76,
       76,   76,   76,   76,  694,  694,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  694,   76,   76,   76,   76,
       76,   76,   76,  633,   76,  634,  631,   76,   76,   76,
       76,   76,  635,   76,   76,   76,  694,   76,   76,   76,
      694,   76,   76,   76,  636,   76,   76,   76,   76,  637,
       76,   76,   76,   76,   76,   76,  638,  694,   76,   76,

      635,   76,   76,   76,  694,   76,  694,  694,  694,   76,
      694,   76,  636,   76,  640,   76,   76,  637,  694,   76,
       76,   76,   76,   76,  638,   76,   76,   76,  694,   76,
       76,   76,  641,   76,  694,   76,  694,   76,  694,   76,
      642,   76,  640,   76,   76,   76,   76,   76,  644,  694,
       76,   76,   76,   76,   76,   76,  694,   76,  645,  694,
      641,   76,  694,   76,  694,   76,  643,   76,  642,   76,
      694,   76,   76,   76,   76,   76,  644,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  645,   76,   76,  694,
      646,   76,   76,  694,  643,   76,  694,  694,   76,  694,

      647,  694,   76,  694,  694,   76,   76,  650,  694,   76,
      694,  694,   76,   76,  694,   76,   76,  694,  646,   76,
       76,   72,  694,   76,   73,   74,   76,  694,  647,  694,
       76,  694,  694,  694,   76,  650,  648,  648,  648,  648,
      648,  648,  648,  648,  694,   76,   76,   76,  694,   76,
       76,   76,   76,  651,   76,   76,   76,  694,   76,  694,
       76,  694,   76,  655,  652,  694,   76,  694,  694,  694,
      694,  694,  694,   76,   76,   76,  648,   76,   76,   76,
       76,  651,   76,   76,   76,   76,   76,  694,   76,   76,
       76,  655,  652,   76,   76,  694,   76,   76,   76,  694,

      656,  657,   76,  654,   76,   76,  658,   76,  694,  694,
      659,   76,   76,   76,   76,   76,   76,   76,  663,   76,
       76,   76,   76,  660,   76,   76,   76,   76,  656,  657,
       76,  654,   76,   76,  658,   76,  661,   76,  659,   76,
       76,   76,   76,   76,   76,   76,  663,   76,   76,   76,
       76,  660,  694,   76,   76,   76,  662,   76,  664,   76,
      694,  694,   76,   76,  661,   76,  694,   76,  694,   76,
      694,  694,  694,   76,  694,   76,  694,   76,  665,   76,
      694,   76,   76,   76,  662,   76,  664,   76,  694,  694,
       76,   76,  694,  694,  666,   76,  694,   72,  694,  694,

       73,   74,  694,   76,  694,  694,  665,   76,  694,  694,
      694,   76,  648,  648,  648,  648,  648,  648,  648,  648,
      694,   76,  666,   76,  694,  667,   76,   76,   76,   76,
      669,   76,   76,  694,   76,  673,   76,  668,   76,   76,
       76,  694,   76,   76,   76,  694,   76,  694,   76,   76,
      694,   76,  648,  667,   76,   76,   76,   76,  669,   76,
       76,  694,   76,  673,   76,  668,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  674,   76,   76,   76,   76,
       76,   76,   76,   76,  677,   76,   76,   76,   76,   76,
      694,  694,   76,  694,  694,  676,   76,   76,  675,  694,

       76,   76,  694,  674,  694,   76,   76,   76,   76,   76,
       76,   76,  677,   76,   76,   76,   76,   76,  694,  694,
       76,   76,  694,  676,   76,   76,  675,   76,   76,   76,
       76,   76,   76,  694,   76,   76,   76,   76,   76,  678,
       76,   76,   76,   76,  694,   76,   76,   76,  694,   76,
       76,   76,  694,   76,  694,   76,  679,   76,   76,   76,
       76,  694,   76,   76,   76,   76,   76,  678,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  680,   76,   76,
       76,   76,  694,  684,  679,   76,   76,  694,   76,   76,
       76,  694,   76,  685,   76,  686,   76,  694,   76,   76,

       76,  694,   76,  689,   76,  680,   76,   76,   76,   76,
      694,  684,  694,   76,   76,  694,   76,   76,   76,  694,
       76,  685,   76,  686,   76,   76,   76,   76,   76,   76,
       76,  689,   76,   76,   76,   76,   76,  694,   76,   76,
      694,  694,   76,   76,  687,  688,   76,   76,  694,  694,
      694,   76,  694,   76,  694,   76,   76,   76,  690,   76,
       76,   76,  694,  694,   76,  694,   76,   76,  694,  694,
       76,   76,  687,  688,   76,   76,  691,   76,  694,   76,
       76,   76,  694,   76,   76,   76,  690,   76,   76,   76,
       76,   76,   76,   76,  693,   76,   76,   76,   76,   76,

      694,  692,  694,  694,  691,   76,  694,  694,   76,   76,
      694,  694,   76,   76,  694,  694,   76,   76,   76,   76,
       76,   76,  693,   76,   76,   76,   76,   76,  694,  692,
       53,   53,   53,   76,   76,  165,  165,  165,   75,   75,
      213,  213,  328,  328,  327,  327,  458,  458,  361,  361,
      361,  366,  366,  366,  503,  503,  536,  536,  573,  573,
      573,  582,  582,  535,  535,  581,  581,  626,  626,  649,
      649,  648,  648,  670,  670,  670,  681,  681,  681,    3,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694
    } ;

static const flex_int16_t yy_chk[5767] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    6,    7,    9,
        9,   21,   23,   23,   23,   18,   18,   18,   18,   18,

       18,   18,   18,    2,    2,    2,    2,    2,    2,    2,
        2,    6,   18,   19,   20,   21,   20,   20,   20,   20,
       20,   20,   20,   20,   31,   19,   25,   25,   31,   47,
       52,  290,   31,  401,   53,   31,  696,   31,   31,   33,
       18,    7,   55,   33,   55,  574,  165,   33,   56,   56,
      573,  163,   31,   47,   52,    9,   31,  373,  373,  290,
       31,  401,   49,   31,  166,   31,   31,   33,  167,    6,
      167,   33,  494,   21,   26,   33,  472,   26,   26,   49,
       49,   49,   49,   49,   49,   49,   49,   53,  471,   26,
       26,   26,   26,   26,   26,   26,   26,   55,  163,  165,

      365,  364,   32,   26,   26,   75,   32,  363,   75,   75,
       32,   47,   52,   32,   56,   26,   32,  166,  362,   32,
       26,   26,  632,  167,  327,  632,  163,  327,  327,   26,
       32,   26,   26,  522,   32,  361,  522,  522,   32,  653,
       50,   32,  523,   26,   32,  523,  523,   32,   26,   26,
       27,  670,  329,   27,   27,   50,  681,   50,   50,   50,
       50,   50,   50,   50,   50,   27,   27,   27,   27,   27,
       27,   27,   27,  524,   71,   34,  524,  524,   27,   34,
       34,  682,   67,   34,   27,   63,   35,   51,   34,   27,
       35,   17,  653,   27,   35,   27,   15,   14,  446,   35,

       35,  446,  446,   34,  670,   27,   27,   34,   34,  681,
        5,   34,   27,  446,   35,    3,   34,   27,   35,    0,
        0,   27,   35,   27,   28,    0,    0,   35,   35,   36,
       28,   28,   28,   36,  682,   28,   37,   36,   28,   28,
       37,   28,  448,   36,   37,  448,  448,  672,   28,  672,
       37,  525,   28,    0,  525,  525,    0,   36,   28,   28,
       28,   36,  448,   28,   37,   36,   28,   28,   37,   28,
      526,   36,   37,  526,  526,    0,   28,   29,   37,    0,
        0,   29,   44,   29,    0,   29,   44,  683,   29,  683,
       44,    0,   29,    0,   29,  464,   46,    0,  464,  464,

       46,    0,  672,  527,   46,   29,  527,  527,    0,   29,
       44,   29,    0,   29,   44,  464,   29,    0,   44,    0,
       29,    0,   29,   30,   46,   40,    0,   30,   46,   40,
        0,   30,   46,   40,   30,    0,   30,   30,   40,   40,
      528,   43,  683,  528,  528,   43,   30,    0,    0,   43,
        0,   30,    0,   40,   43,   30,    0,   40,    0,   30,
        0,   40,   30,    0,   30,   30,   40,   40,  529,   43,
        0,  529,  529,   43,   30,   38,   38,   43,    0,   38,
       38,   45,   43,   38,    0,   45,    0,    0,   45,   45,
       38,    0,   38,   38,   38,  443,    0,   76,  443,  443,

        0,   76,    0,   38,   38,   76,    0,   38,   38,   45,
      443,   38,    0,   45,    0,  443,   45,   45,   38,    0,
       38,   38,   38,   39,    0,   76,    0,   39,    0,   76,
        0,   39,  535,   76,   39,  535,  535,   39,    0,    0,
       39,    0,   39,   61,   61,   61,   61,   61,   61,   61,
       61,   39,    0,    0,  444,   39,    0,  444,  444,   39,
       61,    0,   39,  538,    0,   39,  538,  538,   39,  444,
       39,   41,    0,   41,  444,   41,   81,   41,   41,   41,
       81,    0,    0,    0,   81,   41,   41,   41,   61,   81,
       41,    0,   77,   41,  447,    0,   77,  447,  447,   41,

       77,   41,    0,   41,   81,   41,   41,   41,   81,  447,
       77,    0,   81,   41,   41,   41,    0,   81,   41,   78,
       77,   41,   42,   78,   77,    0,   42,   78,   77,   42,
       42,  539,    0,    0,  539,  539,   42,   78,   77,   42,
        0,  445,    0,    0,  445,  445,   42,   78,    0,  540,
       42,   78,  540,  540,   42,   78,  445,   42,   42,  541,
        0,  445,  541,  541,   42,   78,    0,   42,    0,    0,
       62,    0,   62,    0,   42,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,  168,  168,  168,  168,  168,  168,  168,  168,   66,

       65,   66,   66,   66,   66,   66,   66,   66,   66,   79,
        0,   82,   79,   79,   80,   82,   80,   79,   80,   82,
        0,   83,   80,    0,   82,   83,    0,   80,   65,   83,
      542,    0,  543,  542,  542,  543,  543,   79,    0,   82,
       79,   79,   80,   82,   80,   79,   80,   82,    0,   83,
       80,    0,   82,   83,   84,   80,   85,   83,   84,   86,
       85,   87,   84,   86,   85,   87,    0,   86,  462,   87,
        0,  462,  462,    0,   84,    0,   85,   88,    0,   87,
        0,   88,   84,  462,   85,   88,   84,   86,   85,   87,
       84,   86,   85,   87,   88,   86,  544,   87,    0,  544,

      544,    0,   84,    0,   85,   88,   89,   87,   92,   88,
       89,   90,   92,   88,   89,   90,   92,  545,    0,   90,
      545,  545,   88,   89,   93,   90,    0,  581,   93,   90,
      581,  581,   93,    0,   89,    0,   92,   91,   89,   90,
       92,   91,   89,   90,   92,   91,  463,   90,   91,  463,
      463,   89,   93,   90,    0,   91,   93,   90,   94,    0,
       93,  463,   94,   96,  105,   91,   94,   96,  105,   91,
        0,   96,  105,   91,   95,   96,   91,   94,   95,   95,
       95,  105,   95,   91,   96,   95,   94,    0,    0,    0,
       94,   96,  105,   97,   94,   96,  105,   97,    0,   96,

      105,   97,   95,   96,    0,   94,   95,   95,   95,  105,
       95,   97,   96,   95,   98,   99,    0,   98,   98,   99,
       99,   97,   98,   99,  561,   97,  100,  561,  561,   97,
      100,    0,   99,  597,  100,    0,  597,  597,    0,   97,
        0,  100,   98,   99,  561,   98,   98,   99,   99,    0,
       98,   99,    0,  101,  100,  101,    0,  101,  100,  102,
       99,  101,  100,  102,  101,    0,    0,  102,  103,  100,
      102,  521,  103,    0,  521,  521,  103,    0,    0,    0,
        0,  101,  103,  101,    0,  101,  521,  102,    0,  101,
      600,  102,  101,  600,  600,  102,  103,    0,  102,  104,

      103,    0,  104,  104,  103,  106,    0,    0,  537,  106,
      103,  537,  537,  106,  104,  104,  104,  104,  104,  104,
      104,  104,  606,  537,  106,  606,  606,  108,  107,    0,
      109,  108,  107,  106,  109,  108,  107,  106,  109,  110,
        0,  106,  107,  110,    0,  108,  108,  110,    0,    0,
        0,    0,  106,    0,  104,  108,  107,    0,  109,  108,
      107,  112,  109,  108,  107,  112,  109,  110,    0,  112,
      107,  110,    0,  108,  108,  110,  111,  113,    0,  112,
      111,  113,  113,    0,  111,  113,  111,    0,    0,  112,
      113,  111,    0,  112,  111,  111,  113,  112,  114,    0,

        0,    0,  114,    0,  111,  113,  114,  112,  111,  113,
      113,  114,  111,  113,  111,    0,  114,  115,  113,  111,
        0,  115,  111,  111,  113,  115,  114,  116,    0,  116,
      114,  116,  117,  116,  114,  116,  117,    0,  117,  114,
      117,    0,    0,  118,  114,  115,  118,  118,    0,  115,
        0,  118,    0,  115,    0,  116,    0,  116,    0,  116,
      117,  116,    0,  116,  117,    0,  117,    0,  117,  119,
        0,  118,  119,  119,  118,  118,  120,  119,    0,  118,
      120,    0,  119,  121,  120,    0,  122,  121,  123,  119,
      122,  121,  123,    0,  122,  122,  123,  119,    0,  120,

      119,  119,  121,  607,  120,  119,  607,  607,  120,    0,
      119,  121,  120,    0,  122,  121,  123,  119,  122,  121,
      123,  124,  122,  122,  123,  124,    0,  120,  125,  124,
      121,  126,  125,  126,  127,  126,  125,    0,  127,  126,
      128,  127,  127,    0,  128,    0,  130,    0,  128,  124,
      130,    0,    0,  124,  130,    0,  125,  124,    0,  126,
      125,  126,  127,  126,  125,    0,  127,  126,  128,  127,
      127,  129,  128,  131,  130,  129,  128,  131,  130,  129,
      132,  131,  130,    0,  132,  129,  133,  131,  132,  133,
      133,    0,  608,    0,  133,  608,  608,  132,    0,  129,

        0,  131,    0,  129,    0,  131,    0,  129,  132,  131,
        0,    0,  132,  129,  133,  131,  132,  133,  133,    0,
      609,    0,  133,  609,  609,  132,  134,  135,  134,  134,
        0,  135,    0,  135,    0,  135,  134,    0,  134,  134,
        0,  134,    0,  136,  134,  134,  136,  136,    0,  610,
        0,  136,  610,  610,  134,  135,  134,  134,    0,  135,
        0,  135,    0,  135,  134,    0,  134,  134,    0,  134,
        0,  136,  134,  134,  136,  136,  137,  138,    0,  136,
      137,  138,  139,  140,  137,  138,  139,  140,    0,  141,
      139,  140,    0,  141,  138,  137,  140,  141,  611,  139,

        0,  611,  611,  141,  137,  138,    0,    0,  137,  138,
      139,  140,  137,  138,  139,  140,    0,  141,  139,  140,
        0,  141,  138,  137,  140,  141,  142,  139,  147,  143,
      142,  141,  147,  143,  142,    0,  147,  143,  145,  142,
      143,  144,  145,  144,  559,  144,  145,  559,  559,  144,
        0,    0,    0,    0,  142,  145,  147,  143,  142,  559,
      147,  143,  142,    0,  147,  143,  145,  142,  143,  144,
      145,  144,  146,  144,  145,    0,  146,  144,  148,    0,
      146,    0,  148,  145,  149,    0,  148,    0,  149,  146,
      150,  148,  149,  151,  150,  152,    0,  151,  150,  152,

      146,  151,    0,  152,  146,  151,  148,  149,  146,    0,
      148,    0,  149,    0,  148,    0,  149,  146,  150,  148,
      149,  151,  150,  152,  153,  151,  150,  152,  153,  151,
      154,  152,  153,  151,  154,  149,  612,    0,  154,  612,
      612,    0,  155,  156,  153,  154,  155,  156,    0,  158,
      155,  156,  153,  158,  156,    0,  153,  158,  154,  157,
      153,  155,  154,  157,    0,  613,  154,  157,  613,  613,
      155,  156,  153,  154,  155,  156,  157,  158,  155,  156,
      159,  158,  156,    0,  159,  158,    0,  157,  159,  155,
      160,  157,  173,    0,  160,  157,  173,  159,  160,  459,

      173,  160,  459,  459,  157,    0,  639,    0,  159,  639,
      639,    0,  159,  161,  459,    0,  159,    0,  160,  459,
      173,  162,  160,    0,  173,  159,  160,    0,  173,  160,
      161,  161,  161,  161,  161,  161,  161,  161,  162,  162,
      162,  162,  162,  162,  162,  162,  164,  169,  169,  169,
      169,  169,  169,  169,  169,  648,    0,    0,  648,  648,
        0,  164,    0,  164,  164,  164,  164,  164,  164,  164,
      164,  174,  175,  176,  177,  174,  175,  176,  177,  174,
      175,  176,  177,  178,  179,    0,    0,  178,  179,    0,
        0,  178,  179,    0,  179,    0,    0,    0,    0,  174,

      175,  176,  177,  174,  175,  176,  177,  174,  175,  176,
      177,  178,  179,  180,    0,  178,  179,  180,    0,  178,
      179,  180,  179,  181,    0,  181,  182,  181,    0,  183,
      182,  181,  180,  183,  182,  184,  185,  183,  186,  184,
      185,  180,  186,  184,  185,  180,  186,    0,  183,  180,
      187,  181,    0,  181,  182,  181,    0,  183,  182,  181,
      180,  183,  182,  184,  185,  183,  186,  184,  185,  189,
      186,  184,  185,  189,  186,  187,  183,  189,  188,  187,
      188,  190,  188,  187,  189,  190,  188,  191,  192,  190,
      193,  191,  192,    0,  193,  191,  192,  189,  193,  190,

        0,  189,  192,  187,    0,  189,  188,  187,  188,  190,
      188,  187,  189,  190,  188,  191,  192,  190,  193,  191,
      192,  194,  193,  191,  192,  194,  193,  190,  195,  194,
      192,  196,  195,    0,  198,  196,  195,    0,  198,  196,
      197,  195,  198,  199,  197,  197,  200,  199,  197,  194,
      200,  199,    0,  194,  200,  197,  195,  194,    0,  196,
      195,    0,  198,  196,  195,    0,  198,  196,  197,  195,
      198,  199,  197,  197,  200,  199,  197,  201,  200,  199,
      202,  201,  200,  197,  202,  201,  560,    0,  202,  560,
      560,    0,    0,    0,  204,  205,    0,    0,  206,  205,

        0,  560,  206,  205,    0,  201,  206,    0,  202,  201,
      207,    0,  202,  201,  207,    0,  202,  203,  207,  203,
      204,  203,  203,  205,  204,  203,  206,  205,  204,    0,
      206,  205,  203,  208,  206,    0,  203,  208,  207,  203,
        0,  208,  207,    0,    0,  203,  207,  203,  204,  203,
      203,  208,  204,  203,  212,  209,  204,    0,  212,  209,
      203,  208,  212,  209,  203,  208,  209,  203,  214,  208,
      210,    0,  214,    0,  210,    0,  214,    0,  210,  208,
      211,  210,  212,  209,  211,    0,  212,  209,  211,    0,
      212,  209,    0,    0,  209,  211,  214,    0,  210,    0,

      214,    0,  210,    0,  214,    0,  210,    0,  211,  210,
      213,  215,  211,  213,  213,    0,  211,    0,  605,    0,
        0,  605,  605,  211,    0,  213,  213,  213,  213,  213,
      213,  213,  213,  605,  216,  216,  215,    0,  216,  217,
      215,  218,  216,  217,  215,  218,  219,  217,  220,  218,
      219,    0,  220,    0,  219,  218,  220,    0,    0,  217,
        0,  219,  216,  216,  215,  213,  216,  217,  215,  218,
      216,  217,  215,  218,  219,  217,  220,  218,  219,    0,
      220,    0,  219,  218,  220,    0,  221,  217,  222,  219,
      221,  223,  222,  224,  221,  223,  222,  224,  225,  223,

        0,  224,  225,    0,    0,  227,  225,    0,  222,  227,
      223,    0,    0,  227,  221,    0,  222,  225,  221,  223,
      222,  224,  221,  223,  222,  224,  225,  223,    0,  224,
      225,  226,    0,  227,  225,  226,  222,  227,  223,  226,
      228,  227,    0,  229,  228,  225,    0,  229,  228,  231,
      226,  229,  231,  231,  230,    0,  232,  231,  230,  226,
      232,  233,  230,  226,  232,  233,  234,  226,  228,  233,
      234,  229,  228,  230,  234,  229,  228,  231,  226,  229,
      231,  231,  230,  235,  232,  231,  230,  236,  232,  233,
      230,  236,  232,  233,  234,  236,  237,  233,  234,  238,

      237,  230,  234,  238,  237,    0,    0,  238,  235,    0,
      237,    0,  235,    0,  239,  236,  235,  238,  239,  236,
        0,  240,  239,  236,  237,  240,  241,  238,  237,  240,
      241,  238,  237,  239,  241,  238,  235,    0,  237,  242,
      235,    0,  239,  242,  235,  238,  239,  242,    0,  240,
      239,    0,  242,  240,  241,  243,  244,  240,  241,  243,
      244,  239,  241,  243,  244,    0,  243,  242,  246,  247,
      245,  242,  246,  247,  245,  242,  246,  247,  245,    0,
      242,  246,  247,  243,  244,    0,  249,  243,  244,  245,
        0,  243,  244,    0,  243,  250,  246,  247,  245,  250,

      246,  247,  245,  250,  246,  247,  245,    0,    0,  246,
      247,  248,  249,  248,  252,  248,  249,  245,  252,  248,
      249,  251,  252,  250,  251,  251,  248,  250,  253,  251,
        0,  250,  253,  252,    0,    0,  253,    0,    0,  248,
      249,  248,  252,  248,  249,    0,  252,  248,  249,  251,
      252,    0,  251,  251,  248,    0,  253,  251,    0,    0,
      253,  252,    0,    0,  253,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  255,  256,  257,  255,  255,  256,  257,  258,  255,
      256,  257,  258,  259,    0,    0,  258,  259,    0,    0,
      259,  259,  257,    0,    0,    0,  260,    0,  258,  255,
      256,  257,  255,  255,  256,  257,  258,  255,  256,  257,
      258,  259,    0,    0,  258,  259,    0,  260,  259,  259,

      257,  260,    0,  261,  262,  260,  258,  261,  262,  263,
      264,  261,  262,  263,  264,  262,  265,  263,  264,  266,
      265,    0,  266,  266,  265,  260,    0,  266,    0,  260,
        0,  261,  262,  260,  266,  261,  262,  263,  264,  261,
      262,  263,  264,  262,  265,  263,  264,  266,  265,  267,
      266,  266,  265,  267,    0,  266,  268,  267,    0,  269,
      268,  270,  266,  269,  268,  270,  271,  269,  272,  270,
      271,  267,  272,    0,  271,    0,  272,  267,    0,    0,
      273,  267,    0,  272,  268,  267,    0,  269,  268,  270,
        0,  269,  268,  270,  271,  269,  272,  270,  271,  267,

      272,    0,  271,    0,  272,  273,  274,    0,  275,  273,
      274,  272,  275,  273,  274,  278,  275,    0,  277,  278,
      276,  274,  277,  278,  276,    0,  277,    0,  276,    0,
        0,  277,    0,  273,  274,    0,  275,  273,  274,  276,
      275,  273,  274,  278,  275,    0,  277,  278,  276,  274,
      277,  278,  276,  279,  277,  279,  276,  279,    0,  277,
      280,  279,    0,    0,  280,  281,  279,  276,  280,  281,
      282,  283,  284,  281,  282,  283,  284,    0,  282,  283,
      284,  279,  286,  279,    0,  279,  286,    0,  280,  279,
      286,    0,  280,  281,  279,  286,  280,  281,  282,  283,

      284,  281,  282,  283,  284,  285,  282,  283,  284,  285,
      286,  287,  288,  285,  286,  287,  288,  289,  286,  287,
      288,  289,  287,  286,  285,  289,    0,  291,  289,    0,
      287,  291,    0,  285,  292,  291,    0,  285,  294,  287,
      288,  285,  294,  287,  288,  289,  294,  287,  288,  289,
      287,    0,  285,  289,    0,  291,  289,  293,  287,  291,
      292,  293,    0,  291,  292,  293,  294,  293,  292,    0,
      294,  295,  296,    0,  294,  297,  296,    0,    0,  297,
      296,    0,  296,  297,    0,  293,  298,    0,  292,  293,
      298,    0,  292,  293,  298,  293,  292,  295,  300,  298,

      296,  295,  300,  297,  296,  295,  300,  297,  296,  300,
      296,  297,  302,  305,  298,  303,  302,  305,  298,  303,
      302,  305,  298,  303,  301,  295,  300,  298,  301,  295,
      300,    0,  301,  295,  300,  303,    0,  300,  301,    0,
      302,  305,  304,  303,  302,  305,  304,  303,  302,  305,
      304,  303,  301,    0,  306,    0,  301,    0,  306,    0,
      301,  304,  306,  303,  307,  310,  301,  308,  307,  310,
      304,  308,  307,  310,  304,  308,    0,  307,  304,  309,
        0,    0,  306,  309,  308,    0,  306,  309,    0,  304,
      306,    0,  307,  310,    0,  308,  307,  310,  309,  308,

      307,  310,  311,  308,    0,  307,  311,  309,    0,  312,
      311,  309,  308,  312,    0,  309,  313,  312,    0,  314,
      313,  313,  312,  314,  313,    0,  309,  314,    0,  312,
      311,    0,    0,    0,  311,  315,  314,  312,  311,  315,
        0,  312,    0,  315,  313,  312,    0,  314,  313,  313,
      312,  314,  313,    0,  316,  314,    0,  312,  316,  315,
        0,  316,  316,  315,  314,  319,  318,  315,  318,  319,
      318,  315,  320,  319,  318,  321,  320,  322,  321,  321,
      320,  322,  316,  321,  323,  322,  316,  315,  323,  316,
      316,  324,  323,  319,  318,  324,  318,  319,  318,  324,

      320,  319,  318,  321,  320,  322,  321,  321,  320,  322,
      324,  321,  323,  322,  328,    0,  323,  328,  328,  324,
      323,    0,    0,  324,    0,    0,    0,  324,    0,  328,
      328,  328,  328,  328,  328,  328,  328,    0,  324,  330,
        0,    0,  332,  330,  331,  331,  332,  330,  331,  333,
      332,  334,  331,  333,    0,  334,  333,  333,  335,  334,
        0,    0,  335,    0,  334,    0,  335,  330,    0,  328,
      332,  330,  331,  331,  332,  330,  331,  333,  332,  334,
      331,  333,  335,  334,  333,  333,  335,  334,    0,  336,
      335,    0,  334,  336,  335,  337,  338,  336,    0,  337,

      338,  339,    0,  337,  338,  340,    0,    0,  336,  340,
      335,  338,  337,  340,  341,    0,    0,  336,  341,  341,
        0,  336,  341,  337,  338,  336,  339,  337,  338,    0,
      339,  337,  338,  340,  339,    0,  336,  340,    0,  338,
      337,  340,  341,    0,  342,  343,  341,  341,  342,  343,
      341,  344,  342,  343,  339,  344,  343,    0,  339,  344,
        0,    0,  339,  342,  344,    0,    0,    0,    0,    0,
      347,    0,  342,  343,  347,    0,  342,  343,  347,  344,
      342,  343,  348,  344,  343,    0,  348,  344,    0,    0,
      348,  342,  344,  346,  346,  346,  346,  346,  347,  346,

        0,    0,  347,  351,    0,  346,  347,  351,  350,  346,
      348,  351,  350,  346,  348,  349,  350,  349,  348,  349,
        0,  352,  350,  349,    0,  352,  353,    0,  350,  352,
      353,  351,    0,  346,  353,  351,  350,  346,  352,  351,
      350,  346,    0,  349,  350,  349,    0,  349,    0,  352,
      350,  349,    0,  352,  353,  354,  350,  352,  353,  354,
      355,    0,  353,  354,  355,    0,  352,  359,  355,    0,
        0,  359,  360,    0,  354,  359,  360,    0,    0,  355,
      360,    0,    0,  354,    0,    0,  460,  354,  355,  460,
      460,  354,  355,    0,  356,  359,  355,  356,  356,  359,

      360,  460,  354,  359,  360,    0,  460,  355,  360,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  357,  357,
      357,  357,  368,  357,  369,    0,  368,  375,  369,  357,
      368,  375,  369,  357,    0,  375,    0,  357,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  356,
      368,    0,  369,    0,  368,  375,  369,  357,  368,  375,
      369,  357,    0,  375,    0,  357,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,    0,    0,    0,    0,    0,    0,
        0,    0,  366,  366,  366,  366,  366,  370,  371,  372,

      374,  370,  371,  372,  374,  370,  371,  372,  374,  376,
        0,  370,    0,  376,    0,  371,  377,  376,  372,  374,
      377,  377,    0,  366,  377,  370,  371,  372,  374,  370,
      371,  372,  374,  370,  371,  372,  374,  376,    0,  370,
        0,  376,    0,  371,  377,  376,  372,  374,  377,  377,
      366,  366,  377,  378,  379,  380,    0,  378,  379,  380,
      380,  378,  379,  380,  381,  382,  384,  381,  381,  382,
      384,    0,  381,  382,  384,    0,  385,    0,    0,  384,
      385,  378,  379,  380,  385,  378,  379,  380,  380,  378,
      379,  380,  381,  382,  384,  381,  381,  382,  384,  388,

      381,  382,  384,    0,  385,    0,  387,  384,  385,  386,
      387,  386,  385,  386,  387,  389,    0,  386,    0,  389,
        0,    0,    0,  389,  388,    0,  386,  392,  388,    0,
        0,  392,  388,    0,  387,  392,    0,  386,  387,  386,
      390,  386,  387,  389,  390,  386,    0,  389,  390,  391,
        0,  389,  388,  391,  386,  392,  388,  391,  390,  392,
      388,  393,  391,  392,    0,  393,  395,  394,  390,  393,
      395,  394,  390,    0,  395,  394,  390,  391,  394,  396,
      397,  391,    0,  396,  397,  391,  390,  396,  397,  393,
      391,    0,  398,  393,  395,  394,  398,  393,  395,  394,

      398,    0,  395,  394,    0,  399,  394,  396,  397,  399,
      399,  396,  397,  399,    0,  396,  397,  400,    0,  402,
      398,  400,  402,  402,  398,  400,  404,  402,  398,    0,
      404,  400,  407,  399,  404,    0,  407,  399,  399,    0,
      407,  399,    0,  410,    0,  400,    0,  402,  406,  400,
      402,  402,  406,  400,  404,  402,  406,  408,  404,  400,
      407,  408,  404,  406,  407,  408,  409,    0,  407,  410,
      409,  409,    0,  410,  409,    0,  406,  410,  411,  409,
      406,    0,  411,    0,  406,  408,  411,    0,  412,  408,
        0,  406,  412,  408,  409,  411,  412,  410,  409,  409,

        0,  410,  409,    0,    0,  410,  411,  409,    0,    0,
      411,    0,    0,  414,  411,  413,  412,  414,  413,  413,
      412,  414,    0,  411,  412,    0,    0,  414,    0,    0,
      413,  413,  413,  413,  413,  413,  413,  413,    0,  415,
      416,  414,    0,  415,  416,  414,  417,  415,  416,  414,
      417,    0,  418,  419,  417,  414,  418,  419,  416,    0,
      418,  419,    0,    0,    0,  418,    0,  415,  416,  420,
      413,  415,  416,  420,  417,  415,  416,  420,  417,    0,
      418,  419,  417,  420,  418,  419,  416,  421,  418,  419,
      422,  421,  424,  418,  422,  421,  424,  420,  422,  425,

      424,  420,  421,  425,    0,  420,  423,  425,    0,  426,
      423,  420,  426,  426,  423,  421,    0,  426,  422,  421,
      424,    0,  422,  421,  424,  423,  422,  425,  424,    0,
      421,  425,    0,  433,  423,  425,    0,  426,  423,  427,
      426,  426,  423,  427,  429,  426,  430,  427,  429,    0,
      430,    0,  429,  423,  430,  429,  431,  432,  433,    0,
      431,  432,  433,    0,  431,  432,  433,  427,    0,  434,
        0,  427,  429,  434,  430,  427,  429,  434,  430,    0,
      429,    0,  430,  429,  431,  432,  433,  435,  431,  432,
      433,  435,  431,  432,  433,  435,  436,  434,  435,  437,

      436,  434,  439,  437,  436,  434,  439,  437,    0,    0,
      439,    0,  440,  437,  441,  435,  440,  449,  441,  435,
      440,  449,  441,  435,  436,  449,  435,  437,  436,    0,
      439,  437,  436,    0,  439,  437,  440,    0,  439,  442,
      440,  437,  441,  442,  440,  449,  441,  442,  440,  449,
      441,  450,  451,  449,    0,  450,  451,    0,  442,  450,
      451,    0,    0,    0,  440,  451,    0,  442,  454,  452,
      450,  442,  454,  452,    0,  442,  454,  452,    0,  450,
      451,    0,    0,  450,  451,    0,  442,  450,  451,  452,
        0,  453,    0,  451,    0,  453,  454,  452,  450,  453,

      454,  452,    0,  455,  454,  452,  453,  455,  456,    0,
      457,  455,  456,    0,  457,    0,  456,  452,  457,  453,
        0,    0,    0,  453,    0,  455,    0,  453,    0,    0,
        0,  455,    0,    0,  453,  455,  456,    0,  457,  455,
      456,    0,  457,  465,  456,  458,  457,  465,  458,  458,
        0,  465,    0,  455,  461,    0,  465,  461,  461,    0,
      458,  458,  458,  458,  458,  458,  458,  458,    0,  461,
      470,  465,    0,  466,  461,  465,    0,  466,  467,  465,
        0,  466,  467,  469,  465,  468,  467,  469,    0,  468,
      466,  469,    0,  468,    0,  470,  469,  467,    0,  470,

      458,  466,  468,  470,  473,  466,  467,    0,  473,  466,
      467,  469,  473,  468,  467,  469,    0,  468,  466,  469,
        0,  468,    0,  470,  469,  467,    0,  470,    0,  474,
      468,  470,  473,  474,  475,    0,  473,  474,  475,    0,
      473,    0,  475,    0,    0,    0,    0,  475,  476,  476,
      476,  476,  476,    0,  476,  477,    0,  474,  477,  477,
      476,  474,  475,  477,  476,  474,  475,    0,  476,  478,
      475,    0,  480,  478,  479,  475,  480,  478,  479,    0,
      480,    0,  479,  477,    0,    0,  477,  477,  476,  479,
      482,  477,  476,    0,  482,    0,  476,  478,  482,    0,

      480,  478,  479,  481,  480,  478,  479,  481,  480,  481,
      479,  481,  483,    0,    0,  485,  483,  479,  482,  485,
      483,    0,  482,  485,    0,    0,  482,    0,  488,  485,
      486,  481,  488,    0,  486,  481,  488,  481,  486,  481,
      483,  486,    0,  485,  483,  489,  487,  485,  483,  489,
      487,  485,  487,  489,  487,  490,  488,  485,  486,  490,
      488,    0,  486,  490,  488,    0,  486,  491,  489,  486,
        0,  491,    0,  489,  487,  491,    0,  489,  487,    0,
      487,  489,  487,  490,  492,  493,  495,  490,  492,  493,
      495,  490,  492,  493,  495,  491,  489,    0,  497,  491,

      498,  492,  497,  491,  498,  498,  497,  493,  498,    0,
        0,  496,  492,  493,  495,  496,  492,  493,  495,  496,
      492,  493,  495,  499,    0,  496,  497,  499,  498,  492,
      497,  499,  498,  498,  497,  493,  498,  501,  501,  496,
        0,  501,    0,  496,  502,  501,    0,  496,  502,  502,
        0,  499,  502,  496,    0,  499,    0,    0,    0,  499,
        0,    0,    0,    0,    0,  501,  501,  503,    0,  501,
      503,  503,  502,  501,    0,    0,  502,  502,    0,    0,
      502,    0,  503,  503,  503,  503,  503,  503,  503,  503,
        0,  504,  505,  504,    0,  504,  505,  506,    0,  504,

      505,  506,    0,    0,    0,  506,  505,  507,  508,  507,
      508,  507,  508,    0,    0,  507,  508,    0,    0,  504,
      505,  504,  503,  504,  505,  506,    0,  504,  505,  506,
        0,    0,    0,  506,  505,  507,  508,  507,  508,  507,
      508,  509,  510,  507,  508,  509,  510,  511,    0,  509,
      510,  511,  513,  510,  512,  511,  513,  514,  512,  514,
      513,  514,  512,    0,    0,  514,    0,    0,    0,  509,
      510,    0,    0,  509,  510,  511,  512,  509,  510,  511,
      513,  510,  512,  511,  513,  514,  512,  514,  513,  514,
      512,  516,  517,  514,    0,  516,  517,  518,    0,  516,

      517,  518,  516,  519,  512,  518,    0,  519,  518,  520,
      517,  519,    0,  520,    0,    0,    0,  520,  519,  516,
      517,    0,    0,  516,  517,  518,    0,  516,  517,  518,
      516,  519,    0,  518,    0,  519,  518,  520,  517,  519,
      530,  520,    0,  531,  530,  520,  519,  531,  530,  533,
      532,  531,  534,  533,  532,    0,  534,  533,  532,    0,
      534,    0,    0,    0,    0,    0,    0,    0,  530,  532,
        0,  531,  530,    0,    0,  531,  530,  533,  532,  531,
      534,  533,  532,    0,  534,  533,  532,  536,  534,    0,
      536,  536,  546,    0,    0,    0,  546,  532,  546,    0,

      546,    0,  536,  536,  536,  536,  536,  536,  536,  536,
        0,  547,    0,  548,    0,  547,    0,  548,    0,  547,
      546,  548,    0,  549,  546,  550,  546,  549,  546,  550,
      554,  549,    0,  550,  554,    0,    0,    0,  554,  547,
        0,  548,  536,  547,    0,  548,    0,  547,    0,  548,
        0,  549,    0,  550,    0,  549,  555,  550,  554,  549,
      555,  550,  554,  555,  555,  556,  554,  557,  556,  556,
      557,  557,    0,    0,    0,  562,    0,    0,  555,  562,
      556,    0,  557,  562,  555,  556,    0,  557,  555,    0,
      558,  555,  555,  558,  558,    0,  563,  564,    0,    0,

      563,    0,    0,  562,  563,  558,  555,  562,  565,  566,
      558,  562,  565,  566,  563,  566,  565,  566,    0,    0,
        0,  565,  564,    0,  563,  568,  564,    0,  563,  568,
      564,    0,  563,  568,    0,    0,  565,  566,    0,    0,
      565,  566,  563,  566,  565,  566,    0,  567,    0,  565,
      564,  567,  567,  568,  564,  567,    0,  568,  564,  569,
      567,  568,    0,  569,  570,  571,    0,  569,  570,  571,
      569,    0,  570,  571,  572,  567,    0,  575,  572,  567,
      567,  575,  572,  567,    0,  575,  576,  569,  567,    0,
      576,  569,  570,  571,  576,  569,  570,  571,  569,  585,

      570,  571,  572,  585,    0,  575,  572,  585,    0,  575,
      572,  577,  578,  575,  576,  577,  578,  577,  576,  577,
      578,    0,  576,    0,  584,  584,  578,  585,  584,    0,
        0,  585,  584,    0,    0,  585,    0,    0,    0,  577,
      578,    0,    0,  577,  578,  577,  582,  577,  578,  582,
      582,    0,  584,  584,  578,  583,  584,    0,  583,  583,
      584,  582,  582,  582,  582,  582,  582,  582,  582,    0,
      583,  583,  583,  583,  583,  583,  583,  583,    0,  586,
      587,  588,    0,  586,  587,  588,  589,  586,  587,  588,
      589,  590,    0,    0,  589,  590,    0,    0,  586,  590,

        0,  582,  592,    0,    0,    0,    0,  586,  587,  588,
      583,  586,  587,  588,  589,  586,  587,  588,  589,  590,
      591,  593,  589,  590,  591,  593,  586,  590,  591,  593,
        0,  594,  592,  595,    0,  594,  592,  595,  591,  594,
      592,  595,  596,  598,    0,    0,  596,  598,  591,  593,
      596,  598,  591,  593,  599,    0,  591,  593,  599,  594,
      592,  595,  599,  594,  592,  595,  591,  594,  592,  595,
      596,  598,  599,  601,  596,  598,    0,  601,  596,  598,
        0,  601,  599,  602,  601,  603,  599,  602,  604,  603,
      599,  602,  604,  603,  614,  616,  604,    0,  614,  616,

      599,  601,  614,  616,    0,  601,    0,    0,    0,  601,
        0,  602,  601,  603,  616,  602,  604,  603,    0,  602,
      604,  603,  614,  616,  604,  617,  614,  616,    0,  617,
      614,  616,  617,  617,    0,  618,    0,  619,    0,  618,
      618,  619,  616,  618,  621,  619,  622,  620,  621,    0,
      622,  620,  621,  617,  622,  620,    0,  617,  622,    0,
      617,  617,    0,  618,    0,  619,  620,  618,  618,  619,
        0,  618,  621,  619,  622,  620,  621,  623,  622,  620,
      621,  623,  622,  620,  624,  623,  622,  625,  624,    0,
      623,  625,  624,    0,  620,  625,    0,    0,  627,    0,

      625,    0,  627,    0,    0,  623,  627,  627,    0,  623,
        0,    0,  624,  623,    0,  625,  624,    0,  623,  625,
      624,  626,    0,  625,  626,  626,  627,    0,  625,    0,
      627,    0,    0,    0,  627,  627,  626,  626,  626,  626,
      626,  626,  626,  626,    0,  628,  629,  630,    0,  628,
      629,  630,  631,  628,  629,  630,  631,    0,  634,    0,
      631,    0,  634,  634,  630,    0,  634,    0,    0,    0,
        0,    0,    0,  628,  629,  630,  626,  628,  629,  630,
      631,  628,  629,  630,  631,  633,  634,    0,  631,  633,
      634,  634,  630,  633,  634,    0,  635,  636,  637,    0,

      635,  636,  637,  633,  635,  636,  637,  638,    0,    0,
      638,  638,  642,  633,  643,  638,  642,  633,  643,  640,
      642,  633,  643,  640,  635,  636,  637,  640,  635,  636,
      637,  633,  635,  636,  637,  638,  640,  641,  638,  638,
      642,  641,  643,  638,  642,  641,  643,  640,  642,  644,
      643,  640,    0,  644,  645,  640,  641,  644,  645,  646,
        0,    0,  645,  646,  640,  641,    0,  646,    0,  641,
        0,    0,    0,  641,    0,  647,    0,  644,  646,  647,
        0,  644,  645,  647,  641,  644,  645,  646,    0,    0,
      645,  646,    0,    0,  647,  646,    0,  649,    0,    0,

      649,  649,    0,  647,    0,    0,  646,  647,    0,    0,
        0,  647,  649,  649,  649,  649,  649,  649,  649,  649,
        0,  650,  647,  651,    0,  650,  652,  651,  654,  650,
      652,  651,  654,    0,  652,  655,  654,  651,  656,  655,
      657,    0,  656,  655,  657,    0,  656,    0,  657,  650,
        0,  651,  649,  650,  652,  651,  654,  650,  652,  651,
      654,    0,  652,  655,  654,  651,  656,  655,  657,  658,
      656,  655,  657,  658,  656,  658,  657,  658,  660,  659,
      661,  662,  660,  659,  661,  662,  660,  659,  661,  662,
        0,    0,  663,    0,    0,  660,  663,  658,  659,    0,

      663,  658,    0,  658,    0,  658,  660,  659,  661,  662,
      660,  659,  661,  662,  660,  659,  661,  662,    0,    0,
      663,  664,    0,  660,  663,  664,  659,  665,  663,  664,
      666,  665,  676,    0,  666,  665,  676,  667,  666,  667,
      676,  667,  677,  668,    0,  667,  677,  668,    0,  664,
      677,  668,    0,  664,    0,  665,  668,  664,  666,  665,
      676,    0,  666,  665,  676,  667,  666,  667,  676,  667,
      677,  668,  669,  667,  677,  668,  669,  669,  677,  668,
      669,  673,    0,  673,  668,  673,  674,    0,  675,  673,
      674,    0,  675,  674,  674,  675,  675,    0,  679,  684,

      669,    0,  679,  684,  669,  669,  679,  684,  669,  673,
        0,  673,    0,  673,  674,    0,  675,  673,  674,    0,
      675,  674,  674,  675,  675,  678,  679,  684,  680,  678,
      679,  684,  680,  678,  679,  684,  680,    0,  686,  685,
        0,    0,  686,  685,  678,  680,  686,  685,    0,    0,
        0,  687,    0,  678,    0,  687,  680,  678,  685,  687,
      680,  678,    0,    0,  680,    0,  686,  685,    0,    0,
      686,  685,  678,  680,  686,  685,  688,  689,    0,  687,
      688,  689,    0,  687,  688,  689,  685,  687,  690,  691,
      692,  693,  690,  691,  692,  693,  690,  691,  692,  693,

        0,  691,    0,    0,  688,  689,    0,    0,  688,  689,
        0,    0,  688,  689,    0,    0,  690,  691,  692,  693,
      690,  691,  692,  693,  690,  691,  692,  693,    0,  691,
      695,  695,  695,  697,  697,  698,  698,  698,  699,  699,
      700,  700,  701,  701,  702,  702,  703,  703,  704,  704,
      704,  705,  705,  705,  706,  706,  707,  707,  708,  708,
      708,  709,  709,  710,  710,  711,  711,  712,  712,  713,
      713,  714,  714,  715,  715,  715,  716,  716,  716,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[227] =
    {   0,
1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "DARIC.l"
#line 6 "DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <sstream>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
extern std::list<std::string> error_list;
extern int status;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 2004 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"
#line 2005 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 53 "DARIC.l"


#line 2225 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 695 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5680 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 55 "DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 56 "DARIC.l"
/* skip comments */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "DARIC.l"
return SEPARATOR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "DARIC.l"
return INTEGERDIVIDE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "DARIC.l"
return TILDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "DARIC.l"
return TICK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "DARIC.l"
return E;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "DARIC.l"
return SEMICOLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "DARIC.l"
return LE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "DARIC.l"
return GE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 67 "DARIC.l"
return SHL_E;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 68 "DARIC.l"
return SHR_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "DARIC.l"
return PLUS_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "DARIC.l"
return MINUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "DARIC.l"
return NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "DARIC.l"
return SHL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "DARIC.l"
return SHR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "DARIC.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "DARIC.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "DARIC.l"
return MULTIPLY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "DARIC.l"
return DIVIDE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 82 "DARIC.l"
return LT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 83 "DARIC.l"
return GT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "DARIC.l"
return BANKED;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "DARIC.l"
return BGET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "DARIC.l"
return BPUT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "DARIC.l"
return CASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "DARIC.l"
return CHAIN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "DARIC.l"
return CLOSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "DARIC.l"
return DATA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "DARIC.l"
return DIM;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "DARIC.l"
return ELSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "DARIC.l"
return END;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "DARIC.l"
return ENDCASE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "DARIC.l"
return ENDIF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "DARIC.l"
return ENDFN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "DARIC.l"
return ENDFN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "DARIC.l"
return ENDPROC;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "DARIC.l"
return ENDTYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "DARIC.l"
return ENDWHILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "DARIC.l"
return EOFH;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "DARIC.l"
return EXPECT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "DARIC.l"
return FIELD;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "DARIC.l"
return FOR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "DARIC.l"
return GET;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "DARIC.l"
return GETS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "DARIC.l"
return GETSH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "DARIC.l"
return GOSUB;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "DARIC.l"
return GOTO;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "DARIC.l"
return INKEY;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "DARIC.l"
return INKEYS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "DARIC.l"
return INPUT_;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "DARIC.l"
return IF;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "DARIC.l"
return IN_;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "DARIC.l"
return LISTFILES;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "DARIC.l"
return LOCAL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "DARIC.l"
return MOUSE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "DARIC.l"
return NEXT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "DARIC.l"
return OF;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "DARIC.l"
return OPENIN;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "DARIC.l"
return OPENOUT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "DARIC.l"
return OPENUP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "DARIC.l"
return OTHERWISE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "DARIC.l"
return PRINT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "DARIC.l"
return PTR;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "DARIC.l"
return READ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "DARIC.l"
return REPEAT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "DARIC.l"
return RESTORE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "DARIC.l"
return RND;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "DARIC.l"
return RND0;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "DARIC.l"
return RND1;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "DARIC.l"
return OSCLI;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "DARIC.l"
return RETURN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "DARIC.l"
return SPC;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "DARIC.l"
return STEP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "DARIC.l"
return SWAP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "DARIC.l"
return THEN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "DARIC.l"
return TO;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "DARIC.l"
return TIME;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "DARIC.l"
return TIMES;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "DARIC.l"
return TRACEON;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "DARIC.l"
return TRACEOFF;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "DARIC.l"
return TYPE_;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "DARIC.l"
return UNTIL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "DARIC.l"
return WHEN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "DARIC.l"
return WHILE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 152 "DARIC.l"
return ASC;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "DARIC.l"
return CHRS;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "DARIC.l"
return INSTR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 155 "DARIC.l"
return LEFTS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 156 "DARIC.l"
return MIDS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "DARIC.l"
return RIGHTS;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 158 "DARIC.l"
return LEN;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 159 "DARIC.l"
return STRS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 160 "DARIC.l"
return STRINGS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "DARIC.l"
return AND;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "DARIC.l"
return OR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "DARIC.l"
return EOR;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "DARIC.l"
return NOT; 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "DARIC.l"
return FLOAT_;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "DARIC.l"
return INT_;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "DARIC.l"
return ACS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "DARIC.l"
return DIV;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "DARIC.l"
return MOD;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "DARIC.l"
return SQR; 
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "DARIC.l"
return LN;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "DARIC.l"
return LOG;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "DARIC.l"
return EXP;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "DARIC.l"
return ATN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "DARIC.l"
return TAN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "DARIC.l"
return COS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "DARIC.l"
return SIN; 
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "DARIC.l"
return ASN; 
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "DARIC.l"
return ABS; 
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "DARIC.l"
return DEG; 
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "DARIC.l"
return RAD; 
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "DARIC.l"
return SGN; 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "DARIC.l"
return PI; 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "DARIC.l"
return VAL; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 189 "DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 190 "DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 192 "DARIC.l"
return CIRCLE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 193 "DARIC.l"
return CLS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 194 "DARIC.l"
return CLIPON;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 195 "DARIC.l"
return CLIPOFF;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 196 "DARIC.l"
return COLOUR;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 197 "DARIC.l"
return COLOURBG;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 198 "DARIC.l"
return FILL;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 199 "DARIC.l"
return FLIP;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 200 "DARIC.l"
return SHOWFPS;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 201 "DARIC.l"
return GRAPHICS;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 202 "DARIC.l"
return LINE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 203 "DARIC.l"
return RECTANGLE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 204 "DARIC.l"
return PLOT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 205 "DARIC.l"
return POINT_;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 206 "DARIC.l"
return SHADED;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 207 "DARIC.l"
return TEXT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 208 "DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 209 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 211 "DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 212 "DARIC.l"
return CREATEFONT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 213 "DARIC.l"
return MONO15;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 214 "DARIC.l"
return MONO20;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "DARIC.l"
return MONO25;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 216 "DARIC.l"
return MONO30;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 217 "DARIC.l"
return MONO35;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 218 "DARIC.l"
return MONO40;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 219 "DARIC.l"
return MONO50;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 220 "DARIC.l"
return MONO75;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "DARIC.l"
return MONO100;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "DARIC.l"
return PROP15;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "DARIC.l"
return PROP20;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "DARIC.l"
return PROP25;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "DARIC.l"
return PROP30;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "DARIC.l"
return PROP35;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 227 "DARIC.l"
return PROP40;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 228 "DARIC.l"
return PROP50;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 229 "DARIC.l"
return PROP75;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 230 "DARIC.l"
return PROP100;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 231 "DARIC.l"
return SERIF15;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 232 "DARIC.l"
return SERIF20;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "DARIC.l"
return SERIF25;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "DARIC.l"
return SERIF30;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "DARIC.l"
return SERIF35;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "DARIC.l"
return SERIF40;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "DARIC.l"
return SERIF50;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 238 "DARIC.l"
return SERIF75;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "DARIC.l"
return SERIF100;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "DARIC.l"
return TRIANGLE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 241 "DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 242 "DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 243 "DARIC.l"
return RED;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 244 "DARIC.l"
return GREEN;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 245 "DARIC.l"
return YELLOW;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 246 "DARIC.l"
return BLUE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 247 "DARIC.l"
return MAGENTA;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 248 "DARIC.l"
return CYAN;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 249 "DARIC.l"
return WHITE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 250 "DARIC.l"
return BLACK;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 251 "DARIC.l"
return LASTPOS;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 254 "DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 255 "DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 256 "DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 257 "DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 258 "DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 259 "DARIC.l"
return TRANSLATE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 260 "DARIC.l"
return ROTATE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 261 "DARIC.l"
return SCALE; 
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 262 "DARIC.l"
return SOLID; 
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 263 "DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 264 "DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 266 "DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
#ifdef WINDOWS
                        s += ".daric";
#endif

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            // Test exists
                            FILE *f = fopen(s.c_str(), "r");
                            if (!f) {
                                std::stringstream stream;   
                                stream << "Include file '" << s << "' not found";
                                error_list.push_back(stream.str());
                                status = 0;
                            } else {
                                yyin = fopen(s.c_str(), "r");
                                yyfileno++;
                                files_index.insert(std::pair<std::string, int>(s, yyfileno));
                                strcpy(yytext, s.c_str());
                                included_files.insert(std::move(s));
                                file_stack.push(std::move(file));
                                file = yytext;
                                yylineno_stack.push(yylineno);
                                yylineno = 0;
                                yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                                BEGIN(INITIAL);
                            }
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 306 "DARIC.l"
{
                        static int once = 0; 
/*                        if (once = !once)
                            return NL;*/
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 321 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 322 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 323 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 324 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 325 "DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 326 "DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 327 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFPROC; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 328 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_INTEGER; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 329 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_STRING; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 330 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_REAL; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 331 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_STRING; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 332 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_INTEGER; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 333 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_REAL; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 334 "DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 335 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 336 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 337 "DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 338 "DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 220:
#line 341 "DARIC.l"
case 221:
#line 342 "DARIC.l"
case 222:
#line 343 "DARIC.l"
case 223:
#line 344 "DARIC.l"
case 224:
YY_RULE_SETUP
#line 344 "DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 346 "DARIC.l"
/* do nothing */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 348 "DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3473 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 695 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 695 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 694);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 348 "DARIC.l"

