#line 1 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#line 3 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 226
#define YY_END_OF_BUFFER 227
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[690] =
    {   0,
        0,    0,  227,  225,    2,    3,  225,  224,  205,  204,
        7,  220,  221,   24,   22,  222,   23,  206,   25,  203,
        4,    9,   26,    8,   27,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  223,    6,    2,  202,
        2,    3,    0,  207,    0,  205,  204,   16,   14,   15,
      206,    0,    5,   17,  206,  203,    4,   20,   10,   19,
       11,   21,  218,  217,  216,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
       60,   61,  219,  219,  219,  113,  219,  219,  219,  219,
      219,  219,  219,   66,  219,  104,  219,  219,  125,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,   85,  219,  219,  219,  219,  219,  219,  219,
      219,    2,  202,  202,    0,  207,    0,    0,  206,   18,
       12,   13,  121,  109,  103,   94,  120,  116,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      130,  219,  118,  219,  219,  219,  219,  122,  219,   36,

      110,  219,   38,  219,  105,  115,  219,  219,  219,  219,
      219,  219,  214,   49,   50,  219,  219,  219,  219,  219,
      219,  219,  219,  108,  219,  219,  100,   59,  219,  219,
      219,  219,  114,  219,  219,  111,  219,  219,  219,  106,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  123,
      219,  219,  180,  219,  219,  219,  219,  219,  219,   76,
      219,  219,  219,  219,  124,  219,  219,  119,  219,   81,
      112,  219,  219,  219,  117,  219,  219,  219,  219,  219,
      219,  219,  219,  126,  219,  219,  219,  219,  219,  219,
      219,  219,  183,  219,  219,   32,  219,   95,  219,  219,

      219,  219,  219,  185,   35,  219,  219,  219,   37,  219,
      219,  219,  219,  219,  219,   46,  219,  191,  219,  219,
      135,  136,  219,  212,  213,  214,  214,   51,  219,  219,
       55,  219,  219,  219,  219,  219,  219,  219,  139,  219,
      219,  219,  219,   98,  219,  219,   65,  219,  219,  219,
      219,  141,  219,  219,  219,  219,   72,   73,  219,    0,
        1,  218,  217,  216,  219,  219,  219,  219,  219,  219,
      219,    0,  219,  219,  219,  219,  219,  219,  219,  219,
       82,  101,  219,   83,  144,   84,   86,  219,  219,  219,
      128,   90,  219,  219,   92,  219,  219,  219,  219,  219,

       29,  187,   30,  219,   33,  219,  219,  219,  219,  219,
      219,  219,  219,  219,   42,  219,   40,  219,  219,  219,
      219,  127,   48,  219,  107,   52,  219,   54,  219,  181,
       56,   58,  219,   96,  219,   97,  219,  219,   63,  219,
      219,  219,  219,  219,  219,  219,   64,  219,  219,  219,
      219,   79,  219,  142,   71,  215,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,    0,    0,
      219,  197,  219,  219,  219,  192,  219,  198,  219,  219,
      219,   87,  219,  219,  219,   91,  219,   93,  186,  219,
      219,   28,  219,  129,  219,  131,   34,  133,  219,  211,

      219,  219,  219,  219,  219,  219,  219,   47,  219,   53,
      219,   57,  219,  219,  219,  219,  219,  219,  150,  151,
      152,  153,  154,  155,  156,  157,  194,   67,  219,   69,
      219,  215,  215,  219,  159,  160,  161,  162,  163,  164,
      165,  166,  219,  193,   74,  219,   80,   99,   77,   78,
      196,  219,  219,  219,  219,  219,  219,  219,  143,  219,
      219,  219,  219,  219,  219,  219,  190,  219,  182,  219,
      132,  219,  219,  210,  209,  211,  211,  219,  219,   39,
      219,   43,   44,  219,  219,  219,  219,  188,  219,  219,
      184,  158,   68,  219,  167,  219,   75,  219,  219,  219,

      168,  169,  170,  171,  172,  173,  174,  175,  137,  102,
      219,  219,  219,   88,  219,  219,  219,  219,  134,  219,
      208,  219,  219,   45,  219,  138,    0,  219,  219,  219,
      219,  219,  219,  176,  219,  219,   89,  219,  177,  219,
      219,  219,  208,  208,  219,  219,  219,    0,   62,  219,
       70,  140,  219,  219,  219,  219,  145,  195,  199,   31,
      149,  219,  219,  219,    0,  201,    0,  219,  219,  219,
      147,  146,  219,   41,  219,    0,  201,    0,  219,  219,
      178,  189,  219,  148,  179,  219,  219,  200,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   25,   25,   27,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
        1,   58,    1,    1,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   57,    1,   85,    1,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    2,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    2,    3,
        3,    3,    3,    3,    3,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[711] =
    {   0,
        0,   85,  286, 5651,  277,  275,   83, 5651,   70,    0,
     5651, 5651, 5651,  244,  243, 5651,  239,   76,   73,   96,
      240, 5651,   63, 5651,   93,  152,  228,  274,  327,  373,
       93,  152,   94,  225,  236,  279,  286,  425,  473,  375,
      521,  572,  391,  332,  431,  346, 5651, 5651,  125,  220,
      262,  255,  123, 5651,  132,  123,    0, 5651, 5651, 5651,
      506,  638,  226, 5651,  646,  664,  207,  189, 5651, 5651,
     5651,  187, 5651, 5651, 5651,  161,  447,  542,  569,  659,
      664,  526,  661,  671,  704,  706,  709,  711,  727,  756,
      761,  787,  758,  774,  808,  824,  813,  843,  864,  865,

      876,  903,  909,  918,  977,  814,  955,  978,  977,  980,
      989, 1026, 1011, 1027, 1048, 1067, 1077, 1082, 1093, 1119,
     1126, 1133, 1136, 1138, 1171, 1178, 1181, 1184, 1190, 1221,
     1196, 1223, 1230, 1236, 1276, 1277, 1293, 1326, 1327, 1332,
     1333, 1339, 1376, 1379, 1391, 1388, 1422, 1378, 1428, 1434,
     1440, 1443, 1445, 1474, 1480, 1492, 1493, 1509, 1499, 1530,
     1540, 1593,  654, 1603,  147,  175,  201, 1611, 1619, 5651,
     5651, 5651, 1542, 1614, 1615, 1616, 1617, 1626, 1627, 1656,
     1666, 1669, 1672, 1678, 1679, 1681, 1718, 1721, 1712, 1724,
     1730, 1731, 1733, 1764, 1771, 1774, 1783, 1777, 1786, 1789,

     1820, 1823, 1860, 1863, 1838, 1841, 1853, 1876, 1898, 1913,
     1923, 1897, 1981, 1911, 1979, 1977, 1982, 1984, 1989, 1991,
     2029, 2031, 2034, 2036, 2041, 2074, 2048, 2083, 2086, 2097,
     2092, 2099, 2104, 2109, 2151, 2130, 2139, 2142, 2157, 2164,
     2169, 2182, 2198, 2199, 2213, 2211, 2212, 2254, 2255, 2238,
     2264, 2257, 2271, 2339, 2394, 2395, 2396, 2401, 2406, 2440,
     2446, 2447, 2452, 2453, 2459, 2462, 2492, 2499, 2502, 2504,
     2509, 2511, 2548, 2549, 2551, 2563, 2561, 2558, 2596, 2603,
     2608, 2613, 2614, 2615, 2648, 2625, 2654, 2655, 2660, 2670,
     2703, 2700, 2681, 2740, 2715, 2718, 2729, 5651, 2741, 2767,

     2755, 2758, 2785, 2756, 2797, 2807, 2810, 2822, 2808, 2845,
     2852, 2859, 2862, 2878, 2897, 5651, 2909, 2908, 2915, 2918,
     2920, 2927, 2934, 5651, 5651,  175, 2985,  209, 2982, 2987,
     2985, 2992, 2994, 3001, 3032, 3038, 3039, 3069, 3048, 3057,
     3087, 3088, 3094, 5651, 3148, 3113, 3125, 3158, 3151, 3146,
     3164, 3169, 3198, 3203, 3265, 3272, 5651, 3210, 3215,  206,
      204,  190,  186,  184, 3340,    0, 3265, 3267, 3340, 3341,
     3342,  112, 3343, 3270, 3352, 3359, 3396, 3397, 3398, 3407,
     3408, 5651, 3409, 3419, 3452, 3449, 3467, 3458, 3483, 3492,
     3470, 3504, 3510, 3509, 3522, 3523, 3535, 3548, 3560, 3562,

     5651, 3569, 5651, 3591, 3575, 3600, 3609, 3612, 3621, 3631,
     3686, 3656, 3682, 3683, 3689, 3695, 3696, 3712, 3730, 3733,
     3749, 3735, 3742, 3752, 3782, 5651, 3787, 3789, 3799, 3800,
     3801, 3812, 3830, 3839, 3842, 5651, 3845, 3855, 3857, 3882,
      473,  532,  619,  276,  572,  214, 3860, 3894, 3895, 3912,
     3934, 3911, 3946, 3951, 3953, 4016, 1577, 3257, 4025,  746,
      824,  320, 3986, 4016, 4021, 4028, 4026, 4038,  158,  151,
     4047, 4072, 4077, 4103, 4098, 4112, 4117, 4115, 4146, 4133,
     4155, 5651, 4158, 4173, 4189, 4171, 4188, 4198, 4210, 4227,
     4228, 4229, 4254, 4241, 4243, 4266, 5651, 4280, 4287, 4338,

     4334, 4335, 4340, 4350, 4351, 4384, 4385, 4390, 4397, 4395,
     4400, 5651, 4434, 4435, 4440, 4446, 4452,  949,  192,  220,
      329,  348,  373,  381,  418,  446, 4483, 4486, 4493, 4492,
     4495,  510, 4558,  986,  541,  609,  627,  637,  708,  710,
      774,  795, 4535, 4554, 4556, 4566, 4568, 5651, 5651, 5651,
     4573, 4599, 4636, 4638, 4661, 1422, 1584,  902, 4618, 4639,
     4665, 4651, 4652, 4690, 4668, 4702, 4707, 4708, 4717, 4720,
     4729, 4754, 4755, 5651, 5651,  805, 4817, 4826, 4767, 4742,
     4822, 4823, 4824, 4829, 4834, 4863, 4875, 4864, 4874, 4876,
     4885,  911, 4886, 4897,  968, 4916, 4926, 4928, 4931, 1857,

     1000, 1181, 1270, 1298, 1327, 1376, 1514, 1543, 4937, 5651,
     4938, 4968, 4978, 4980, 4990, 4987, 4989, 5020, 5027, 5030,
     5092, 5041, 5088, 5089, 5090, 5095,  189, 5128, 5101, 5139,
     5140, 5141, 5150, 1657, 5162, 5180, 5155, 5157, 5192, 5197,
     5202, 5218, 1664, 5268, 5264, 5266, 5269,  205, 5271, 5278,
     5281, 5283, 5312, 5322, 5321, 5323, 5324, 5335, 5364, 5370,
     5373, 5380, 5386, 5415,  250, 5651,  326, 5424, 5429, 5431,
     5375, 5385, 5468, 5441, 5471,  311,  366,  394, 5442, 5482,
     5481, 5494, 5519, 5520, 5531, 5532, 5533, 5534, 5651, 5604,
      111, 5606, 5609, 5611, 5613, 5615, 5617, 5619, 5622, 5625,

     5627, 5629, 5631, 5633, 5635, 5637, 5639, 5641, 5644, 5647
    } ;

static const flex_int16_t yy_def[711] =
    {   0,
      689,    1,  689,  689,  689,  689,  690,  689,  689,  691,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  692,  692,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  689,  689,  689,  689,
      689,  689,  690,  689,  693,  689,  691,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  694,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,  695,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  112,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  689,  689,  689,  690,  690,  693,  689,  689,  689,
      689,  689,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  696,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  689,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  689,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  689,   29,   29,   29,   29,
       29,   29,   29,  689,  689,  697,  696,  689,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  689,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  698,   29,  689,   29,   29,  699,
      689,  699,  699,  699,  700,  254,   29,   29,   29,   29,
       29,  689,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  689,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

      689,   29,  689,   29,   29,   29,   29,   29,   29,   29,
      701,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  689,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  689,   29,   29,   29,   29,
      694,  694,  694,  694,  694,  694,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  702,  694,  694,  694,  694,
      694,  694,   29,   29,   29,   29,   29,   29,  689,  689,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  689,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  689,   29,   29,  703,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  689,   29,   29,   29,   29,   29,  694,  694,  694,
      694,  694,  694,  694,  694,  694,   29,   29,   29,   29,
       29,  704,  702,  694,  694,  694,  694,  694,  694,  694,
      694,  694,   29,   29,   29,   29,   29,  689,  689,  689,
       29,   29,  694,  694,  694,  694,  694,  694,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  689,  689,  705,  703,  706,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  694,   29,   29,  694,   29,   29,   29,   29,  694,

      694,  694,  694,  694,  694,  694,  694,  694,   29,  689,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      707,   29,   29,   29,   29,   29,  689,   29,   29,   29,
       29,   29,   29,  694,   29,   29,   29,   29,   29,   29,
       29,   29,  708,  707,   29,   29,   29,  709,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  709,  689,  710,   29,   29,   29,
       29,   29,   29,   29,   29,  709,  709,  710,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,    0,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689
    } ;

static const flex_int16_t yy_nxt[5738] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       33,   33,   35,   36,   37,   38,   39,   33,   40,   41,
       42,   43,   44,   45,   33,   46,   33,    4,    4,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   33,   33,
       35,   36,   37,   38,   39,   33,   40,   41,   42,   43,
       44,   45,   33,   46,   47,   48,   49,   54,   56,   56,
       63,   68,   69,   70,   61,   61,   61,   61,   61,   61,

       61,   61,   64,   50,   50,   50,   50,   50,   50,   50,
       50,   62,   65,   57,   66,   66,   66,   66,   66,   66,
       66,   66,   71,   72,  102,   77,  162,   54,   77,   77,
      469,  470,  103,   77,   53,  104,  166,  105,  106,   62,
       55,   56,   56,  163,  163,  163,  163,  163,  163,  163,
      163,   54,  102,   77,   56,   73,   77,   77,   74,   75,
      103,   77,  550,  104,   73,  105,  106,   74,   75,  549,
       76,   76,   76,   76,   76,   76,   76,   76,   73,   54,
       55,  324,  325,   77,   78,   79,  361,  107,  361,  167,
      627,   77,  361,  648,  108,   73,   80,  109,   74,   75,

      110,   81,   82,   53,   55,  166,  361,   56,  361,  666,
       76,   77,   78,   79,  426,  107,  172,   73,  171,   77,
       74,   75,  108,   73,   80,  109,   74,   75,  110,   81,
       82,   73,   55,   67,   74,   75,   65,  526,  164,  164,
      164,  164,  164,  164,  164,  164,   76,   76,   76,   76,
       76,   76,   76,   76,  666,  170,   77,   52,  167,   83,
       77,  111,  667,   51,   77,   84,   67,  113,   60,  112,
       85,  114,   59,   58,   86,  115,   87,   52,   51,   73,
      116,  117,   74,   75,   77,  689,   76,   83,   77,  111,
      689,  689,   77,   84,  524,  113,  689,  112,   85,  114,

      689,  689,   86,  115,   87,   88,  689,  667,  116,  117,
      118,   77,   89,   90,   77,  666,   91,   77,  119,   92,
       77,  121,   93,   73,  120,   77,   74,   75,  665,   94,
      677,  122,   73,   88,  689,   74,   75,  689,  118,   77,
       89,   90,   77,  542,   91,   77,  119,   92,   77,  121,
       93,   73,  120,   77,   74,   75,  689,   94,   95,  122,
      689,  689,   96,  157,   77,  689,   97,  158,  667,   77,
      666,   77,  689,   77,  689,   77,   73,   77,  689,   74,
       75,  161,  689,  678,   73,   77,   95,   74,   75,  689,
       96,  157,   77,  689,   97,  158,  665,   77,  677,   77,

      689,   77,  689,   77,   77,   77,  134,  689,   77,  161,
      135,  689,   77,   77,  136,   98,  689,   99,  100,  137,
      138,   73,   77,  667,   74,   75,   77,  101,  689,  689,
       77,  689,   77,  689,  134,  156,   77,  689,  135,  689,
       77,  689,  136,   98,  689,   99,  100,  137,  138,   73,
       77,  678,   74,   75,   77,  101,   77,  123,   77,  689,
       77,  124,   77,  156,   77,  689,   77,  689,  689,  159,
      160,  125,  689,  126,  127,  128,   73,  689,   77,   74,
       75,  689,   77,  689,   77,  123,   77,  689,   77,  124,
       77,  518,   77,  689,   77,  689,  519,  159,  160,  125,

      689,  126,  127,  128,   77,  689,   77,  689,   77,  689,
       77,  689,  129,   73,   77,  130,   74,   75,  131,  689,
      689,  132,  689,  133,   61,   61,   61,   61,   61,   61,
       61,   61,   77,  689,  689,   73,   77,  689,   74,   75,
      129,   62,  689,  130,   73,  689,  131,   74,   75,  132,
      520,  133,   77,  689,  139,  521,  140,   77,  141,  142,
      143,   77,  689,  689,  689,   77,  144,  145,  146,   62,
      178,  147,  689,   77,  148,   73,  689,   77,   74,   75,
       77,   77,  139,  689,  140,   77,  141,  142,  143,   77,
      525,  173,  689,   77,  144,  145,  146,  689,  178,  147,

       77,   77,  148,  149,   77,   77,  689,  150,   77,   77,
      151,  152,   73,  689,  689,   74,   75,  153,  174,  173,
      154,  689,   73,  689,  689,   74,   75,  155,   77,  689,
       73,  149,   77,   74,   75,  150,   77,  522,  151,  152,
       73,  689,  523,   74,   75,  153,  174,  689,  154,  689,
      689,  168,  689,  168,  689,  155,  169,  169,  169,  169,
      169,  169,  169,  169,   61,   61,   61,   61,   61,   61,
       61,   61,  163,  163,  163,  163,  163,  163,  163,  163,
       65,   62,   66,   66,   66,   66,   66,   66,   66,   66,
       77,  689,   77,  175,   77,   77,   77,  176,   77,   77,

       77,  689,   77,   77,  689,  179,  180,  689,  177,   62,
       77,   73,  689,   73,   74,   75,   74,   75,   77,  689,
       77,  175,   77,   77,   77,  176,   77,   77,   77,  689,
       77,   77,  689,  179,  180,  181,  177,   77,   77,   77,
       77,   77,   77,   77,  184,   77,   77,  689,   77,   73,
       77,  689,   74,   75,  689,  182,  689,  183,  186,  689,
      185,  689,   77,  181,  540,   77,   77,   77,   77,   77,
       77,   77,  184,   77,   77,  187,   77,   73,   77,  689,
       74,   75,  689,  182,  689,  183,  186,   77,  185,   77,
       77,   77,   77,  194,   77,   77,   77,   77,   73,  689,

      189,   74,   75,  187,  188,  195,  190,  689,   73,   77,
      191,  574,  575,   77,  689,   77,  689,   77,   77,   77,
       77,  194,   77,   77,   77,   77,   77,   73,  189,  192,
       74,   75,  188,  195,  190,  689,  193,   77,  191,   77,
      689,   77,  541,   77,   77,   77,   77,   77,   77,   77,
       77,  689,   77,   77,   77,   77,  200,  192,  196,   77,
      197,  198,  214,   77,  193,  201,  199,   77,  689,  689,
      689,   77,   77,   77,   77,   77,   77,   77,   77,  689,
       77,   77,   77,   77,  200,  689,  196,   77,  197,  198,
      214,   77,  202,  201,  199,   77,   77,  689,  203,   77,

       77,  204,   77,   77,   77,   73,   77,   77,   74,   75,
       77,   77,  689,  205,   73,   77,  689,   74,   75,  689,
      202,  689,  206,   77,   77,  608,  203,   77,   77,  204,
      689,   77,   77,  689,   77,   77,  207,  689,   77,   77,
       77,  205,   77,   77,  209,  208,  689,  689,   77,   77,
      206,  210,   73,   77,  689,   74,   75,  211,  689,  689,
      689,  689,   77,  212,  207,  689,   77,  592,   77,  689,
       77,   73,  209,  208,   74,   75,   77,   77,  689,  210,
       73,   77,  689,   74,   75,  211,   77,  689,  689,   73,
       77,  212,   74,   75,   77,   76,   76,   76,   76,   76,

       76,   76,   76,   73,  595,  215,   74,   75,   77,   77,
      689,  219,   77,   77,   77,  220,   77,   77,   77,   77,
       77,  689,   77,  216,   77,  689,  217,  218,   77,  689,
      689,  689,  689,  215,  689,   76,   77,   77,  689,  219,
       77,   77,   77,  220,   77,   77,   77,   77,   77,  689,
       77,  216,   77,  689,  217,  218,   77,   77,   77,  689,
      225,   77,   77,  226,  689,   77,   77,  221,  689,  689,
       77,  227,  222,  689,   77,  223,  224,  228,   77,   77,
      689,  689,  689,   77,  689,   77,   77,   77,  225,   77,
       77,  226,  229,   77,   77,  221,  689,  230,   77,  227,

      222,  689,   77,  223,  224,  228,   77,   77,  231,  689,
      232,   77,   77,   77,  233,   77,   77,   77,  689,  234,
      229,   77,  689,  689,   77,  230,   77,  235,   77,  689,
       77,  689,   77,  689,   77,  689,  231,  689,  232,  689,
       77,   77,  233,  689,   77,   77,  689,  234,  689,   77,
       77,  689,   77,  236,   77,  235,   77,   77,   77,  689,
       77,   77,  689,  237,   77,   77,  689,   77,   77,   77,
      238,   77,   77,   77,  689,   77,  241,   77,   77,  689,
      239,  236,   77,  240,   73,   77,   77,   74,   75,   77,
      689,  237,   77,   77,  689,   77,   77,   77,  238,   77,

       77,   77,   77,   77,  241,   77,  242,  689,  239,   77,
       77,  240,   77,   77,  243,   77,   77,   77,  689,   77,
       77,   77,  244,   77,  689,   77,  689,   77,  689,   77,
       77,   77,  689,  689,  242,  246,  689,   77,   77,  689,
       77,   77,  243,   77,   77,   77,  689,   77,   77,   77,
      244,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  247,  246,  689,   77,  245,   77,  248,   77,
      250,   77,  689,   73,  689,   77,   74,   75,  249,  689,
       77,  689,   77,  689,   77,  689,   77,  689,   77,   77,
      247,  689,  689,   77,  245,   77,  248,   77,  250,   77,

      689,   73,  689,   77,   74,   75,  249,  251,   77,  252,
      253,  689,   77,  689,  259,  689,   77,   77,  689,  254,
      255,  689,  256,  689,   77,  257,  258,  260,   77,  689,
       73,  689,   77,   74,   75,  251,   77,  252,  253,  689,
       77,  689,  259,  689,   77,   77,  689,  254,  255,  689,
      256,  689,   77,  257,  258,  260,   77,   77,  262,  689,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  689,
      266,   77,   77,  689,   77,  263,  261,  265,   77,   73,
      264,  689,   74,   75,  267,   77,  262,  689,  689,   77,
       77,   77,   77,   77,   77,   77,   77,  689,  266,   77,

       77,  689,   77,  263,  261,  265,   77,   77,  264,  274,
       77,   77,  267,   77,   77,   77,  689,   77,   77,   77,
      268,  269,   77,   77,  270,   73,   77,   77,   74,   75,
       77,  689,  689,  689,  689,   77,  271,  274,   77,   77,
      606,   77,   77,   77,  689,   77,   77,   77,  268,  269,
       77,   77,  270,   77,   77,   77,  689,  272,   77,   77,
      689,   77,  689,   77,  271,   77,  689,   77,  689,   77,
      273,   77,  275,   77,   77,  277,   77,  689,   77,   77,
       77,   77,   77,  689,   77,  272,  278,   77,  276,   77,
      689,   77,  689,   77,  689,   77,  689,   77,  273,   77,

      275,   77,   77,  277,   77,  279,   77,   77,   77,   77,
       77,   77,   77,  280,  278,   77,  276,   73,  689,   77,
       74,   75,  689,   77,   77,  281,  282,   77,   77,  689,
       77,   77,   77,  279,  286,  284,  689,   77,  287,   77,
       77,  280,  283,   77,   77,  689,   73,   77,   77,   74,
       75,   77,   77,  281,  282,   77,   77,  285,   77,   77,
       77,   77,  286,  284,  689,   77,  287,  689,   77,   77,
      283,   77,   77,   77,  689,   77,   77,   77,  288,   77,
       73,   77,  289,   74,   75,  285,  689,   73,  689,   77,
       74,   75,  689,   77,  162,  534,  689,   77,  689,   77,

      535,   77,  607,   77,  689,   77,  288,   77,  689,   77,
      289,  163,  163,  163,  163,  163,  163,  163,  163,   65,
      689,  164,  164,  164,  164,  164,  164,  164,  164,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  689,
       73,   77,   77,   74,   75,   77,   77,   73,  290,  689,
       74,   75,  689,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,   77,  290,   77,  689,  292,

       77,   77,  689,   77,  293,   77,  291,   77,   77,  295,
       77,   77,   77,   77,  296,   77,   77,   77,   77,   77,
      297,  689,  294,   77,  298,   77,  689,  292,   77,   77,
      689,   77,  293,   77,  291,   77,   77,  295,   77,   77,
       77,   77,  296,   77,   77,   77,   77,   77,  297,   77,
      294,   77,   77,   77,  299,   77,   77,   77,  300,   77,
       77,   77,   77,   77,   77,   77,   77,  689,   77,   77,
       77,   77,   77,  301,  689,   77,  302,   77,  689,   77,
       77,   77,  299,   77,   77,   77,  300,   77,   77,   77,
       77,   77,   77,   77,   77,  303,   77,   77,   77,   77,

       77,  301,   77,   77,  302,  305,   77,  689,   77,   77,
       77,  689,   77,   77,   77,  304,   77,   77,   77,  306,
       77,  308,   77,  303,   77,   77,  689,   77,   77,  307,
       77,   77,  689,  305,   77,  689,   77,   77,   77,  689,
       77,   77,   77,  304,   77,   77,   77,  306,   77,  308,
       77,   77,   77,   77,   77,   77,   77,  307,  309,   77,
       73,  689,   77,   74,   75,  689,  689,  689,  316,   77,
      689,  689,   77,   77,  689,  634,  317,   77,  689,   77,
       77,  689,   77,   77,   77,  689,  309,   77,  318,  689,
       77,   77,   77,  310,   77,   77,  311,   77,   77,  312,

       77,   77,   77,  689,  317,   77,  313,   77,   77,  689,
      314,   77,   77,  315,  689,   77,  318,  689,  689,   77,
       77,  310,   77,   77,  311,  319,   77,  312,  323,   77,
       77,  689,   77,   77,  313,   77,   77,   77,  314,   77,
      320,  315,   77,   77,   77,  689,   77,  689,   77,  689,
       77,  689,   77,  319,   77,  321,  323,   77,   77,  689,
       77,   77,   77,  689,   77,   77,  689,  689,  320,  322,
       77,  689,   77,  689,   77,  689,   77,  689,   77,  689,
       77,  689,   77,  321,   73,  328,   77,  324,  325,  689,
       77,  689,  689,  689,  689,  689,  689,  322,  689,  326,

      326,  326,  326,  326,  326,  326,  326,  689,   77,  329,
       77,  689,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  689,  333,  689,   77,  331,
       77,  689,  689,  330,  689,  332,   77,  329,   77,  326,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  689,  333,  689,   77,  331,   77,  689,
       77,  330,   77,  332,  334,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  689,   77,   77,  689,  689,   77,
       77,  689,  335,   77,  336,  689,  689,   77,   77,  689,
       77,  337,  334,   77,   77,   77,   77,   77,   77,   77,

       77,   77,  689,   77,   77,   77,  689,   77,   77,   77,
      335,   77,  336,   77,   77,   77,  689,   77,   77,  337,
      689,  339,   77,   77,  338,   77,  341,   77,   77,  689,
      342,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  343,   77,   77,  340,   77,  339,
       77,   77,  338,   77,  341,   77,   77,  344,  342,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  343,   77,   77,  340,   77,   77,   77,  689,
      689,   77,   77,  689,  345,  689,   77,  689,   77,   77,
       77,  346,   77,   77,  689,   77,   77,   77,   77,   77,

       77,   77,   77,   77,  348,   77,   77,  347,   77,   77,
       77,  689,  345,   77,   77,  689,   77,   77,   77,  346,
       77,   77,  689,   77,   77,  689,  349,   77,   77,   77,
       77,   77,  348,   77,  351,  347,   77,   77,   77,  689,
      350,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  689,  349,  353,  354,   77,   77,  689,
      357,   77,  351,  352,  689,   77,   77,  689,  350,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  689,  689,  353,  354,   77,   77,  355,   77,   77,
       77,  352,   77,   77,   77,   77,   77,   77,  358,   77,

      356,   77,   77,   77,  689,   77,   77,  359,  689,  689,
       77,  689,  689,   77,   77,  355,   77,   77,   77,  689,
       77,   77,   77,   77,   77,  689,  358,   77,  356,  689,
       77,   77,  689,  689,   77,  359,  689,  689,   77,  360,
      360,  361,  362,  360,  360,  363,  364,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  365,  365,  365,
      365,  365,  365,  365,  365,  360,  360,  360,  360,  360,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  360,  365,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  360,  360,   77,   77,   77,  367,   77,
      368,   77,   77,   77,   77,   77,   77,   77,  689,  689,
       77,   77,  689,  689,  371,   77,  369,  689,  689,  689,
      372,  689,  370,   77,   77,   77,  367,   77,  368,   77,
       77,   77,   77,   77,   77,   77,  689,  689,   77,   77,
      689,   77,  371,   77,  369,   77,  689,  373,   77,   77,
      370,   77,   77,   77,   77,   77,   77,  375,   77,  374,
       77,   77,  376,   77,   77,  689,  377,   77,   77,   77,

      689,   77,  689,   77,  689,  373,   77,   77,  378,   77,
       77,   77,   77,   77,   77,  375,   77,  374,   77,   77,
      376,   77,   77,   77,  377,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,   77,  378,   77,   77,   77,
       77,  380,   77,   77,   77,  379,   77,  689,   77,  689,
       77,   77,  689,  689,  382,   77,  689,  381,   77,   77,
      689,   77,   77,   77,  689,   77,   77,   77,   77,  380,
       77,   77,   77,  379,   77,  689,   77,  689,   77,   77,
       77,  689,   77,   77,   77,  381,   77,  383,   77,   77,
       77,  689,   77,  387,   77,  384,   77,   77,   77,  689,

       77,  689,   77,  689,  689,  386,  689,   77,   77,  689,
       77,   77,   77,  385,   77,  383,   77,   77,   77,  689,
       77,  387,   77,  384,   77,   77,   77,   77,   77,  388,
       77,   77,  689,  386,  390,   77,  689,  689,   77,   77,
      389,  385,   77,  391,   77,   77,   77,   77,  392,   77,
       77,  689,   77,  393,   77,   77,   77,  388,  689,   77,
       77,  689,  390,   77,   77,  689,   77,   77,  389,  395,
       77,  391,   77,   77,   77,   77,  392,   77,   77,   77,
       77,  393,   77,   77,   77,   77,   77,   77,   77,   77,
      398,   77,   77,   77,   77,   77,  396,  395,  394,   77,

      689,   77,  399,  689,  397,  400,  689,   77,  401,   77,
      689,   77,   77,   77,   77,   77,   77,   77,  398,   77,
       77,   77,   77,   77,  396,  689,  394,   77,  689,   77,
      399,   77,  397,  400,   77,   77,  689,   77,   77,   77,
       77,  402,   77,  689,   77,  403,   77,  689,   77,   77,
       77,  689,  689,   77,   77,  689,  404,   77,  689,   77,
       77,  689,   77,   77,   77,  689,   77,   77,   77,  402,
       77,   77,   77,  405,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  406,  404,   77,   77,   77,   77,   77,
      408,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,  405,   77,   77,   77,  689,   77,   77,   77,  409,
      689,  406,  407,  689,   77,   77,   77,   77,  408,   77,
       77,   77,   77,   77,   77,   77,   77,  689,   77,  689,
       77,  689,   77,  689,   77,  410,   77,  409,   77,   77,
      407,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      689,  411,   77,   77,  689,  689,   77,   77,  412,  689,
       77,   77,  689,  410,   77,  689,   77,   77,  689,   77,
       77,   77,  413,   77,   77,   77,  414,   77,  689,  411,
       77,   77,  689,   77,   77,   77,  412,   77,  689,   77,
       77,   77,  689,   77,   77,  417,  415,   77,   77,  689,

      413,   77,  689,  416,  414,  689,  689,  689,   77,   77,
      418,   77,   77,   77,  689,   77,  689,   77,   77,   77,
      689,   77,   77,  417,  415,   77,   77,  689,   77,   77,
      689,  416,   77,  419,  689,  420,   77,   77,  418,   77,
       77,   77,  421,   77,   77,   77,   77,   77,   77,   77,
      422,   77,  423,   77,   77,  424,   77,   77,   77,   77,
       77,  419,   77,  420,   77,   77,   77,   77,   77,   77,
      421,   77,   77,   77,   77,   77,   77,   77,  422,   77,
      423,   77,   77,  424,  425,   77,   77,   77,   73,  689,
       77,  324,  325,   77,   77,  689,  689,   77,  689,  689,

      689,   77,  689,  326,  326,  326,  326,  326,  326,  326,
      326,  689,  425,  427,  689,  689,   77,   77,   77,  428,
       77,   77,   77,   77,   77,   77,   77,   77,  689,   77,
      429,   77,   77,   77,  689,  689,   77,  689,  430,  689,
       77,  427,  689,  326,   77,   77,   77,  428,   77,   77,
       77,   77,   77,   77,   77,   77,  431,   77,  429,   77,
       77,   77,  689,   77,   77,  689,  430,   77,   77,  433,
       77,   77,  689,   77,   77,  436,  689,   77,   77,   77,
      689,  689,  432,   77,  431,  435,  434,   77,   77,  689,
      689,   77,   77,  437,  689,   77,   77,  433,   77,   77,

       77,   77,   77,  689,   77,   77,   77,   77,   77,  689,
      432,   77,  689,  435,  434,   77,   77,  689,   77,   77,
       77,  437,   77,   77,   77,   77,   77,   77,   77,   77,
      439,  689,   77,   77,  689,  689,   77,  438,  440,  689,
      689,  689,  689,  689,   77,  689,   77,   77,  447,  689,
       77,   77,   77,   77,   77,   77,   77,   77,  439,  689,
       77,   77,  689,  689,   77,  438,  440,  441,  442,  443,
      444,  445,   77,  446,  689,  689,  447,   77,  689,   77,
       77,   77,   77,   77,   77,  452,   77,   77,   77,   77,
      449,  448,   77,   77,  689,   77,  450,   77,  689,   77,

       77,  689,  451,   77,   77,   77,  689,   77,   77,   77,
       77,   77,  453,  452,   77,   77,  689,   77,  449,  448,
      689,   77,  689,   77,  450,   77,  689,   77,   77,   77,
      451,   77,   77,   77,   77,  689,   77,   77,   77,  689,
      453,   77,   77,  689,  689,   77,  463,  689,  454,   77,
       77,  689,  689,  455,   77,  689,  689,   77,  689,  689,
       73,   77,   77,   74,   75,   77,   77,  689,   73,   77,
       77,   74,   75,   77,  463,  536,  454,   77,   77,  689,
      537,  455,   77,   76,   76,   76,   76,   76,   76,   76,
       76,  457,  458,  459,  460,  461,   77,  462,  465,  689,

      464,   77,   77,   77,   77,  472,   77,   77,  689,   77,
      689,   77,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,   76,   77,  689,  465,  689,  464,   77,
       77,   77,   77,  472,   77,   77,  689,   77,  689,   77,
      360,  360,  361,  362,  360,  360,  363,  364,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  689,  689,
      689,  689,  689,  689,  689,  689,  360,  360,  360,  360,
      360,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  689,  466,  689,  473,  689,  467,
       77,   77,  468,  471,   77,  474,  689,  360,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  689,  466,  689,  473,  689,  467,   77,   77,
      468,  471,   77,  474,  360,  360,   77,   77,   77,   77,
      689,  475,  476,   77,  477,   77,   77,   77,   77,   77,
       77,  478,   77,   77,   77,  689,   77,   77,   77,  689,
       77,  689,  689,  479,   77,   77,   77,   77,   77,  475,
      476,   77,  477,   77,   77,   77,   77,   77,   77,  478,
       77,   77,   77,  482,   77,   77,   77,  689,   77,  689,
       77,  479,   77,   77,   77,  480,   77,   77,   77,   77,
      689,   77,  689,  483,  689,  689,  689,   77,   77,  689,

      481,   77,   77,  689,  689,   77,   77,  689,   77,   77,
      689,   77,   77,  480,   77,   77,   77,   77,   77,   77,
      689,  483,   77,   77,  689,   77,   77,   77,  481,   77,
       77,   77,  484,   77,   77,   77,  485,   77,  689,   77,
       77,   77,   77,   77,  487,   77,   77,  689,   77,   77,
       77,   77,  486,   77,   77,   77,  689,   77,  488,   77,
      484,   77,   77,   77,  485,  689,   77,   77,   77,   77,
      489,   77,  487,   77,   77,  689,   77,   77,  689,   77,
      486,   77,   77,   77,  490,   77,  488,   77,  689,   77,
       77,   77,  689,   77,   77,   77,  492,   77,  489,   77,

       77,   77,   77,  689,   77,  491,   77,   77,   77,  689,
       77,   77,  490,  689,   77,   77,  689,  497,  689,   77,
      689,   77,   77,   77,  492,   77,   77,   77,   77,   77,
       77,   77,   77,  491,   77,  494,   77,  493,   77,   77,
       77,  689,   77,   77,   77,  495,  689,   77,   77,  689,
       77,   77,   77,  496,   77,  689,   77,  689,   77,   77,
       77,  689,   77,  494,  689,  493,  499,   77,   77,  498,
       77,   77,   77,  495,  689,   77,   77,  689,  689,   77,
       77,  496,  689,  689,   77,  689,  689,   77,   77,   73,
       77,   77,   74,   75,  499,   77,  689,  498,   77,  689,

      689,  501,  689,  689,   76,   76,   76,   76,   76,   76,
       76,   76,  689,   77,   77,   77,  689,  502,   77,   77,
       77,   77,   77,   77,   77,  689,   77,   77,   77,  501,
       77,   77,  503,  689,   77,   77,  689,  689,  689,  504,
      689,   77,   77,   77,   76,  502,   77,   77,   77,   77,
       77,   77,   77,  689,   77,   77,   77,  505,   77,   77,
      503,   77,   77,   77,   77,   77,   77,  504,   77,   77,
       77,   77,  507,   77,   77,   77,  506,   77,  689,   77,
       77,   77,  689,   77,   77,  505,  509,   77,   77,   77,
      689,   77,   77,   77,   77,  689,   77,   77,   77,  508,

      507,   77,   77,  689,  506,   77,  689,  512,   77,   77,
      689,   77,   77,   77,  509,   77,   77,   77,   77,   77,
       77,   77,   77,  689,   77,  689,   77,  508,   77,  510,
       77,   77,   77,  689,   77,   77,   77,  689,  511,   77,
       77,   77,  689,   77,  689,   77,   77,   77,   77,   77,
       77,   77,   77,  689,   77,  689,   77,  510,   77,   77,
       77,   77,   77,   77,   77,   77,  511,   77,   77,   77,
       77,   77,  513,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  689,  689,  515,  689,   77,  514,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

      513,   77,   77,  689,   77,   77,   77,  689,   77,   77,
      516,  689,  515,   77,   77,  514,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  689,   77,
       77,  689,  517,   77,   77,  689,  689,  689,  516,  528,
      689,   77,   77,   77,  527,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,  689,  689,   77,   77,  689,
      517,   77,   77,  529,  689,   77,  689,  528,  689,   77,
       77,   77,  527,   77,   77,   77,  689,   77,   77,   77,
      530,   77,   77,  689,   77,   77,   77,  689,   77,  689,
       77,  529,   77,   77,  689,  689,  689,   77,  689,  531,

      689,   77,  689,  689,  689,   77,  689,  689,  530,   77,
       77,  689,   77,   77,   77,  689,   77,   77,   77,   73,
       77,   77,   74,   75,  689,   77,  689,  531,   73,  689,
      543,   74,   75,  689,  532,  532,  532,  532,  532,  532,
      532,  532,  689,  538,  548,   77,  689,   77,  539,   77,
      689,   77,   77,   77,  689,   77,   77,   77,  543,   77,
       77,   77,  689,   77,  544,   77,  689,   77,  689,   77,
      547,  545,  689,   77,  532,   77,  546,   77,   77,   77,
       77,  689,  551,   77,   77,   77,   77,   77,   77,   77,
      689,   77,  544,   77,  689,   77,  689,   77,  547,  545,

      689,   77,  689,   77,  546,   77,   77,   77,   77,  689,
      551,   77,   77,  689,   77,  689,   77,  689,  689,  689,
      689,  552,  553,  554,  555,  556,  557,  689,  558,   77,
      689,   77,  559,   77,   77,   77,   77,   77,   77,   77,
       77,  689,   77,   77,   77,  689,   77,   77,   77,  552,
       77,   77,   77,  689,   77,  689,   77,   77,  689,  689,
      559,   77,   77,  560,   77,   77,   77,  689,  562,  689,
       77,   77,   77,  689,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  561,   77,   77,   77,  689,  689,   77,
       77,  560,   77,   77,  563,  689,  562,   77,  689,  689,

       77,  689,   77,  564,   77,   77,   77,  689,   77,   77,
       77,  561,   77,   77,   77,  565,  689,   77,   77,   77,
       77,   77,  563,   77,   77,   77,  566,   77,   77,   77,
       77,  564,   77,   77,   77,  689,   77,   77,   77,  689,
       77,   77,  567,  565,  689,   77,  689,   77,   77,   77,
      689,   77,   77,  689,  566,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      567,  689,   77,   77,   77,  568,   77,   77,   77,  571,
       77,  569,   77,  689,  689,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  689,  570,

       77,   77,   77,  568,   77,   77,   77,  571,   77,  569,
       77,   77,  572,   77,  689,   77,  689,   77,   77,   77,
      689,   77,   77,  573,  689,   77,   77,  570,  689,   77,
      689,  689,  689,   77,  689,  689,  689,  689,  689,   77,
      572,   73,  689,   77,  574,  575,   77,   77,  689,  689,
       77,  573,  689,  689,   77,  689,  576,  576,  576,  576,
      576,  576,  576,  576,  689,   77,   77,  578,  689,   77,
       77,   77,  689,   77,   77,  580,  689,  689,  689,   77,
      579,   77,   77,  581,  582,   77,   77,  689,  689,   77,
       77,  689,  689,   77,   77,  578,  576,   77,   77,   77,

      689,   77,   77,  580,  689,  689,  689,   77,  579,   77,
       77,  581,  582,   77,   77,   77,   77,   77,   77,  583,
       77,   77,  689,   77,   77,   77,   77,  584,   77,   77,
       77,   77,   77,  586,   77,   77,   77,  689,  689,   77,
      689,  689,  689,   77,   77,  689,  689,  583,   77,   77,
      585,   77,   77,   77,   77,  584,   77,   77,   77,   77,
       77,  586,   77,   77,   77,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,   77,  587,   77,  585,   77,
      689,   77,  589,  591,  588,   77,  689,   77,  689,  689,
      689,   77,  590,   77,   77,  689,  689,   77,   77,   77,

      689,   77,   77,   77,  587,   77,  689,   77,  689,   77,
      589,  591,  588,   77,   77,   77,  689,   77,   77,   77,
      590,   77,   77,   77,   77,   77,   77,   77,   77,  689,
       77,   77,   77,  689,  594,  689,  689,  689,  689,  689,
      689,  689,   77,  593,  689,   77,   77,  689,  689,   77,
       77,   77,   77,   77,   77,   77,   77,  689,   77,   77,
       77,   73,  594,  689,   74,   75,   77,  689,  689,  689,
       77,  593,  596,  689,   77,  689,  532,  532,  532,  532,
      532,  532,  532,  532,  689,   77,  689,   77,  689,   77,
      689,   77,  689,   77,   77,   77,  689,   77,   77,   77,

      596,  597,   77,   77,   77,   77,  689,   77,   77,  689,
      689,  689,   77,   77,  689,   77,  532,   77,  689,   77,
      689,   77,  689,   77,  689,   77,  689,   77,  689,  597,
       77,   77,   77,   77,   77,   77,   77,  598,   77,   73,
       77,   73,   74,   75,   74,   75,  689,  689,  689,   77,
      689,  689,  599,   77,  600,  689,  602,   77,   77,  601,
      689,  603,   77,  689,   73,  598,   77,   74,   75,  689,
       77,  610,  689,  689,   77,  689,  689,   77,   77,  604,
      599,   77,   77,   77,  605,   77,   77,   77,  609,  612,
       77,   77,  689,  689,  689,  611,   77,  689,   77,  615,

       77,  689,   77,   77,   77,  689,   77,   77,  689,  689,
       77,   77,  689,  689,   77,   77,  609,  612,   77,   77,
      689,   77,  689,  611,   77,   77,  613,  615,   77,   77,
      689,   77,   77,   77,  614,   77,  689,   77,   77,  617,
      689,   77,   77,   77,  616,  689,   77,   77,   77,   77,
      689,   77,   77,   77,  613,   77,   77,   77,  689,  618,
       77,   77,  614,  689,   77,   77,   77,  617,   77,   77,
       77,   77,  616,   77,   77,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,   77,   77,  618,   77,   77,
       77,  619,   77,   77,   77,  689,   77,  689,   77,  622,

      620,   77,   77,  689,  689,   77,   77,  689,  689,   77,
      689,  689,  689,   77,   77,  689,  689,   77,   77,  619,
       73,   77,   77,  574,  575,  689,   77,  622,  620,   73,
       77,  689,   74,   75,   77,  576,  576,  576,  576,  576,
      576,  576,  576,  689,   76,   76,   76,   76,   76,   76,
       76,   76,  689,   77,   77,   77,  689,   77,   77,   77,
       77,   77,   77,   77,  624,   77,  689,  689,   77,   77,
      689,  689,  623,  625,  689,  576,  627,  689,  689,  689,
      689,   77,   77,   77,   76,   77,   77,   77,   77,   77,
       77,   77,  624,   77,   77,   77,   77,   77,   77,   77,

      623,  625,   77,   77,  689,   77,   77,   77,  689,  628,
       77,  629,  626,   77,   77,   77,   77,   77,  689,  689,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  689,
       77,   77,   77,   77,   77,   77,   77,  628,   77,  629,
      626,   77,   77,   77,   77,   77,  630,   77,   77,   77,
      689,   77,   77,   77,  689,   77,   77,   77,  631,   77,
       77,   77,   77,  632,   77,   77,   77,   77,   77,   77,
      633,  689,   77,   77,  630,   77,   77,   77,  689,   77,
      689,  689,  689,   77,  689,   77,  631,   77,  635,   77,
       77,  632,  689,   77,   77,   77,   77,   77,  633,   77,

       77,   77,  689,   77,   77,   77,  636,   77,  689,   77,
      689,   77,  689,   77,  637,   77,  635,   77,   77,   77,
       77,   77,  639,  689,   77,   77,   77,   77,   77,   77,
      689,   77,  640,  689,  636,   77,  689,   77,  689,   77,
      638,   77,  637,   77,  689,   77,   77,   77,   77,   77,
      639,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      640,   77,   77,  689,  641,   77,   77,  689,  638,   77,
      689,  689,   77,  689,  642,  689,   77,  689,  689,   77,
       77,  645,  689,   77,  689,  689,   77,   77,  689,   77,
       77,  689,  641,   77,   77,   73,  689,   77,   74,   75,

       77,  689,  642,  689,   77,  689,  689,  689,   77,  645,
      643,  643,  643,  643,  643,  643,  643,  643,  689,   77,
       77,   77,  689,   77,   77,   77,   77,  646,   77,   77,
       77,  689,   77,  689,   77,  689,   77,  650,  647,  689,
       77,  689,  689,  689,  689,  689,  689,   77,   77,   77,
      643,   77,   77,   77,   77,  646,   77,   77,   77,   77,
       77,  689,   77,   77,   77,  650,  647,   77,   77,  689,
       77,   77,   77,  689,  651,  652,   77,  649,   77,   77,
      653,   77,  689,  689,  654,   77,   77,   77,   77,   77,
       77,   77,  658,   77,   77,   77,   77,  655,   77,   77,

       77,   77,  651,  652,   77,  649,   77,   77,  653,   77,
      656,   77,  654,   77,   77,   77,   77,   77,   77,   77,
      658,   77,   77,   77,   77,  655,  689,   77,   77,   77,
      657,   77,  659,   77,  689,  689,   77,   77,  656,   77,
      689,   77,  689,   77,  689,  689,  689,   77,  689,   77,
      689,   77,  660,   77,  689,   77,   77,   77,  657,   77,
      659,   77,  689,  689,   77,   77,  689,  689,  661,   77,
      689,   73,  689,  689,   74,   75,  689,   77,  689,  689,
      660,   77,  689,  689,  689,   77,  643,  643,  643,  643,
      643,  643,  643,  643,  689,   77,  661,   77,  689,  662,

       77,   77,   77,   77,  664,   77,   77,  689,   77,  668,
       77,  663,   77,   77,   77,  689,   77,   77,   77,  689,
       77,  689,   77,   77,  689,   77,  643,  662,   77,   77,
       77,   77,  664,   77,   77,  689,   77,  668,   77,  663,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  669,
       77,   77,   77,   77,   77,   77,   77,   77,  672,   77,
       77,   77,   77,   77,  689,  689,   77,  689,  689,  671,
       77,   77,  670,  689,   77,   77,  689,  669,  689,   77,
       77,   77,   77,   77,   77,   77,  672,   77,   77,   77,
       77,   77,  689,  689,   77,   77,  689,  671,   77,   77,

      670,   77,   77,   77,   77,   77,   77,  689,   77,   77,
       77,   77,   77,  673,   77,   77,   77,   77,  689,   77,
       77,   77,  689,   77,   77,   77,  689,   77,  689,   77,
      674,   77,   77,   77,   77,  689,   77,   77,   77,   77,
       77,  673,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  675,   77,   77,   77,   77,  689,  679,  674,   77,
       77,  689,   77,   77,   77,  689,   77,  680,   77,  681,
       77,  689,   77,   77,   77,  689,   77,  684,   77,  675,
       77,   77,   77,   77,  689,  679,  689,   77,   77,  689,
       77,   77,   77,  689,   77,  680,   77,  681,   77,   77,

       77,   77,   77,   77,   77,  684,   77,   77,   77,   77,
       77,  689,   77,   77,  689,  689,   77,   77,  682,  683,
       77,   77,  689,  689,  689,   77,  689,   77,  689,   77,
       77,   77,  685,   77,   77,   77,  689,  689,   77,  689,
       77,   77,  689,  689,   77,   77,  682,  683,   77,   77,
      686,   77,  689,   77,   77,   77,  689,   77,   77,   77,
      685,   77,   77,   77,   77,   77,   77,   77,  688,   77,
       77,   77,   77,   77,  689,  687,  689,  689,  686,   77,
      689,  689,   77,   77,  689,  689,   77,   77,  689,  689,
       77,   77,   77,   77,   77,   77,  688,   77,   77,   77,

       77,   77,  689,  687,   53,   53,   53,   77,   77,  165,
      165,  165,   76,   76,  213,  213,  327,  327,  326,  326,
      456,  456,  360,  360,  360,  365,  365,  365,  500,  500,
      533,  533,  577,  577,  532,  532,  576,  576,  621,  621,
      644,  644,  643,  643,  665,  665,  665,  676,  676,  676,
        3,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689
    } ;

static const flex_int16_t yy_chk[5738] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    7,    9,    9,
       19,   23,   23,   23,   18,   18,   18,   18,   18,   18,

       18,   18,   19,    2,    2,    2,    2,    2,    2,    2,
        2,   18,   20,  691,   20,   20,   20,   20,   20,   20,
       20,   20,   25,   25,   31,   33,   49,   53,   31,   33,
      372,  372,   31,   33,   55,   31,   55,   31,   31,   18,
        7,   56,   56,   49,   49,   49,   49,   49,   49,   49,
       49,  165,   31,   33,    9,   26,   31,   33,   26,   26,
       31,   33,  470,   31,   76,   31,   31,   76,   76,  469,
       26,   26,   26,   26,   26,   26,   26,   26,  326,  166,
       53,  326,  326,   32,   26,   26,  364,   32,  363,   55,
      627,   32,  362,  627,   32,  519,   26,   32,  519,  519,

       32,   26,   26,  167,  165,  167,  361,   56,  360,  648,
       26,   32,   26,   26,  328,   32,   72,  446,   68,   32,
      446,  446,   32,  520,   26,   32,  520,  520,   32,   26,
       26,   27,  166,   67,   27,   27,   50,  446,   50,   50,
       50,   50,   50,   50,   50,   50,   27,   27,   27,   27,
       27,   27,   27,   27,  665,   63,   34,   52,  167,   27,
       34,   34,  648,   51,   34,   27,   21,   35,   17,   34,
       27,   35,   15,   14,   27,   35,   27,    6,    5,  444,
       35,   35,  444,  444,   34,    3,   27,   27,   34,   34,
        0,    0,   34,   27,  444,   35,    0,   34,   27,   35,

        0,    0,   27,   35,   27,   28,    0,  665,   35,   35,
       36,   28,   28,   28,   36,  676,   28,   37,   36,   28,
       28,   37,   28,  462,   36,   37,  462,  462,  667,   28,
      667,   37,  521,   28,    0,  521,  521,    0,   36,   28,
       28,   28,   36,  462,   28,   37,   36,   28,   28,   37,
       28,  522,   36,   37,  522,  522,    0,   28,   29,   37,
        0,    0,   29,   44,   29,    0,   29,   44,  676,   29,
      677,   44,    0,   29,    0,   29,  523,   46,    0,  523,
      523,   46,    0,  667,  524,   46,   29,  524,  524,    0,
       29,   44,   29,    0,   29,   44,  678,   29,  678,   44,

        0,   29,    0,   29,   30,   46,   40,    0,   30,   46,
       40,    0,   30,   46,   40,   30,    0,   30,   30,   40,
       40,  525,   43,  677,  525,  525,   43,   30,    0,    0,
       43,    0,   30,    0,   40,   43,   30,    0,   40,    0,
       30,    0,   40,   30,    0,   30,   30,   40,   40,  526,
       43,  678,  526,  526,   43,   30,   38,   38,   43,    0,
       38,   38,   45,   43,   38,    0,   45,    0,    0,   45,
       45,   38,    0,   38,   38,   38,  441,    0,   77,  441,
      441,    0,   77,    0,   38,   38,   77,    0,   38,   38,
       45,  441,   38,    0,   45,    0,  441,   45,   45,   38,

        0,   38,   38,   38,   39,    0,   77,    0,   39,    0,
       77,    0,   39,  532,   77,   39,  532,  532,   39,    0,
        0,   39,    0,   39,   61,   61,   61,   61,   61,   61,
       61,   61,   39,    0,    0,  442,   39,    0,  442,  442,
       39,   61,    0,   39,  535,    0,   39,  535,  535,   39,
      442,   39,   41,    0,   41,  442,   41,   82,   41,   41,
       41,   82,    0,    0,    0,   82,   41,   41,   41,   61,
       82,   41,    0,   78,   41,  445,    0,   78,  445,  445,
       41,   78,   41,    0,   41,   82,   41,   41,   41,   82,
      445,   78,    0,   82,   41,   41,   41,    0,   82,   41,

       79,   78,   41,   42,   79,   78,    0,   42,   79,   78,
       42,   42,  536,    0,    0,  536,  536,   42,   79,   78,
       42,    0,  443,    0,    0,  443,  443,   42,   79,    0,
      537,   42,   79,  537,  537,   42,   79,  443,   42,   42,
      538,    0,  443,  538,  538,   42,   79,    0,   42,    0,
        0,   62,    0,   62,    0,   42,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   65,  163,  163,  163,  163,  163,  163,  163,  163,
       66,   65,   66,   66,   66,   66,   66,   66,   66,   66,
       80,    0,   83,   80,   80,   81,   83,   81,   80,   81,

       83,    0,   84,   81,    0,   83,   84,    0,   81,   65,
       84,  539,    0,  540,  539,  539,  540,  540,   80,    0,
       83,   80,   80,   81,   83,   81,   80,   81,   83,    0,
       84,   81,    0,   83,   84,   85,   81,   86,   84,   85,
       87,   86,   88,   85,   87,   86,   88,    0,   87,  460,
       88,    0,  460,  460,    0,   85,    0,   86,   89,    0,
       88,    0,   89,   85,  460,   86,   89,   85,   87,   86,
       88,   85,   87,   86,   88,   89,   87,  541,   88,    0,
      541,  541,    0,   85,    0,   86,   89,   90,   88,   93,
       89,   90,   91,   93,   89,   90,   91,   93,  542,    0,

       91,  542,  542,   89,   90,   94,   91,    0,  576,   94,
       91,  576,  576,   94,    0,   90,    0,   93,   92,   90,
       91,   93,   92,   90,   91,   93,   92,  461,   91,   92,
      461,  461,   90,   94,   91,    0,   92,   94,   91,   95,
        0,   94,  461,   95,   97,  106,   92,   95,   97,  106,
       92,    0,   97,  106,   92,   96,   97,   92,   95,   96,
       96,   96,  106,   96,   92,   97,   96,   95,    0,    0,
        0,   95,   97,  106,   98,   95,   97,  106,   98,    0,
       97,  106,   98,   96,   97,    0,   95,   96,   96,   96,
      106,   96,   98,   97,   96,   99,  100,    0,   99,   99,

      100,  100,   98,   99,  100,  558,   98,  101,  558,  558,
       98,  101,    0,  100,  592,  101,    0,  592,  592,    0,
       98,    0,  101,   99,  100,  558,   99,   99,  100,  100,
        0,   99,  100,    0,  102,  101,  102,    0,  102,  101,
      103,  100,  102,  101,  103,  102,    0,    0,  103,  104,
      101,  103,  518,  104,    0,  518,  518,  104,    0,    0,
        0,    0,  102,  104,  102,    0,  102,  518,  103,    0,
      102,  595,  103,  102,  595,  595,  103,  104,    0,  103,
      105,  104,    0,  105,  105,  104,  107,    0,    0,  534,
      107,  104,  534,  534,  107,  105,  105,  105,  105,  105,

      105,  105,  105,  601,  534,  107,  601,  601,  109,  108,
        0,  110,  109,  108,  107,  110,  109,  108,  107,  110,
      111,    0,  107,  108,  111,    0,  109,  109,  111,    0,
        0,    0,    0,  107,    0,  105,  109,  108,    0,  110,
      109,  108,  113,  110,  109,  108,  113,  110,  111,    0,
      113,  108,  111,    0,  109,  109,  111,  112,  114,    0,
      113,  112,  114,  114,    0,  112,  114,  112,    0,    0,
      113,  114,  112,    0,  113,  112,  112,  114,  113,  115,
        0,    0,    0,  115,    0,  112,  114,  115,  113,  112,
      114,  114,  115,  112,  114,  112,    0,  115,  116,  114,

      112,    0,  116,  112,  112,  114,  116,  115,  117,    0,
      117,  115,  117,  118,  117,  115,  117,  118,    0,  118,
      115,  118,    0,    0,  119,  115,  116,  119,  119,    0,
      116,    0,  119,    0,  116,    0,  117,    0,  117,    0,
      117,  118,  117,    0,  117,  118,    0,  118,    0,  118,
      120,    0,  119,  120,  120,  119,  119,  121,  120,    0,
      119,  121,    0,  120,  122,  121,    0,  123,  122,  124,
      120,  123,  122,  124,    0,  123,  123,  124,  120,    0,
      121,  120,  120,  122,  602,  121,  120,  602,  602,  121,
        0,  120,  122,  121,    0,  123,  122,  124,  120,  123,

      122,  124,  125,  123,  123,  124,  125,    0,  121,  126,
      125,  122,  127,  126,  127,  128,  127,  126,    0,  128,
      127,  129,  128,  128,    0,  129,    0,  131,    0,  129,
      125,  131,    0,    0,  125,  131,    0,  126,  125,    0,
      127,  126,  127,  128,  127,  126,    0,  128,  127,  129,
      128,  128,  130,  129,  132,  131,  130,  129,  132,  131,
      130,  133,  132,  131,    0,  133,  130,  134,  132,  133,
      134,  134,    0,  603,    0,  134,  603,  603,  133,    0,
      130,    0,  132,    0,  130,    0,  132,    0,  130,  133,
      132,    0,    0,  133,  130,  134,  132,  133,  134,  134,

        0,  604,    0,  134,  604,  604,  133,  135,  136,  135,
      135,    0,  136,    0,  136,    0,  136,  135,    0,  135,
      135,    0,  135,    0,  137,  135,  135,  137,  137,    0,
      605,    0,  137,  605,  605,  135,  136,  135,  135,    0,
      136,    0,  136,    0,  136,  135,    0,  135,  135,    0,
      135,    0,  137,  135,  135,  137,  137,  138,  139,    0,
      137,  138,  139,  140,  141,  138,  139,  140,  141,    0,
      142,  140,  141,    0,  142,  139,  138,  141,  142,  606,
      140,    0,  606,  606,  142,  138,  139,    0,    0,  138,
      139,  140,  141,  138,  139,  140,  141,    0,  142,  140,

      141,    0,  142,  139,  138,  141,  142,  143,  140,  148,
      144,  143,  142,  148,  144,  143,    0,  148,  144,  146,
      143,  144,  145,  146,  145,  556,  145,  146,  556,  556,
      145,    0,    0,    0,    0,  143,  146,  148,  144,  143,
      556,  148,  144,  143,    0,  148,  144,  146,  143,  144,
      145,  146,  145,  147,  145,  146,    0,  147,  145,  149,
        0,  147,    0,  149,  146,  150,    0,  149,    0,  150,
      147,  151,  149,  150,  152,  151,  153,    0,  152,  151,
      153,  147,  152,    0,  153,  147,  152,  149,  150,  147,
        0,  149,    0,  150,    0,  149,    0,  150,  147,  151,

      149,  150,  152,  151,  153,  154,  152,  151,  153,  154,
      152,  155,  153,  154,  152,  155,  150,  607,    0,  155,
      607,  607,    0,  156,  157,  154,  155,  156,  157,    0,
      159,  156,  157,  154,  159,  157,    0,  154,  159,  155,
      158,  154,  156,  155,  158,    0,  608,  155,  158,  608,
      608,  156,  157,  154,  155,  156,  157,  158,  159,  156,
      157,  160,  159,  157,    0,  160,  159,    0,  158,  160,
      156,  161,  158,  173,    0,  161,  158,  173,  160,  161,
      457,  173,  161,  457,  457,  158,    0,  557,    0,  160,
      557,  557,    0,  160,  162,  457,    0,  160,    0,  161,

      457,  173,  557,  161,    0,  173,  160,  161,    0,  173,
      161,  162,  162,  162,  162,  162,  162,  162,  162,  164,
        0,  164,  164,  164,  164,  164,  164,  164,  164,  168,
      168,  168,  168,  168,  168,  168,  168,  169,  169,  169,
      169,  169,  169,  169,  169,  174,  175,  176,  177,  174,
      175,  176,  177,  174,  175,  176,  177,  178,  179,    0,
      634,  178,  179,  634,  634,  178,  179,  643,  179,    0,
      643,  643,    0,  174,  175,  176,  177,  174,  175,  176,
      177,  174,  175,  176,  177,  178,  179,  180,    0,  178,
      179,  180,    0,  178,  179,  180,  179,  181,    0,  181,

      182,  181,    0,  183,  182,  181,  180,  183,  182,  184,
      185,  183,  186,  184,  185,  180,  186,  184,  185,  180,
      186,    0,  183,  180,  187,  181,    0,  181,  182,  181,
        0,  183,  182,  181,  180,  183,  182,  184,  185,  183,
      186,  184,  185,  189,  186,  184,  185,  189,  186,  187,
      183,  189,  188,  187,  188,  190,  188,  187,  189,  190,
      188,  191,  192,  190,  193,  191,  192,    0,  193,  191,
      192,  189,  193,  190,    0,  189,  192,  187,    0,  189,
      188,  187,  188,  190,  188,  187,  189,  190,  188,  191,
      192,  190,  193,  191,  192,  194,  193,  191,  192,  194,

      193,  190,  195,  194,  192,  196,  195,    0,  198,  196,
      195,    0,  198,  196,  197,  195,  198,  199,  197,  197,
      200,  199,  197,  194,  200,  199,    0,  194,  200,  197,
      195,  194,    0,  196,  195,    0,  198,  196,  195,    0,
      198,  196,  197,  195,  198,  199,  197,  197,  200,  199,
      197,  201,  200,  199,  202,  201,  200,  197,  202,  201,
      600,    0,  202,  600,  600,    0,    0,    0,  204,  205,
        0,    0,  206,  205,    0,  600,  206,  205,    0,  201,
      206,    0,  202,  201,  207,    0,  202,  201,  207,    0,
      202,  203,  207,  203,  204,  203,  203,  205,  204,  203,

      206,  205,  204,    0,  206,  205,  203,  208,  206,    0,
      203,  208,  207,  203,    0,  208,  207,    0,    0,  203,
      207,  203,  204,  203,  203,  208,  204,  203,  212,  209,
      204,    0,  212,  209,  203,  208,  212,  209,  203,  208,
      209,  203,  214,  208,  210,    0,  214,    0,  210,    0,
      214,    0,  210,  208,  211,  210,  212,  209,  211,    0,
      212,  209,  211,    0,  212,  209,    0,    0,  209,  211,
      214,    0,  210,    0,  214,    0,  210,    0,  214,    0,
      210,    0,  211,  210,  213,  215,  211,  213,  213,    0,
      211,    0,    0,    0,    0,    0,    0,  211,    0,  213,

      213,  213,  213,  213,  213,  213,  213,    0,  216,  216,
      215,    0,  216,  217,  215,  218,  216,  217,  215,  218,
      219,  217,  220,  218,  219,    0,  220,    0,  219,  218,
      220,    0,    0,  217,    0,  219,  216,  216,  215,  213,
      216,  217,  215,  218,  216,  217,  215,  218,  219,  217,
      220,  218,  219,    0,  220,    0,  219,  218,  220,    0,
      221,  217,  222,  219,  221,  223,  222,  224,  221,  223,
      222,  224,  225,  223,    0,  224,  225,    0,    0,  227,
      225,    0,  222,  227,  223,    0,    0,  227,  221,    0,
      222,  225,  221,  223,  222,  224,  221,  223,  222,  224,

      225,  223,    0,  224,  225,  226,    0,  227,  225,  226,
      222,  227,  223,  226,  228,  227,    0,  229,  228,  225,
        0,  229,  228,  231,  226,  229,  231,  231,  230,    0,
      232,  231,  230,  226,  232,  233,  230,  226,  232,  233,
      234,  226,  228,  233,  234,  229,  228,  230,  234,  229,
      228,  231,  226,  229,  231,  231,  230,  235,  232,  231,
      230,  236,  232,  233,  230,  236,  232,  233,  234,  236,
      237,  233,  234,  238,  237,  230,  234,  238,  237,    0,
        0,  238,  235,    0,  237,    0,  235,    0,  239,  236,
      235,  238,  239,  236,    0,  240,  239,  236,  237,  240,

      241,  238,  237,  240,  241,  238,  237,  239,  241,  238,
      235,    0,  237,  242,  235,    0,  239,  242,  235,  238,
      239,  242,    0,  240,  239,    0,  242,  240,  241,  243,
      244,  240,  241,  243,  244,  239,  241,  243,  244,    0,
      243,  242,  246,  247,  245,  242,  246,  247,  245,  242,
      246,  247,  245,    0,  242,  246,  247,  243,  244,    0,
      249,  243,  244,  245,    0,  243,  244,    0,  243,  250,
      246,  247,  245,  250,  246,  247,  245,  250,  246,  247,
      245,    0,    0,  246,  247,  248,  249,  248,  252,  248,
      249,  245,  252,  248,  249,  251,  252,  250,  251,  251,

      248,  250,  253,  251,    0,  250,  253,  252,    0,    0,
      253,    0,    0,  248,  249,  248,  252,  248,  249,    0,
      252,  248,  249,  251,  252,    0,  251,  251,  248,    0,
      253,  251,    0,    0,  253,  252,    0,    0,  253,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  255,  256,  257,  255,  255,
      256,  257,  258,  255,  256,  257,  258,  259,    0,    0,
      258,  259,    0,    0,  259,  259,  257,    0,    0,    0,
      260,    0,  258,  255,  256,  257,  255,  255,  256,  257,
      258,  255,  256,  257,  258,  259,    0,    0,  258,  259,
        0,  260,  259,  259,  257,  260,    0,  261,  262,  260,
      258,  261,  262,  263,  264,  261,  262,  263,  264,  262,
      265,  263,  264,  266,  265,    0,  266,  266,  265,  260,

        0,  266,    0,  260,    0,  261,  262,  260,  266,  261,
      262,  263,  264,  261,  262,  263,  264,  262,  265,  263,
      264,  266,  265,  267,  266,  266,  265,  267,    0,  266,
      268,  267,    0,  269,  268,  270,  266,  269,  268,  270,
      271,  269,  272,  270,  271,  267,  272,    0,  271,    0,
      272,  267,    0,    0,  273,  267,    0,  272,  268,  267,
        0,  269,  268,  270,    0,  269,  268,  270,  271,  269,
      272,  270,  271,  267,  272,    0,  271,    0,  272,  273,
      274,    0,  275,  273,  274,  272,  275,  273,  274,  278,
      275,    0,  277,  278,  276,  274,  277,  278,  276,    0,

      277,    0,  276,    0,    0,  277,    0,  273,  274,    0,
      275,  273,  274,  276,  275,  273,  274,  278,  275,    0,
      277,  278,  276,  274,  277,  278,  276,  279,  277,  279,
      276,  279,    0,  277,  280,  279,    0,    0,  280,  281,
      279,  276,  280,  281,  282,  283,  284,  281,  282,  283,
      284,    0,  282,  283,  284,  279,  286,  279,    0,  279,
      286,    0,  280,  279,  286,    0,  280,  281,  279,  286,
      280,  281,  282,  283,  284,  281,  282,  283,  284,  285,
      282,  283,  284,  285,  286,  287,  288,  285,  286,  287,
      288,  289,  286,  287,  288,  289,  287,  286,  285,  289,

        0,  290,  289,    0,  287,  290,    0,  285,  291,  290,
        0,  285,  293,  287,  288,  285,  293,  287,  288,  289,
      293,  287,  288,  289,  287,    0,  285,  289,    0,  290,
      289,  292,  287,  290,  291,  292,    0,  290,  291,  292,
      293,  292,  291,    0,  293,  294,  295,    0,  293,  296,
      295,    0,    0,  296,  295,    0,  295,  296,    0,  292,
      297,    0,  291,  292,  297,    0,  291,  292,  297,  292,
      291,  294,  299,  297,  295,  294,  299,  296,  295,  294,
      299,  296,  295,  299,  295,  296,  301,  304,  297,  302,
      301,  304,  297,  302,  301,  304,  297,  302,  300,  294,

      299,  297,  300,  294,  299,    0,  300,  294,  299,  302,
        0,  299,  300,    0,  301,  304,  303,  302,  301,  304,
      303,  302,  301,  304,  303,  302,  300,    0,  305,    0,
      300,    0,  305,    0,  300,  303,  305,  302,  306,  309,
      300,  307,  306,  309,  303,  307,  306,  309,  303,  307,
        0,  306,  303,  308,    0,    0,  305,  308,  307,    0,
      305,  308,    0,  303,  305,    0,  306,  309,    0,  307,
      306,  309,  308,  307,  306,  309,  310,  307,    0,  306,
      310,  308,    0,  311,  310,  308,  307,  311,    0,  308,
      312,  311,    0,  313,  312,  312,  311,  313,  312,    0,

      308,  313,    0,  311,  310,    0,    0,    0,  310,  314,
      313,  311,  310,  314,    0,  311,    0,  314,  312,  311,
        0,  313,  312,  312,  311,  313,  312,    0,  315,  313,
        0,  311,  315,  314,    0,  315,  315,  314,  313,  318,
      317,  314,  317,  318,  317,  314,  319,  318,  317,  320,
      319,  321,  320,  320,  319,  321,  315,  320,  322,  321,
      315,  314,  322,  315,  315,  323,  322,  318,  317,  323,
      317,  318,  317,  323,  319,  318,  317,  320,  319,  321,
      320,  320,  319,  321,  323,  320,  322,  321,  327,    0,
      322,  327,  327,  323,  322,    0,    0,  323,    0,    0,

        0,  323,    0,  327,  327,  327,  327,  327,  327,  327,
      327,    0,  323,  329,    0,    0,  331,  329,  330,  330,
      331,  329,  330,  332,  331,  333,  330,  332,    0,  333,
      332,  332,  334,  333,    0,    0,  334,    0,  333,    0,
      334,  329,    0,  327,  331,  329,  330,  330,  331,  329,
      330,  332,  331,  333,  330,  332,  334,  333,  332,  332,
      334,  333,    0,  335,  334,    0,  333,  335,  334,  336,
      337,  335,    0,  336,  337,  338,    0,  336,  337,  339,
        0,    0,  335,  339,  334,  337,  336,  339,  340,    0,
        0,  335,  340,  340,    0,  335,  340,  336,  337,  335,

      338,  336,  337,    0,  338,  336,  337,  339,  338,    0,
      335,  339,    0,  337,  336,  339,  340,    0,  341,  342,
      340,  340,  341,  342,  340,  343,  341,  342,  338,  343,
      342,    0,  338,  343,    0,    0,  338,  341,  343,    0,
        0,    0,    0,    0,  346,    0,  341,  342,  346,    0,
      341,  342,  346,  343,  341,  342,  347,  343,  342,    0,
      347,  343,    0,    0,  347,  341,  343,  345,  345,  345,
      345,  345,  346,  345,    0,    0,  346,  350,    0,  345,
      346,  350,  349,  345,  347,  350,  349,  345,  347,  348,
      349,  348,  347,  348,    0,  351,  349,  348,    0,  351,

      352,    0,  349,  351,  352,  350,    0,  345,  352,  350,
      349,  345,  351,  350,  349,  345,    0,  348,  349,  348,
        0,  348,    0,  351,  349,  348,    0,  351,  352,  353,
      349,  351,  352,  353,  354,    0,  352,  353,  354,    0,
      351,  358,  354,    0,    0,  358,  359,    0,  353,  358,
      359,    0,    0,  354,  359,    0,    0,  353,    0,    0,
      458,  353,  354,  458,  458,  353,  354,    0,  355,  358,
      354,  355,  355,  358,  359,  458,  353,  358,  359,    0,
      458,  354,  359,  355,  355,  355,  355,  355,  355,  355,
      355,  356,  356,  356,  356,  356,  367,  356,  368,    0,

      367,  374,  368,  356,  367,  374,  368,  356,    0,  374,
        0,  356,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  355,  367,    0,  368,    0,  367,  374,
      368,  356,  367,  374,  368,  356,    0,  374,    0,  356,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,    0,    0,
        0,    0,    0,    0,    0,    0,  365,  365,  365,  365,
      365,  369,  370,  371,  373,  369,  370,  371,  373,  369,
      370,  371,  373,  375,    0,  369,    0,  375,    0,  370,
      376,  375,  371,  373,  376,  376,    0,  365,  376,  369,

      370,  371,  373,  369,  370,  371,  373,  369,  370,  371,
      373,  375,    0,  369,    0,  375,    0,  370,  376,  375,
      371,  373,  376,  376,  365,  365,  376,  377,  378,  379,
        0,  377,  378,  379,  379,  377,  378,  379,  380,  381,
      383,  380,  380,  381,  383,    0,  380,  381,  383,    0,
      384,    0,    0,  383,  384,  377,  378,  379,  384,  377,
      378,  379,  379,  377,  378,  379,  380,  381,  383,  380,
      380,  381,  383,  387,  380,  381,  383,    0,  384,    0,
      386,  383,  384,  385,  386,  385,  384,  385,  386,  388,
        0,  385,    0,  388,    0,    0,    0,  388,  387,    0,

      385,  391,  387,    0,    0,  391,  387,    0,  386,  391,
        0,  385,  386,  385,  389,  385,  386,  388,  389,  385,
        0,  388,  389,  390,    0,  388,  387,  390,  385,  391,
      387,  390,  389,  391,  387,  392,  390,  391,    0,  392,
      394,  393,  389,  392,  394,  393,  389,    0,  394,  393,
      389,  390,  393,  395,  396,  390,    0,  395,  396,  390,
      389,  395,  396,  392,  390,    0,  397,  392,  394,  393,
      397,  392,  394,  393,  397,    0,  394,  393,    0,  398,
      393,  395,  396,  398,  398,  395,  396,  398,    0,  395,
      396,  399,    0,  400,  397,  399,  400,  400,  397,  399,

      402,  400,  397,    0,  402,  399,  405,  398,  402,    0,
      405,  398,  398,    0,  405,  398,    0,  408,    0,  399,
        0,  400,  404,  399,  400,  400,  404,  399,  402,  400,
      404,  406,  402,  399,  405,  406,  402,  404,  405,  406,
      407,    0,  405,  408,  407,  407,    0,  408,  407,    0,
      404,  408,  409,  407,  404,    0,  409,    0,  404,  406,
      409,    0,  410,  406,    0,  404,  410,  406,  407,  409,
      410,  408,  407,  407,    0,  408,  407,    0,    0,  408,
      409,  407,    0,    0,  409,    0,    0,  412,  409,  411,
      410,  412,  411,  411,  410,  412,    0,  409,  410,    0,

        0,  412,    0,    0,  411,  411,  411,  411,  411,  411,
      411,  411,    0,  413,  414,  412,    0,  413,  414,  412,
      415,  413,  414,  412,  415,    0,  416,  417,  415,  412,
      416,  417,  414,    0,  416,  417,    0,    0,    0,  416,
        0,  413,  414,  418,  411,  413,  414,  418,  415,  413,
      414,  418,  415,    0,  416,  417,  415,  418,  416,  417,
      414,  419,  416,  417,  420,  419,  422,  416,  420,  419,
      422,  418,  420,  423,  422,  418,  419,  423,    0,  418,
      421,  423,    0,  424,  421,  418,  424,  424,  421,  419,
        0,  424,  420,  419,  422,    0,  420,  419,  422,  421,

      420,  423,  422,    0,  419,  423,    0,  431,  421,  423,
        0,  424,  421,  425,  424,  424,  421,  425,  427,  424,
      428,  425,  427,    0,  428,    0,  427,  421,  428,  427,
      429,  430,  431,    0,  429,  430,  431,    0,  429,  430,
      431,  425,    0,  432,    0,  425,  427,  432,  428,  425,
      427,  432,  428,    0,  427,    0,  428,  427,  429,  430,
      431,  433,  429,  430,  431,  433,  429,  430,  431,  433,
      434,  432,  433,  435,  434,  432,  437,  435,  434,  432,
      437,  435,    0,    0,  437,    0,  438,  435,  439,  433,
      438,  447,  439,  433,  438,  447,  439,  433,  434,  447,

      433,  435,  434,    0,  437,  435,  434,    0,  437,  435,
      438,    0,  437,  440,  438,  435,  439,  440,  438,  447,
      439,  440,  438,  447,  439,  448,  449,  447,    0,  448,
      449,    0,  440,  448,  449,    0,    0,    0,  438,  449,
        0,  440,  452,  450,  448,  440,  452,  450,    0,  440,
      452,  450,    0,  448,  449,    0,    0,  448,  449,    0,
      440,  448,  449,  450,    0,  451,    0,  449,    0,  451,
      452,  450,  448,  451,  452,  450,    0,  453,  452,  450,
      451,  453,  454,    0,  455,  453,  454,    0,  455,    0,
      454,  450,  455,  451,    0,    0,    0,  451,    0,  453,

        0,  451,    0,    0,    0,  453,    0,    0,  451,  453,
      454,    0,  455,  453,  454,    0,  455,  463,  454,  456,
      455,  463,  456,  456,    0,  463,    0,  453,  459,    0,
      463,  459,  459,    0,  456,  456,  456,  456,  456,  456,
      456,  456,    0,  459,  468,  463,    0,  464,  459,  463,
        0,  464,  465,  463,    0,  464,  465,  467,  463,  466,
      465,  467,    0,  466,  464,  467,    0,  466,    0,  468,
      467,  465,    0,  468,  456,  464,  466,  468,  471,  464,
      465,    0,  471,  464,  465,  467,  471,  466,  465,  467,
        0,  466,  464,  467,    0,  466,    0,  468,  467,  465,

        0,  468,    0,  472,  466,  468,  471,  472,  473,    0,
      471,  472,  473,    0,  471,    0,  473,    0,    0,    0,
        0,  473,  474,  474,  474,  474,  474,    0,  474,  475,
        0,  472,  475,  475,  474,  472,  473,  475,  474,  472,
      473,    0,  474,  476,  473,    0,  478,  476,  477,  473,
      478,  476,  477,    0,  478,    0,  477,  475,    0,    0,
      475,  475,  474,  477,  480,  475,  474,    0,  480,    0,
      474,  476,  480,    0,  478,  476,  477,  479,  478,  476,
      477,  479,  478,  479,  477,  479,  481,    0,    0,  483,
      481,  477,  480,  483,  481,    0,  480,  483,    0,    0,

      480,    0,  486,  483,  484,  479,  486,    0,  484,  479,
      486,  479,  484,  479,  481,  484,    0,  483,  481,  487,
      485,  483,  481,  487,  485,  483,  485,  487,  485,  488,
      486,  483,  484,  488,  486,    0,  484,  488,  486,    0,
      484,  489,  487,  484,    0,  489,    0,  487,  485,  489,
        0,  487,  485,    0,  485,  487,  485,  488,  490,  491,
      492,  488,  490,  491,  492,  488,  490,  491,  492,  489,
      487,    0,  494,  489,  495,  490,  494,  489,  495,  495,
      494,  491,  495,    0,    0,  493,  490,  491,  492,  493,
      490,  491,  492,  493,  490,  491,  492,  496,    0,  493,

      494,  496,  495,  490,  494,  496,  495,  495,  494,  491,
      495,  498,  498,  493,    0,  498,    0,  493,  499,  498,
        0,  493,  499,  499,    0,  496,  499,  493,    0,  496,
        0,    0,    0,  496,    0,    0,    0,    0,    0,  498,
      498,  500,    0,  498,  500,  500,  499,  498,    0,    0,
      499,  499,    0,    0,  499,    0,  500,  500,  500,  500,
      500,  500,  500,  500,    0,  501,  502,  501,    0,  501,
      502,  503,    0,  501,  502,  503,    0,    0,    0,  503,
      502,  504,  505,  504,  505,  504,  505,    0,    0,  504,
      505,    0,    0,  501,  502,  501,  500,  501,  502,  503,

        0,  501,  502,  503,    0,    0,    0,  503,  502,  504,
      505,  504,  505,  504,  505,  506,  507,  504,  505,  506,
      507,  508,    0,  506,  507,  508,  510,  507,  509,  508,
      510,  511,  509,  511,  510,  511,  509,    0,    0,  511,
        0,    0,    0,  506,  507,    0,    0,  506,  507,  508,
      509,  506,  507,  508,  510,  507,  509,  508,  510,  511,
      509,  511,  510,  511,  509,  513,  514,  511,    0,  513,
      514,  515,    0,  513,  514,  515,  513,  516,  509,  515,
        0,  516,  515,  517,  514,  516,    0,  517,    0,    0,
        0,  517,  516,  513,  514,    0,    0,  513,  514,  515,

        0,  513,  514,  515,  513,  516,    0,  515,    0,  516,
      515,  517,  514,  516,  527,  517,    0,  528,  527,  517,
      516,  528,  527,  530,  529,  528,  531,  530,  529,    0,
      531,  530,  529,    0,  531,    0,    0,    0,    0,    0,
        0,    0,  527,  529,    0,  528,  527,    0,    0,  528,
      527,  530,  529,  528,  531,  530,  529,    0,  531,  530,
      529,  533,  531,    0,  533,  533,  543,    0,    0,    0,
      543,  529,  543,    0,  543,    0,  533,  533,  533,  533,
      533,  533,  533,  533,    0,  544,    0,  545,    0,  544,
        0,  545,    0,  544,  543,  545,    0,  546,  543,  547,

      543,  546,  543,  547,  551,  546,    0,  547,  551,    0,
        0,    0,  551,  544,    0,  545,  533,  544,    0,  545,
        0,  544,    0,  545,    0,  546,    0,  547,    0,  546,
      552,  547,  551,  546,  552,  547,  551,  552,  552,  553,
      551,  554,  553,  553,  554,  554,    0,    0,    0,  559,
        0,    0,  552,  559,  553,    0,  554,  559,  552,  553,
        0,  554,  552,    0,  555,  552,  552,  555,  555,    0,
      560,  561,    0,    0,  560,    0,    0,  559,  560,  555,
      552,  559,  562,  563,  555,  559,  562,  563,  560,  563,
      562,  563,    0,    0,    0,  562,  561,    0,  560,  565,

      561,    0,  560,  565,  561,    0,  560,  565,    0,    0,
      562,  563,    0,    0,  562,  563,  560,  563,  562,  563,
        0,  564,    0,  562,  561,  564,  564,  565,  561,  564,
        0,  565,  561,  566,  564,  565,    0,  566,  567,  568,
        0,  566,  567,  568,  566,    0,  567,  568,  569,  564,
        0,  570,  569,  564,  564,  570,  569,  564,    0,  570,
      571,  566,  564,    0,  571,  566,  567,  568,  571,  566,
      567,  568,  566,  580,  567,  568,  569,  580,    0,  570,
      569,  580,    0,  570,  569,  572,  573,  570,  571,  572,
      573,  572,  571,  572,  573,    0,  571,    0,  579,  579,

      573,  580,  579,    0,    0,  580,  579,    0,    0,  580,
        0,    0,    0,  572,  573,    0,    0,  572,  573,  572,
      577,  572,  573,  577,  577,    0,  579,  579,  573,  578,
      579,    0,  578,  578,  579,  577,  577,  577,  577,  577,
      577,  577,  577,    0,  578,  578,  578,  578,  578,  578,
      578,  578,    0,  581,  582,  583,    0,  581,  582,  583,
      584,  581,  582,  583,  584,  585,    0,    0,  584,  585,
        0,    0,  581,  585,    0,  577,  587,    0,    0,    0,
        0,  581,  582,  583,  578,  581,  582,  583,  584,  581,
      582,  583,  584,  585,  586,  588,  584,  585,  586,  588,

      581,  585,  586,  588,    0,  589,  587,  590,    0,  589,
      587,  590,  586,  589,  587,  590,  591,  593,    0,    0,
      591,  593,  586,  588,  591,  593,  586,  588,  594,    0,
      586,  588,  594,  589,  587,  590,  594,  589,  587,  590,
      586,  589,  587,  590,  591,  593,  594,  596,  591,  593,
        0,  596,  591,  593,    0,  596,  594,  597,  596,  598,
      594,  597,  599,  598,  594,  597,  599,  598,  609,  611,
      599,    0,  609,  611,  594,  596,  609,  611,    0,  596,
        0,    0,    0,  596,    0,  597,  596,  598,  611,  597,
      599,  598,    0,  597,  599,  598,  609,  611,  599,  612,

      609,  611,    0,  612,  609,  611,  612,  612,    0,  613,
        0,  614,    0,  613,  613,  614,  611,  613,  616,  614,
      617,  615,  616,    0,  617,  615,  616,  612,  617,  615,
        0,  612,  617,    0,  612,  612,    0,  613,    0,  614,
      615,  613,  613,  614,    0,  613,  616,  614,  617,  615,
      616,  618,  617,  615,  616,  618,  617,  615,  619,  618,
      617,  620,  619,    0,  618,  620,  619,    0,  615,  620,
        0,    0,  622,    0,  620,    0,  622,    0,    0,  618,
      622,  622,    0,  618,    0,    0,  619,  618,    0,  620,
      619,    0,  618,  620,  619,  621,    0,  620,  621,  621,

      622,    0,  620,    0,  622,    0,    0,    0,  622,  622,
      621,  621,  621,  621,  621,  621,  621,  621,    0,  623,
      624,  625,    0,  623,  624,  625,  626,  623,  624,  625,
      626,    0,  629,    0,  626,    0,  629,  629,  625,    0,
      629,    0,    0,    0,    0,    0,    0,  623,  624,  625,
      621,  623,  624,  625,  626,  623,  624,  625,  626,  628,
      629,    0,  626,  628,  629,  629,  625,  628,  629,    0,
      630,  631,  632,    0,  630,  631,  632,  628,  630,  631,
      632,  633,    0,    0,  633,  633,  637,  628,  638,  633,
      637,  628,  638,  635,  637,  628,  638,  635,  630,  631,

      632,  635,  630,  631,  632,  628,  630,  631,  632,  633,
      635,  636,  633,  633,  637,  636,  638,  633,  637,  636,
      638,  635,  637,  639,  638,  635,    0,  639,  640,  635,
      636,  639,  640,  641,    0,    0,  640,  641,  635,  636,
        0,  641,    0,  636,    0,    0,    0,  636,    0,  642,
        0,  639,  641,  642,    0,  639,  640,  642,  636,  639,
      640,  641,    0,    0,  640,  641,    0,    0,  642,  641,
        0,  644,    0,    0,  644,  644,    0,  642,    0,    0,
      641,  642,    0,    0,    0,  642,  644,  644,  644,  644,
      644,  644,  644,  644,    0,  645,  642,  646,    0,  645,

      647,  646,  649,  645,  647,  646,  649,    0,  647,  650,
      649,  646,  651,  650,  652,    0,  651,  650,  652,    0,
      651,    0,  652,  645,    0,  646,  644,  645,  647,  646,
      649,  645,  647,  646,  649,    0,  647,  650,  649,  646,
      651,  650,  652,  653,  651,  650,  652,  653,  651,  653,
      652,  653,  655,  654,  656,  657,  655,  654,  656,  657,
      655,  654,  656,  657,    0,    0,  658,    0,    0,  655,
      658,  653,  654,    0,  658,  653,    0,  653,    0,  653,
      655,  654,  656,  657,  655,  654,  656,  657,  655,  654,
      656,  657,    0,    0,  658,  659,    0,  655,  658,  659,

      654,  660,  658,  659,  661,  660,  671,    0,  661,  660,
      671,  662,  661,  662,  671,  662,  672,  663,    0,  662,
      672,  663,    0,  659,  672,  663,    0,  659,    0,  660,
      663,  659,  661,  660,  671,    0,  661,  660,  671,  662,
      661,  662,  671,  662,  672,  663,  664,  662,  672,  663,
      664,  664,  672,  663,  664,  668,    0,  668,  663,  668,
      669,    0,  670,  668,  669,    0,  670,  669,  669,  670,
      670,    0,  674,  679,  664,    0,  674,  679,  664,  664,
      674,  679,  664,  668,    0,  668,    0,  668,  669,    0,
      670,  668,  669,    0,  670,  669,  669,  670,  670,  673,

      674,  679,  675,  673,  674,  679,  675,  673,  674,  679,
      675,    0,  681,  680,    0,    0,  681,  680,  673,  675,
      681,  680,    0,    0,    0,  682,    0,  673,    0,  682,
      675,  673,  680,  682,  675,  673,    0,    0,  675,    0,
      681,  680,    0,    0,  681,  680,  673,  675,  681,  680,
      683,  684,    0,  682,  683,  684,    0,  682,  683,  684,
      680,  682,  685,  686,  687,  688,  685,  686,  687,  688,
      685,  686,  687,  688,    0,  686,    0,    0,  683,  684,
        0,    0,  683,  684,    0,    0,  683,  684,    0,    0,
      685,  686,  687,  688,  685,  686,  687,  688,  685,  686,

      687,  688,    0,  686,  690,  690,  690,  692,  692,  693,
      693,  693,  694,  694,  695,  695,  696,  696,  697,  697,
      698,  698,  699,  699,  699,  700,  700,  700,  701,  701,
      702,  702,  703,  703,  704,  704,  705,  705,  706,  706,
      707,  707,  708,  708,  709,  709,  709,  710,  710,  710,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[227] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "DARIC.l"
#line 6 "DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <sstream>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
extern std::list<std::string> error_list;
extern int status;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 1994 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"
#line 1995 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 54 "DARIC.l"


#line 2215 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 690 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5651 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 56 "DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 58 "DARIC.l"
return NL;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "DARIC.l"
return SS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "DARIC.l"
return INTEGERDIVIDE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "DARIC.l"
return TILDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "DARIC.l"
return TICK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "DARIC.l"
return E;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "DARIC.l"
return SEMICOLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "DARIC.l"
return LE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "DARIC.l"
return GE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "DARIC.l"
return SHL_E;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "DARIC.l"
return SHR_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "DARIC.l"
return PLUS_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "DARIC.l"
return MINUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "DARIC.l"
return NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "DARIC.l"
return SHL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "DARIC.l"
return SHR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "DARIC.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "DARIC.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "DARIC.l"
return MULTIPLY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "DARIC.l"
return DIVIDE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "DARIC.l"
return LT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "DARIC.l"
return GT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "DARIC.l"
return BANKED;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "DARIC.l"
return BGET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "DARIC.l"
return BPUT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "DARIC.l"
return CASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "DARIC.l"
return CHAIN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "DARIC.l"
return CLOSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "DARIC.l"
return DATA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "DARIC.l"
return DIM;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "DARIC.l"
return ELSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "DARIC.l"
return END;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "DARIC.l"
return ENDCASE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "DARIC.l"
return ENDIF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "DARIC.l"
return ENDFN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "DARIC.l"
return ENDFN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "DARIC.l"
return ENDPROC;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "DARIC.l"
return ENDTYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "DARIC.l"
return ENDWHILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "DARIC.l"
return EOFH;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "DARIC.l"
return EXPECT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "DARIC.l"
return FIELD;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "DARIC.l"
return FOR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "DARIC.l"
return GET;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "DARIC.l"
return GETS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "DARIC.l"
return GETSH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "DARIC.l"
return GOSUB;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "DARIC.l"
return GOTO;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "DARIC.l"
return INKEY;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "DARIC.l"
return INKEYS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "DARIC.l"
return INPUT_;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "DARIC.l"
return IF;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "DARIC.l"
return IN_;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "DARIC.l"
return LISTFILES;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "DARIC.l"
return LOCAL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "DARIC.l"
return MOUSE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "DARIC.l"
return NEXT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "DARIC.l"
return OF;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "DARIC.l"
return OPENIN;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "DARIC.l"
return OPENOUT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "DARIC.l"
return OPENUP;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "DARIC.l"
return OTHERWISE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "DARIC.l"
return PRINT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "DARIC.l"
return PTR;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "DARIC.l"
return READ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "DARIC.l"
return REPEAT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "DARIC.l"
return RESTORE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "DARIC.l"
return RND;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "DARIC.l"
return RND0;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "DARIC.l"
return RND1;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "DARIC.l"
return OSCLI;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "DARIC.l"
return RETURN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "DARIC.l"
return SPC;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "DARIC.l"
return STEP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "DARIC.l"
return SWAP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "DARIC.l"
return THEN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "DARIC.l"
return TO;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "DARIC.l"
return TIME;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "DARIC.l"
return TIMES;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "DARIC.l"
return TRACEON;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "DARIC.l"
return TRACEOFF;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "DARIC.l"
return TYPE_;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "DARIC.l"
return UNTIL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "DARIC.l"
return WHEN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "DARIC.l"
return WHILE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "DARIC.l"
return ASC;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "DARIC.l"
return CHRS;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "DARIC.l"
return INSTR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "DARIC.l"
return LEFTS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "DARIC.l"
return MIDS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "DARIC.l"
return RIGHTS;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "DARIC.l"
return LEN;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "DARIC.l"
return STRS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "DARIC.l"
return STRINGS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "DARIC.l"
return AND;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "DARIC.l"
return OR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "DARIC.l"
return EOR;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "DARIC.l"
return NOT; 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "DARIC.l"
return FLOAT_;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "DARIC.l"
return INT_;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "DARIC.l"
return ACS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "DARIC.l"
return DIV;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "DARIC.l"
return MOD;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "DARIC.l"
return SQR; 
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "DARIC.l"
return LN;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "DARIC.l"
return LOG;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "DARIC.l"
return EXP;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "DARIC.l"
return ATN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "DARIC.l"
return TAN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "DARIC.l"
return COS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "DARIC.l"
return SIN; 
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "DARIC.l"
return ASN; 
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "DARIC.l"
return ABS; 
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "DARIC.l"
return DEG; 
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "DARIC.l"
return RAD; 
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "DARIC.l"
return SGN; 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "DARIC.l"
return PI; 
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 188 "DARIC.l"
return VAL; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 190 "DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 191 "DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "DARIC.l"
return CIRCLE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "DARIC.l"
return CLS;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "DARIC.l"
return CLIPON;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "DARIC.l"
return CLIPOFF;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "DARIC.l"
return COLOUR;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "DARIC.l"
return COLOURBG;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "DARIC.l"
return FILL;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "DARIC.l"
return FLIP;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "DARIC.l"
return SHOWFPS;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "DARIC.l"
return GRAPHICS;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "DARIC.l"
return LINE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "DARIC.l"
return RECTANGLE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "DARIC.l"
return PLOT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "DARIC.l"
return POINT_;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "DARIC.l"
return SHADED;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "DARIC.l"
return TEXT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 211 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 213 "DARIC.l"
return CREATEFONT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "DARIC.l"
return MONO15;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 215 "DARIC.l"
return MONO20;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "DARIC.l"
return MONO25;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "DARIC.l"
return MONO30;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "DARIC.l"
return MONO35;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 219 "DARIC.l"
return MONO40;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 220 "DARIC.l"
return MONO50;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 221 "DARIC.l"
return MONO75;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 222 "DARIC.l"
return MONO100;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "DARIC.l"
return PROP15;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 224 "DARIC.l"
return PROP20;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "DARIC.l"
return PROP25;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "DARIC.l"
return PROP30;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "DARIC.l"
return PROP35;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "DARIC.l"
return PROP40;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "DARIC.l"
return PROP50;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "DARIC.l"
return PROP75;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "DARIC.l"
return PROP100;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 232 "DARIC.l"
return SERIF15;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "DARIC.l"
return SERIF20;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "DARIC.l"
return SERIF25;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "DARIC.l"
return SERIF30;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "DARIC.l"
return SERIF35;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "DARIC.l"
return SERIF40;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "DARIC.l"
return SERIF50;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "DARIC.l"
return SERIF75;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "DARIC.l"
return SERIF100;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 241 "DARIC.l"
return TRIANGLE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 244 "DARIC.l"
return RED;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 245 "DARIC.l"
return GREEN;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 246 "DARIC.l"
return YELLOW;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 247 "DARIC.l"
return BLUE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 248 "DARIC.l"
return MAGENTA;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "DARIC.l"
return CYAN;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 250 "DARIC.l"
return WHITE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "DARIC.l"
return BLACK;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 252 "DARIC.l"
return LASTPOS;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 254 "DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 255 "DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 256 "DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 257 "DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 258 "DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 259 "DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 260 "DARIC.l"
return TRANSLATE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 261 "DARIC.l"
return ROTATE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 262 "DARIC.l"
return SCALE; 
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 263 "DARIC.l"
return SOLID; 
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 267 "DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
#ifdef WINDOWS
                        s += ".daric";
#endif

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            // Test exists
                            FILE *f = fopen(s.c_str(), "r");
                            if (!f) {
                                std::stringstream stream;   
                                stream << "Include file '" << s << "' not found";
                                error_list.push_back(stream.str());
                                status = 0;
                            } else {
                                yyin = fopen(s.c_str(), "r");
                                yyfileno++;
                                files_index.insert(std::pair<std::string, int>(s, yyfileno));
                                strcpy(yytext, s.c_str());
                                included_files.insert(std::move(s));
                                file_stack.push(std::move(file));
                                file = yytext;
                                yylineno_stack.push(yylineno);
                                yylineno = 0;
                                yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                                BEGIN(INITIAL);
                            }
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 307 "DARIC.l"
{
                        static int once = 0; 
                        if (once = !once)
                            return NL;
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 322 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 323 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 324 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 325 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 326 "DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 327 "DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 328 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFPROC; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 329 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_INTEGER; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 330 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_STRING; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 331 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFFN_REAL; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 332 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_STRING; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 333 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_INTEGER; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 334 "DARIC.l"
{ yylval.v_string = strdup(yytext); return FN_REAL; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 335 "DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 336 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 337 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 338 "DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 339 "DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 220:
#line 342 "DARIC.l"
case 221:
#line 343 "DARIC.l"
case 222:
#line 344 "DARIC.l"
case 223:
#line 345 "DARIC.l"
case 224:
YY_RULE_SETUP
#line 345 "DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 347 "DARIC.l"
/* do nothing */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 349 "DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3462 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 690 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 690 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 689);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 349 "DARIC.l"

