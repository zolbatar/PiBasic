#line 1 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#line 3 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 233
#define YY_END_OF_BUFFER 234
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[719] =
    {   0,
        0,    0,  234,  232,    2,    3,  232,  231,  212,  211,
        7,  227,  228,   24,   22,  229,   23,  213,   25,  210,
        4,    9,   26,    8,   27,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  230,    6,    2,  209,
        2,    3,    0,  214,    0,  212,  211,   16,   14,   15,
      213,    0,    5,   17,  213,  210,    4,   20,   10,   19,
       11,   21,  225,  224,  223,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
       67,   68,  226,  226,  226,  120,  226,  226,  226,  226,
      226,  226,  226,   73,  226,  111,  226,  226,  132,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,   92,  226,  226,  226,  226,  226,  226,  226,
      226,    2,  209,  209,    0,  214,    0,    0,  213,   18,
       12,   13,  128,  116,  110,  101,  127,  123,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      137,  226,  125,  226,  226,  226,  226,  129,  226,   36,

      117,  226,   38,  226,  112,  122,  226,  226,  226,  226,
      226,  226,  221,   56,   57,  226,  226,  226,  226,  226,
      226,  226,  226,  115,  226,  226,  107,   66,  226,  226,
      226,  226,  121,  226,  226,  118,  226,  226,  226,  113,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  130,
      226,  226,  187,  226,  226,  226,  226,  226,  226,   83,
      226,  226,  226,  226,  131,  226,  226,  126,  226,   88,
      119,  226,  226,  226,  124,  226,  226,  226,  226,  226,
      226,  226,  226,  133,  226,  226,  226,  226,  226,  226,
      226,  226,  190,  226,  226,   32,  226,  102,  226,  226,

      226,  226,  226,  192,   35,  226,  226,  226,   37,    0,
      226,  226,  226,  226,  226,  226,   53,  226,  198,  226,
      226,  142,  143,  226,  219,  220,  221,  221,   58,  226,
      226,   62,  226,  226,  226,  226,  226,  226,  226,  146,
      226,  226,  226,  226,  105,  226,  226,   72,  226,  226,
      226,  226,  148,  226,  226,  226,  226,   79,   80,  226,
        0,    1,  225,  224,  223,  226,  226,  226,  226,  226,
      226,  226,    0,  226,  226,  226,  226,  226,  226,  226,
      226,   89,  108,  226,   90,  151,   91,   93,  226,  226,
      226,  135,   97,  226,  226,   99,  226,  226,  226,  226,

      226,   29,  194,   30,  226,   33,  226,  226,  226,  226,
      226,  226,  226,  226,    0,    0,    0,    0,    0,    0,
      226,   42,  226,   40,  226,  226,  226,  226,  134,   55,
      226,  114,   59,  226,   61,  226,  188,   63,   65,  226,
      103,  226,  104,  226,  226,   70,  226,  226,  226,  226,
      226,  226,  226,   71,  226,  226,  226,  226,   86,  226,
      149,   78,  222,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,    0,    0,  226,  204,  226,
      226,  226,  199,  226,  205,  226,  226,  226,   94,  226,
      226,  226,   98,  226,  100,  193,  226,  226,   28,  226,

      136,  226,  138,   34,  140,  226,  218,  226,  226,    0,
       48,    0,   47,    0,    0,    0,  226,  226,  226,  226,
      226,   54,  226,   60,  226,   64,  226,  226,  226,  226,
      226,  226,  157,  158,  159,  160,  161,  162,  163,  164,
      201,   74,  226,   76,  226,  222,  222,  226,  166,  167,
      168,  169,  170,  171,  172,  173,  226,  200,   81,  226,
       87,  106,   84,   85,  203,  226,  226,  226,  226,  226,
      226,  226,  150,  226,  226,  226,  226,  226,  226,  226,
      197,  226,  189,  226,  139,  226,  226,  217,  216,  218,
      218,  226,  226,    0,    0,    0,    0,    0,   39,  226,

       43,   44,  226,  226,  226,  226,  195,  226,  226,  191,
      165,   75,  226,  174,  226,   82,  226,  226,  226,  175,
      176,  177,  178,  179,  180,  181,  182,  144,  109,  226,
      226,  226,   95,  226,  226,  226,  226,  141,  226,  215,
      226,   46,    0,   50,   51,    0,  226,   45,  226,  145,
        0,  226,  226,  226,  226,  226,  226,  183,  226,  226,
       96,  226,  184,  226,  226,  226,  215,  215,  226,    0,
       52,  226,  226,    0,   69,  226,   77,  147,  226,  226,
      226,  226,  152,  202,  206,   31,  156,  226,    0,  226,
      226,    0,  208,    0,  226,  226,  226,  154,  153,  226,

        0,   41,  226,    0,  208,    0,  226,  226,  185,  196,
       49,  226,  155,  186,  226,  226,  207,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   26,   26,   28,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
        1,   59,    1,    1,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   58,    1,   86,    1,   87,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[88] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
        3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[740] =
    {   0,
        0,   86,  438, 5663,   87,  431,   86, 5663,   73,    0,
     5663, 5663, 5663,  402,  397, 5663,  390,   77,   86,   98,
      384, 5663,   96, 5663,   64,  155,  231,  277,  330,  376,
       97,  155,   96,  228,  239,  282,  289,  428,  476,  378,
      524,  575,  394,  335,  434,  349, 5663, 5663,  221,  128,
      166,  402,  125, 5663,  191,  191,    0, 5663, 5663, 5663,
      509,  641,  367, 5663,  649,  667,  359,  330, 5663, 5663,
     5663,  308, 5663, 5663, 5663,  127,  450,  545,  572,  662,
      667,  529,  664,  674,  707,  709,  712,  714,  730,  759,
      764,  790,  761,  777,  811,  827,  816,  846,  867,  868,

      879,  906,  912,  921,  980,  817,  958,  981,  980,  983,
      992, 1029, 1014, 1030, 1051, 1070, 1080, 1085, 1096, 1122,
     1129, 1136, 1139, 1141, 1174, 1181, 1184, 1187, 1193, 1224,
     1199, 1226, 1233, 1239, 1279, 1280, 1296, 1329, 1330, 1335,
     1336, 1342, 1379, 1382, 1394, 1391, 1425, 1381, 1431, 1437,
     1443, 1446, 1448, 1477, 1483, 1495, 1496, 1512, 1502, 1533,
     1543, 1597,  657, 1607,  134,  141,  225, 1615, 1623, 5663,
     5663, 5663, 1545, 1618, 1619, 1620, 1621, 1630, 1631, 1660,
     1670, 1673, 1676, 1682, 1683, 1685, 1722, 1725, 1716, 1728,
     1734, 1735, 1737, 1768, 1775, 1778, 1787, 1781, 1790, 1793,

     1824, 1827, 1893, 1834, 1833, 1839, 1840, 1874, 1877, 1896,
     1930, 1886, 1988, 1933, 1984, 1985, 1990, 1991, 1996, 2036,
     2037, 2042, 2047, 2048, 2063, 2077, 2089, 2098, 2100, 2103,
     2112, 2119, 2129, 2138, 2177, 2154, 2159, 2160, 2175, 2172,
     2189, 2210, 2216, 2226, 2228, 2237, 2253, 2268, 2259, 2280,
     2299, 2282, 2305, 2374, 2429, 2430, 2431, 2436, 2441, 2475,
     2481, 2482, 2487, 2488, 2494, 2497, 2527, 2534, 2537, 2539,
     2544, 2546, 2583, 2584, 2586, 2598, 2596, 2593, 2631, 2638,
     2643, 2648, 2649, 2650, 2683, 2660, 2689, 2690, 2695, 2705,
     2738, 2735, 2716, 2775, 2750, 2753, 2764, 5663, 2776, 2802,

     2790, 2793, 2820, 2791, 2832, 2842, 2845, 2857, 2843, 2886,
     2892, 2898, 2909, 2895, 2943, 2948, 5663, 2957, 2950, 2960,
     2966, 2973, 2999, 3000, 5663, 5663,  178, 3050,  313, 3046,
     3051, 3053, 3056, 3058, 3093, 3096, 3102, 3103, 3133, 3112,
     3149, 3151, 3152, 3158, 5663, 3212, 3189, 3205, 3222, 3215,
     3210, 3228, 3261, 3262, 3267, 3329, 3336, 5663, 3274, 3279,
      260,  219,  211,  205,  200, 3405,    0, 3329, 3331, 3405,
     3406, 3407,  153, 3408, 3334, 3417, 3424, 3461, 3462, 3463,
     3472, 3473, 5663, 3474, 3484, 3517, 3514, 3532, 3523, 3548,
     3557, 3535, 3569, 3575, 3574, 3587, 3588, 3600, 3613, 3625,

     3627, 5663, 3634, 5663, 3656, 3640, 3665, 3674, 3677, 3686,
     3696, 3751, 3721, 3747,  106,  145,  147,  154,  152,  170,
     3748, 3754, 3760, 3761, 3777, 3795, 3798, 3814, 3800, 3807,
     3817, 3847, 5663, 3852, 3854, 3864, 3865, 3866, 3877, 3895,
     3904, 3907, 5663, 3910, 3920, 3922, 3947,  476,  535,  622,
      575,  749,  323, 3925, 3959, 3960, 3977, 3999, 3976, 4011,
     4016, 4018, 4081, 1580, 1980, 2347,  827,  952,  376, 4051,
     4077, 4078, 4095, 4107, 4126,  182,  143, 4030, 4096, 4129,
     4183, 4176, 4160, 4178, 4181, 4194, 4195, 4197, 5663, 4232,
     4234, 4235, 4216, 4249, 4247, 4250, 4276, 4287, 4288, 4297,

     4290, 4302, 4328, 5663, 4340, 4342, 4405, 4355, 4401,  170,
     5663,  213, 5663,  213,  214,  226, 4354, 4406, 4416, 4403,
     4417, 4419, 4450, 4457, 4460, 5663, 4459, 4476, 4499, 4501,
     4511,  989,  332,  351,  384,  421,  449,  513,  544,  612,
     4513, 4520, 4532, 4526, 4542,  630, 4597, 1425,  640,  711,
      713,  777,  798,  808,  905,  914, 4593, 4594, 4600, 4603,
     4605, 5663, 5663, 5663, 4606, 4640, 3042, 4674, 4682, 1587,
     2345, 1301, 4651, 4652, 4678, 4681, 4691, 4703, 4692, 4726,
     4738, 4741, 4743, 4748, 4753, 4782, 4764, 5663, 5663,  971,
     4832, 4855, 4828,  231,  236,  238,  241,  239, 4755, 4833,

     4858, 4863, 4868, 4870, 4875, 4884, 4873, 4910, 4915, 4922,
     1003, 4924, 4927, 1184, 4925, 4940, 4962, 4967, 2581, 1273,
     1330, 1379, 1517, 1546, 1661, 1668, 1874, 4974, 5663, 4977,
     4979, 4984, 4993, 5000, 5018, 5023, 5030, 5033, 5040, 5098,
     5075, 5663,  253, 5663, 5663,  305, 5094, 5096, 5101, 5106,
      371, 5113, 5115, 5136, 5150, 5152, 5162, 1882, 5175, 5177,
     5163, 5200, 5202, 5214, 5221, 5233, 1908, 5283, 5215,  325,
     5663, 5279, 5256,  276, 5281, 5286, 5291, 5296, 5297, 5326,
     5335, 5308, 5338, 5347, 5349, 5356, 5361, 5394,  332, 5378,
     5395,  306, 5663,  753, 5405, 5404, 5438, 5421, 5443, 5444,

      342, 5450, 5460,  377,  397,  781, 5461, 5490, 5495, 5500,
     5663, 5502, 5507, 5512, 5513, 5542, 5547, 5663, 5616,  112,
     5618, 5621, 5623, 5625, 5627, 5629, 5631, 5634, 5637, 5639,
     5641, 5643, 5645, 5647, 5649, 5651, 5653, 5656, 5659
    } ;

static const flex_int16_t yy_def[740] =
    {   0,
      718,    1,  718,  718,  718,  718,  719,  718,  718,  720,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  721,  721,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  718,  718,  718,  718,
      718,  718,  719,  718,  722,  718,  720,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  723,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,  724,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  112,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  718,  718,  718,  719,  719,  722,  718,  718,  718,
      718,  718,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  725,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  718,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  718,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,  718,
       29,   29,   29,   29,   29,   29,  718,   29,   29,   29,
       29,   29,   29,   29,  718,  718,  726,  725,  718,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  718,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  727,   29,  718,   29,   29,
      728,  718,  728,  728,  728,  729,  254,   29,   29,   29,
       29,   29,  718,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  718,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,  718,   29,  718,   29,   29,   29,   29,   29,   29,
       29,  730,   29,   29,  718,  718,  718,  718,  718,  718,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  718,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  718,   29,   29,   29,   29,  723,  723,  723,
      723,  723,  723,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  731,  723,  723,  723,  723,  723,  723,   29,
       29,   29,   29,   29,   29,  718,  718,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  718,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,  718,   29,   29,  732,   29,   29,  718,
      718,  718,  718,  718,  718,  718,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  718,   29,   29,   29,   29,
       29,  723,  723,  723,  723,  723,  723,  723,  723,  723,
       29,   29,   29,   29,   29,  733,  731,  723,  723,  723,
      723,  723,  723,  723,  723,  723,   29,   29,   29,   29,
       29,  718,  718,  718,   29,   29,  723,  723,  723,  723,
      723,  723,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  718,  718,  734,
      732,  735,   29,  718,  718,  718,  718,  718,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      723,   29,   29,  723,   29,   29,   29,   29,  723,  723,
      723,  723,  723,  723,  723,  723,  723,   29,  718,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  736,
       29,  718,  718,  718,  718,  718,   29,   29,   29,   29,
      718,   29,   29,   29,   29,   29,   29,  723,   29,   29,
       29,   29,   29,   29,   29,   29,  737,  736,   29,  718,
      718,   29,   29,  738,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  718,   29,
       29,  738,  718,  739,   29,   29,   29,   29,   29,   29,

      718,   29,   29,  738,  738,  739,   29,   29,   29,   29,
      718,   29,   29,   29,   29,   29,   29,    0,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

static const flex_int16_t yy_nxt[5751] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    4,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   33,   33,   35,   36,   37,   38,   39,   33,   40,
       41,   42,   43,   44,   45,   33,   46,   33,    4,    4,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   33,
       33,   35,   36,   37,   38,   39,   33,   40,   41,   42,
       43,   44,   45,   33,   46,   47,   48,   49,   51,   49,
       51,   54,   56,   56,   71,   72,   61,   61,   61,   61,

       61,   61,   61,   61,   63,   50,   50,   50,   50,   50,
       50,   50,   50,   62,   57,   65,   64,   66,   66,   66,
       66,   66,   66,   66,   66,   68,   69,   70,   77,  102,
       54,   73,   77,   77,   74,   75,   77,  103,  510,   54,
      104,   62,  105,  106,   55,   65,   54,  164,  164,  164,
      164,  164,  164,  164,  164,  564,   77,  102,   56,   73,
       77,   77,   74,   75,   77,  103,  510,   51,  104,   51,
      105,  106,  476,  477,   76,   76,   76,   76,   76,   76,
       76,   76,   73,   55,  513,  325,  326,   77,   78,   79,
      511,  107,   55,   53,  563,   77,  166,  512,  108,   55,

       80,  109,  362,  514,  110,   81,   82,  362,  515,  516,
       56,   56,  513,  362,   76,   77,   78,   79,  511,  107,
      594,  362,  162,   77,  162,  512,  108,   53,   80,  109,
      166,  514,  110,   81,   82,   73,  515,  516,   74,   75,
      163,  163,  163,  163,  163,  163,  163,  163,  594,  167,
       76,   76,   76,   76,   76,   76,   76,   76,  595,  596,
       77,  597,  362,   83,   77,  111,  598,  642,   77,   84,
      643,  113,  644,  112,   85,  114,   56,  645,   86,  115,
       87,  693,  646,  167,  116,  117,  595,  596,   77,  597,
       76,   83,   77,  111,  598,  642,   77,   84,  643,  113,

      644,  112,   85,  114,  670,  645,   86,  115,   87,   88,
      646,  693,  116,  117,  118,   77,   89,   90,   77,  433,
       91,   77,  119,   92,   77,  121,   93,   73,  120,   77,
       74,   75,  670,   94,  694,  122,   73,   88,  172,   74,
       75,  671,  118,   77,   89,   90,   77,  540,   91,   77,
      119,   92,   77,  121,   93,   73,  120,   77,   74,   75,
      171,   94,   95,  122,  694,  689,   96,  157,   77,  671,
       97,  158,  651,   77,  651,   77,  674,   77,  701,   77,
       73,   77,  693,   74,   75,  161,   67,  711,   73,   77,
       95,   74,   75,  689,   96,  157,   77,  170,   97,  158,

      556,   77,  693,   77,   52,   77,  701,   77,   77,   77,
      134,   67,   77,  161,  135,  711,   77,   77,  136,   98,
       60,   99,  100,  137,  138,   73,   77,   59,   74,   75,
       77,  101,   58,   52,   77,  694,   77,  718,  134,  156,
       77,  718,  135,  718,   77,  718,  136,   98,  718,   99,
      100,  137,  138,   73,   77,  694,   74,   75,   77,  101,
       77,  123,   77,  718,   77,  124,   77,  156,   77,  718,
       77,  718,  718,  159,  160,  125,  718,  126,  127,  128,
       73,  718,   77,   74,   75,  718,   77,  718,   77,  123,
       77,  718,   77,  124,   77,  532,   77,  718,   77,  718,

      533,  159,  160,  125,  718,  126,  127,  128,   77,  718,
       77,  718,   77,  718,   77,  718,  129,   73,   77,  130,
       74,   75,  131,  718,  718,  132,  718,  133,   61,   61,
       61,   61,   61,   61,   61,   61,   77,  718,  718,   73,
       77,  718,   74,   75,  129,   62,  718,  130,   73,  718,
      131,   74,   75,  132,  534,  133,   77,  718,  139,  535,
      140,   77,  141,  142,  143,   77,  718,  718,  718,   77,
      144,  145,  146,   62,  178,  147,  718,   77,  148,   73,
      718,   77,   74,   75,   77,   77,  139,  718,  140,   77,
      141,  142,  143,   77,  538,  173,  718,   77,  144,  145,

      146,  718,  178,  147,   77,   77,  148,  149,   77,   77,
      718,  150,   77,   77,  151,  152,   73,  718,  718,   74,
       75,  153,  174,  173,  154,  718,   73,  718,  718,   74,
       75,  155,   77,  718,   73,  149,   77,   74,   75,  150,
       77,  536,  151,  152,   73,  718,  537,   74,   75,  153,
      174,  718,  154,  718,  718,  168,  718,  168,  718,  155,
      169,  169,  169,  169,  169,  169,  169,  169,   61,   61,
       61,   61,   61,   61,   61,   61,  163,  163,  163,  163,
      163,  163,  163,  163,   65,   62,   66,   66,   66,   66,
       66,   66,   66,   66,   77,  718,   77,  175,   77,   77,

       77,  176,   77,   77,   77,  718,   77,   77,  718,  179,
      180,  718,  177,   62,   77,   73,  718,   73,   74,   75,
       74,   75,   77,  718,   77,  175,   77,   77,   77,  176,
       77,   77,   77,  718,   77,   77,  718,  179,  180,  181,
      177,   77,   77,   77,   77,   77,   77,   77,  184,   77,
       77,  718,   77,   73,   77,  692,   74,   75,  705,  182,
      718,  183,  186,  718,  185,  718,   77,  181,  539,   77,
       77,   77,   77,   77,   77,   77,  184,   77,   77,  187,
       77,   73,   77,  692,   74,   75,  705,  182,  718,  183,
      186,   77,  185,   77,   77,   77,   77,  194,   77,   77,

       77,   77,   73,  718,  189,   74,   75,  187,  188,  195,
      190,  706,   73,   77,  191,   74,   75,   77,  718,   77,
      718,   77,   77,   77,   77,  194,   77,   77,   77,   77,
       77,   73,  189,  192,   74,   75,  188,  195,  190,  706,
      193,   77,  191,   77,  718,   77,  554,   77,   77,   77,
       77,   77,   77,   77,   77,  718,   77,   77,   77,   77,
      200,  192,  196,   77,  197,  198,  214,   77,  193,  201,
      199,   77,  718,  718,  718,   77,   77,   77,   77,   77,
       77,   77,   77,  718,   77,   77,   77,   77,  200,  718,
      196,   77,  197,  198,  214,   77,  202,  201,  199,   77,

       77,  718,  203,   77,   77,  204,   77,   77,   77,   73,
       77,   77,   74,   75,   77,   77,  718,  205,   73,   77,
      718,   74,   75,  718,  202,  718,  206,   77,   77,  718,
      203,   77,   77,  204,  718,   77,   77,  718,   77,   77,
      207,  718,   77,   77,   77,  205,   77,   77,  209,  208,
      718,  718,   77,   77,  206,  210,   73,   77,  718,   74,
       75,  211,  718,  718,  718,  718,   77,  212,  207,  718,
       77,  555,   77,  718,   77,   73,  209,  208,  588,  589,
       77,   77,  718,  210,   73,   77,  718,   74,   75,  211,
       77,  718,  718,   73,   77,  212,   74,   75,   77,   76,

       76,   76,   76,   76,   76,   76,   76,   73,  611,  215,
       74,   75,   77,   77,  718,  219,   77,   77,   77,  220,
       77,   77,   77,   77,   77,  718,   77,  216,   77,  718,
      217,  218,   77,  718,  718,  718,  718,  215,  718,   76,
       77,   77,  718,  219,   77,   77,   77,  220,   77,   77,
       77,   77,   77,  718,   77,  216,   77,  718,  217,  218,
       77,   77,   77,  718,  225,   77,   77,  226,  718,   77,
       77,  221,  718,  718,   77,  227,  222,  718,   77,  223,
      224,  228,   77,   77,  718,  718,  718,   77,  718,   77,
       77,   77,  225,   77,   77,  226,  229,   77,   77,  221,

      718,  230,   77,  227,  222,  718,   77,  223,  224,  228,
       77,   77,  231,  718,  232,   77,   77,   77,  233,   77,
       77,   77,  718,  234,  229,   77,  718,  718,   77,  230,
       77,  235,   77,  718,   77,  718,   77,  718,   77,  718,
      231,  718,  232,  718,   77,   77,  233,  718,   77,   77,
      718,  234,  718,   77,   77,  718,   77,  236,   77,  235,
       77,   77,   77,  718,   77,   77,  718,  237,   77,   77,
      718,   77,   77,   77,  238,   77,   77,   77,  718,   77,
      241,   77,   77,  718,  239,  236,   77,  240,   73,   77,
       77,   74,   75,   77,  718,  237,   77,   77,  718,   77,

       77,   77,  238,   77,   77,   77,   77,   77,  241,   77,
      242,  718,  239,   77,   77,  240,   77,   77,  243,   77,
       77,   77,  718,   77,   77,   77,  244,   77,  718,   77,
      718,   77,  718,   77,   77,   77,  718,  718,  242,  246,
      718,   77,   77,  718,   77,   77,  243,   77,   77,   77,
      718,   77,   77,   77,  244,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  247,  246,  718,   77,
      245,   77,  248,   77,  250,   77,  718,   73,  718,   77,
       74,   75,  249,  718,   77,  718,   77,  718,   77,  718,
       77,  718,   77,   77,  247,  718,  718,   77,  245,   77,

      248,   77,  250,   77,  718,   73,  718,   77,   74,   75,
      249,  251,   77,  252,  253,  718,   77,  718,  259,  718,
       77,   77,  718,  254,  255,  627,  256,  718,   77,  257,
      258,  260,   77,  718,   73,  718,   77,   74,   75,  251,
       77,  252,  253,  718,   77,  718,  259,  718,   77,   77,
      718,  254,  255,  718,  256,  718,   77,  257,  258,  260,
       77,   77,  262,  718,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  718,  266,   77,   77,  718,   77,  263,
      261,  265,   77,   73,  264,  718,   74,   75,  267,   77,
      262,  718,  718,   77,   77,   77,   77,   77,   77,   77,

       77,  718,  266,   77,   77,  718,   77,  263,  261,  265,
       77,   77,  264,  274,   77,   77,  267,   77,   77,   77,
      718,   77,   77,   77,  268,  269,   77,   77,  270,   73,
       77,   77,   74,   75,   77,  718,  718,  718,  718,   77,
      271,  274,   77,   77,  614,   77,   77,   77,  718,   77,
       77,   77,  268,  269,   77,   77,  270,   77,   77,   77,
      718,  272,   77,   77,  718,   77,  718,   77,  271,   77,
      718,   77,  718,   77,  273,   77,  275,   77,   77,  277,
       77,  718,   77,   77,   77,   77,   77,  718,   77,  272,
      278,   77,  276,   77,  718,   77,  718,   77,  718,   77,

      718,   77,  273,   77,  275,   77,   77,  277,   77,  279,
       77,   77,   77,   77,   77,   77,   77,  280,  278,   77,
      276,   73,  718,   77,   74,   75,  718,   77,   77,  281,
      282,   77,   77,  718,   77,   77,   77,  279,  286,  284,
      718,   77,  287,   77,   77,  280,  283,   77,   77,  718,
       73,   77,   77,   74,   75,   77,   77,  281,  282,   77,
       77,  285,   77,   77,   77,   77,  286,  284,  718,   77,
      287,  718,   77,   77,  283,   77,   77,   77,  718,   77,
       77,   77,  288,   77,   73,   77,  289,   74,   75,  285,
      718,   73,  718,   77,   74,   75,  718,   77,  162,  548,

      162,   77,  718,   77,  549,   77,  625,   77,  718,   77,
      288,   77,  718,   77,  289,  718,  163,  163,  163,  163,
      163,  163,  163,  163,   65,  718,  164,  164,  164,  164,
      164,  164,  164,  164,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  718,   73,   77,   77,   74,   75,
       77,   77,   73,  290,  718,   74,   75,  718,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  718,   77,   77,   77,  718,   77,   77,

       77,  290,   77,  718,  292,   77,   77,  718,   77,  293,
       77,  291,   77,   77,  295,   77,   77,   77,   77,  296,
       77,   77,   77,   77,   77,  297,  718,  294,   77,  298,
       77,  718,  292,   77,   77,  718,   77,  293,   77,  291,
       77,   77,  295,   77,   77,   77,   77,  296,   77,   77,
       77,   77,   77,  297,   77,  294,   77,   77,   77,  299,
       77,   77,   77,  300,   77,   77,   77,   77,   77,   77,
       77,   77,  718,   77,   77,   77,   77,   77,  301,  718,
       77,  302,   77,  718,   77,   77,   77,  299,   77,   77,
       77,  300,   77,   77,   77,   77,   77,   77,   77,   77,

      303,   77,   77,   77,   77,   77,  301,   77,   77,  302,
      305,   77,  718,   77,   77,   77,  718,   77,   77,   77,
      304,   77,   77,   77,  306,   77,  308,   77,  303,   77,
       77,  718,   77,   77,  307,   77,   77,  718,  305,   77,
      317,   77,   77,   77,  718,   77,   77,   77,  304,   77,
       77,   77,  306,   77,  308,   77,   77,   77,   77,   77,
       77,   77,  307,  309,   77,   77,   77,   77,  718,   77,
       77,   77,   77,   77,   77,  318,  319,  718,   73,   77,
       77,   74,   75,  718,   77,  718,   73,   77,   77,   74,
       75,  309,   77,   77,   77,   77,  310,   77,   77,   77,

       77,   77,   77,  318,  319,  718,   77,   77,   77,   77,
       77,  718,   73,   77,   77,   74,   75,   77,  324,  718,
      321,  718,   77,  718,  320,   77,   77,  311,   77,   77,
      312,  718,   77,  313,   77,  718,   77,   77,   77,  322,
      314,   77,   77,  718,  315,   77,  324,  316,  321,  718,
       77,  718,  320,   77,   77,  311,   77,   77,  312,  718,
       77,  313,   77,  718,   77,   77,   77,  322,  314,   77,
       77,  718,  315,   77,  718,  316,  718,  323,  718,  718,
      718,  718,  718,  718,   73,  718,  718,   74,   75,  718,
       77,  329,   73,   77,   77,  325,  326,   77,   77,  550,

      718,   77,  718,  718,  551,  323,  718,  327,  327,  327,
      327,  327,  327,  327,  327,  718,   77,   77,  330,  718,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  718,
       77,   77,   77,  718,  718,  718,   77,  332,  718,  718,
      718,  718,  331,  333,   77,   77,  330,  327,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  718,   77,   77,
       77,  718,  718,  718,   77,  332,  718,  718,   77,   77,
      331,  333,  334,  335,   77,  718,   77,   77,   77,   77,
       77,  718,   77,   77,   77,  718,  718,   77,   77,  718,
      718,  718,  718,  718,  336,   77,   77,   77,  337,   77,

      334,  335,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  338,   77,   77,   77,  718,  718,
      718,   77,  336,   77,  718,   77,  337,   77,  339,   77,
       77,   77,   77,  718,   77,   77,  340,   77,   77,   77,
       77,   77,  338,   77,   77,   77,  718,  342,   77,   77,
      718,  343,   77,   77,  341,   77,  339,   77,   77,   77,
       77,   77,   77,   77,  340,   77,   77,   77,   77,   77,
       77,   77,   77,  718,  344,  342,   77,  718,   77,  343,
       77,  718,  341,   77,  345,  718,   77,   77,  718,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,  718,  344,  718,   77,  346,   77,   77,   77,   77,
      347,   77,   77,   77,   77,   77,  718,   77,   77,   77,
       77,   77,   77,   77,   77,  349,  348,   77,   77,   77,
      718,  718,   77,  346,  718,   77,   77,   77,  347,   77,
       77,   77,   77,   77,  718,   77,   77,  718,   77,   77,
       77,  718,   77,  349,  348,  350,   77,   77,   77,  351,
       77,  718,  352,  718,   77,  358,   77,  718,   77,   77,
       77,  718,  718,   77,   77,  718,   77,   77,   77,  353,
       77,  718,  354,  350,   77,   77,   77,  351,   77,   77,
      352,   77,   77,   77,   77,   77,   77,   77,  355,   77,

       77,   77,  356,  718,   77,   77,  718,  353,   77,  718,
      354,  718,   77,   77,   77,  357,   77,   77,   77,   77,
       77,   77,   77,   77,  718,  718,  355,   77,   77,  718,
      356,   77,   77,  360,  359,   77,   77,   77,  718,   77,
       77,   77,   77,  357,   77,   77,   77,  718,   77,   73,
       77,   73,   74,   75,   74,   75,  718,  718,  718,   77,
      718,  360,  359,   77,  626,   77,  552,   77,  718,   77,
      718,  553,  718,   77,  361,  361,  362,  361,  363,  361,
      361,  364,  365,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  366,  366,  366,  366,  366,  366,  366,

      366,  361,  361,  361,  361,  361,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  361,  366,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  361,
      361,   77,   77,   77,  368,   77,  369,   77,   77,   77,
       77,   77,   77,   77,  718,  718,   77,   77,  718,  718,
      372,   77,  370,  718,  718,  718,  373,  718,  371,   77,
       77,   77,  368,   77,  369,   77,   77,   77,   77,   77,

       77,   77,  718,  718,   77,   77,  718,   77,  372,   77,
      370,   77,  718,  374,   77,   77,  371,   77,   77,   77,
       77,   77,   77,  376,   77,  375,   77,   77,  377,   77,
       77,  718,  378,   77,   77,   77,  718,   77,  718,   77,
      718,  374,   77,   77,  379,   77,   77,   77,   77,   77,
       77,  376,   77,  375,   77,   77,  377,   77,   77,   77,
      378,   77,   77,   77,  718,   77,   77,   77,  718,   77,
       77,   77,  379,   77,   77,   77,   77,  381,   77,   77,
       77,  380,   77,  718,   77,   73,   77,   77,   74,   75,
      383,   77,  718,  382,   77,   77,  718,   77,   77,   77,

      658,   77,   77,   77,   77,  381,   77,   77,   77,  380,
       77,  718,   77,  718,   77,   77,   77,  718,   77,   77,
       77,  382,   77,  384,   77,   77,   77,  718,   77,  388,
       77,  385,   77,   77,   77,  718,   77,  718,   77,  718,
      718,  387,  718,   77,   77,  718,   77,   77,   77,  386,
       77,  384,   77,   77,   77,  718,   77,  388,   77,  385,
       77,   77,   77,   77,   77,  389,   77,   77,  718,  387,
      391,   77,  718,  718,   77,   77,  390,  386,   77,  392,
       77,   77,   77,   77,  393,   77,   77,  718,   77,  394,
       77,   77,   77,  389,  718,   77,   77,  718,  391,   77,

       77,  718,   77,   77,  390,  396,   77,  392,   77,   77,
       77,   77,  393,   77,   77,   77,   77,  394,   77,   77,
       77,   77,   77,   77,   77,   77,  399,   77,   77,   77,
       77,   77,  397,  396,  395,   77,  718,   77,  400,  718,
      398,  401,  718,   77,  402,   77,  718,   77,   77,   77,
       77,   77,   77,   77,  399,   77,   77,   77,   77,   77,
      397,  718,  395,   77,  718,   77,  400,   77,  398,  401,
       77,   77,  718,   77,   77,   77,   77,  403,   77,  718,
       77,  404,   77,  718,   77,   77,   77,  718,  718,   77,
       77,  718,  405,   77,  718,   77,   77,  718,   77,   77,

       77,  718,   77,   77,   77,  403,   77,   77,   77,  406,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  407,
      405,   77,   77,   77,   77,   77,  409,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  406,   77,   77,
       77,  718,   77,   77,   77,  410,  718,  407,  408,  718,
       77,   77,   77,   77,  409,   77,   77,   77,   77,   77,
       77,   77,   77,  718,   77,  718,   77,  718,   77,  718,
       77,  411,   77,  410,   77,   77,  408,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  718,  412,   77,   77,
      718,  718,   77,   77,  413,  718,   77,   77,  718,  411,

       77,  718,   77,   77,  718,   77,   77,   77,  414,   77,
       77,   77,  718,   77,  718,  412,  718,   77,  718,  718,
      415,   77,  413,  416,  421,   77,  417,   77,   77,  718,
       77,   77,   77,  418,   77,   77,  414,  419,   77,  718,
      420,   77,  718,  422,  425,   77,  424,  718,  415,   77,
      423,  416,  421,  718,  417,   77,   77,  718,   77,   77,
       77,  418,   77,   77,  718,  419,   77,  718,  420,   77,
      718,  422,  425,   77,  424,   77,  718,   77,  423,   77,
       77,  718,   77,   77,   77,  718,   77,  427,   77,   77,
       77,  428,   77,   77,  718,  718,  429,   77,   77,  426,

       77,  430,   77,   77,  718,   77,   77,   77,   77,  431,
       77,   77,   77,   77,   77,  427,   77,   77,   77,  428,
       77,   77,  718,  718,  429,   77,   77,  426,   77,  430,
       77,   77,   77,   77,   77,   77,   77,  431,  718,   77,
       77,   77,  718,  718,  718,  718,   73,  718,  718,   74,
       75,  432,  718,  718,   73,  718,  718,  325,  326,   77,
       77,  619,  718,   77,   77,  718,  620,   77,   77,  327,
      327,  327,  327,  327,  327,  327,  327,  718,  434,  432,
      718,  718,   77,   77,  435,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  436,   77,  718,   77,  718,

      718,  718,  718,  437,  718,  718,  434,  718,  718,  327,
       77,   77,  435,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  436,   77,   77,   77,  718,   77,   77,
      718,  437,   77,   77,  440,   77,   77,  718,   77,   77,
      443,  718,   77,   77,   77,  718,  718,  439,   77,  438,
      442,  441,   77,   77,  718,  718,   77,   77,  718,  718,
       77,   77,  440,   77,   77,   77,   77,   77,  718,   77,
       77,   77,   77,   77,  718,  439,   77,  438,  442,  441,
       77,   77,  718,   77,   77,   77,  444,   77,   77,   77,
       77,   77,   77,   77,   77,  446,  718,   77,   77,  718,

      718,   77,  445,  447,  718,  718,  718,  718,  718,   77,
      718,   77,   77,   77,  444,   77,   77,   77,   77,   77,
       77,   77,   77,  446,  718,  454,   77,  718,  718,   77,
      445,  447,  448,  449,  450,  451,  452,   77,  453,  718,
      718,   77,   77,  718,   77,   77,   77,   77,   77,   77,
      459,   77,   77,  454,   77,  456,  455,   77,   77,  718,
       77,  457,   77,  718,   77,   77,  718,  458,   77,   77,
       77,  718,   77,   77,   77,   77,   77,  460,  459,   77,
       77,  718,   77,  456,  455,  718,   77,  718,   77,  457,
       77,  718,   77,   77,   77,  458,   77,   77,   77,   77,

      718,   77,   77,   77,  718,  460,   77,   77,  718,  718,
       77,  470,  718,  461,   77,   77,  718,  718,  462,   77,
      718,   77,   77,  718,  718,   77,   77,   77,  718,   77,
       77,   77,  718,   73,   77,   77,   74,   75,   77,  470,
      718,  461,   77,   77,  718,  718,  462,   77,   76,   76,
       76,   76,   76,   76,   76,   76,  464,  465,  466,  467,
      468,   77,  469,  472,  718,  471,   77,   77,   77,   77,
      479,   77,   77,  718,   77,  718,   77,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,   76,   77,
      718,  472,  718,  471,   77,   77,   77,   77,  479,   77,

       77,  718,   77,  718,   77,  361,  361,  362,  361,  363,
      361,  361,  364,  365,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  718,  718,  718,  718,  718,  718,
      718,  718,  361,  361,  361,  361,  361,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      718,  473,  718,  480,  718,  474,   77,   77,  475,  478,
       77,  481,  718,  361,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  718,  473,
      718,  480,  718,  474,   77,   77,  475,  478,   77,  481,
      361,  361,   77,   77,   77,   77,  718,  482,  483,   77,

      484,   77,   77,   77,   77,   77,   77,  485,   77,   77,
       77,  718,   77,   77,   77,  718,   77,  718,  718,  486,
       77,   77,   77,   77,   77,  482,  483,   77,  484,   77,
       77,   77,   77,   77,   77,  485,   77,   77,   77,  489,
       77,   77,   77,  718,   77,  718,   77,  486,   77,   77,
       77,  487,   77,   77,   77,   77,  718,   77,  718,  490,
      718,  718,  718,   77,   77,  718,  488,   77,   77,  718,
      718,   77,   77,  718,   77,   77,  718,   77,   77,  487,
       77,   77,   77,   77,   77,   77,  718,  490,   77,   77,
      718,   77,   77,   77,  488,   77,   77,   77,  491,   77,

       77,   77,  492,   77,  718,   77,   77,   77,   77,   77,
      494,   77,   77,  718,   77,   77,   77,   77,  493,   77,
       77,   77,  718,   77,  495,   77,  491,   77,   77,   77,
      492,  718,   77,   77,   77,   77,  496,   77,  494,   77,
       77,  718,   77,   77,  718,   77,  493,   77,   77,   77,
      497,   77,  495,   77,  718,   77,   77,   77,  718,   77,
       77,   77,  499,   77,  496,   77,   77,   77,   77,  718,
       77,  498,   77,   77,   77,  718,   77,   77,  497,  718,
       77,   77,  718,  504,  718,   77,  718,   77,   77,   77,
      499,   77,   77,   77,   77,   77,   77,   77,   77,  498,

       77,  501,   77,  500,   77,   77,   77,  718,   77,   77,
       77,  502,  718,   77,   77,  718,   77,   77,   77,  503,
       77,  718,   77,  718,   77,   77,   77,  718,   77,  501,
      718,  500,  506,   77,   77,  505,   77,   77,   77,  502,
      718,   77,   77,  718,  718,   77,   77,  503,  718,  718,
       77,  718,  718,   77,   77,   73,   77,   77,   74,   75,
      506,   77,  718,  505,   77,  718,  718,  508,  718,  718,
       76,   76,   76,   76,   76,   76,   76,   76,  718,   77,
       77,   77,  718,  509,   77,   77,   77,   77,   77,   77,
       77,  718,   77,   77,   77,  508,   77,   77,  517,  718,

       77,   77,  718,  718,  718,  518,  718,   77,   77,   77,
       76,  509,   77,   77,   77,   77,   77,   77,   77,  718,
       77,   77,   77,  519,   77,   77,  517,   77,   77,   77,
       77,   77,   77,  518,   77,   77,   77,   77,  521,   77,
       77,   77,  520,   77,  718,   77,   77,   77,  718,   77,
       77,  519,  523,   77,   77,   77,  718,   77,   77,   77,
       77,  718,   77,   77,   77,  522,  521,   77,   77,  718,
      520,   77,  718,  526,   77,   77,  718,   77,   77,   77,
      523,   77,   77,   77,   77,   77,   77,   77,   77,  718,
       77,  718,   77,  522,   77,  524,   77,   77,   77,  718,

       77,   77,   77,  718,  525,   77,   77,   77,  718,   77,
      718,   77,   77,   77,   77,   77,   77,   77,   77,  718,
       77,  718,   77,  524,   77,   77,   77,   77,   77,   77,
       77,   77,  525,   77,   77,   77,   77,   77,  527,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  718,  718,
      529,  718,   77,  528,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  527,   77,   77,  718,
       77,   77,   77,  718,   77,   77,  530,  718,  529,   77,
       77,  528,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  718,   77,   77,  718,  531,   77,

       77,  718,  718,  718,  530,  542,  718,   77,   77,   77,
      541,   77,   77,   77,  718,   77,   77,   77,  718,   77,
       77,  718,  718,   77,   77,  718,  531,   77,   77,  543,
      718,   77,  718,  542,  718,   77,   77,   77,  541,   77,
       77,   77,  718,   77,   77,   77,  544,   77,   77,  718,
       77,   77,   77,  718,   77,  718,   77,  543,   77,   77,
      718,  718,   77,   77,  718,  545,  565,   77,  718,  718,
       77,   77,  718,  718,  544,   77,   77,  718,   77,   77,
       77,  718,   77,   77,   77,   73,   77,   77,   74,   75,
       77,   77,  718,  545,  565,  718,  557,  718,   77,  718,

      546,  546,  546,  546,  546,  546,  546,  546,  718,   77,
       77,   77,  718,   77,   77,   77,  718,   77,   77,   77,
      718,  718,  718,  718,  557,  718,  558,   77,   77,  559,
      718,   77,   77,  562,  718,   77,   77,   77,   77,   77,
      546,   77,   77,   77,  560,   77,   77,   77,  718,  718,
      718,  718,  561,  718,  558,   77,   77,  559,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  718,   77,
      718,   77,  560,  718,  566,   77,  718,  718,  718,  718,
      561,  718,  718,  718,  718,  718,   77,  718,  718,   77,
       77,  718,   77,   77,   77,  718,   77,   77,  718,  718,

       77,  718,  566,  567,  568,  569,  570,  571,   77,  572,
       77,  573,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  718,   77,   77,  574,   77,   77,   77,   77,
       77,  576,  575,   77,   77,   77,   77,  577,   77,  573,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      718,   77,   77,  574,   77,   77,   77,   77,   77,  576,
      575,   77,   77,   77,   77,  577,   77,   77,   77,  718,
       77,   77,   77,  580,   77,   77,   77,  579,  578,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  718,   77,
       77,  718,   77,  718,   77,   77,   77,  718,   77,   77,

       77,  580,   77,   77,  581,  579,  578,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  718,   77,   77,   77,  582,   77,   77,   77,   77,
       77,  718,  581,   77,   77,  718,   77,   77,   77,  585,
       77,  583,   77,  584,   77,  718,  718,   77,   77,  718,
       77,   77,   77,  582,   77,   77,   77,   77,   77,  718,
       77,   77,   77,  718,   77,   77,   77,  585,   77,  583,
       77,  584,   77,  586,   77,  718,   77,  718,   77,  587,
       77,  718,   77,  718,  718,  718,   77,   77,   77,  592,
      599,   77,   77,  718,   77,   77,   77,  718,  718,  718,

       77,  586,   77,  718,   77,  718,   77,  587,   77,   73,
       77,  718,  588,  589,   77,   77,  718,  592,  599,   77,
      718,  718,   77,   77,  590,  590,  590,  590,  590,  590,
      590,  590,  718,   77,  718,   77,  718,   77,   77,  602,
      600,   77,   77,   77,  718,  718,   77,  593,   77,   77,
      601,   77,   77,   77,  718,   77,   77,   77,  718,   77,
      603,   77,  718,   77,  590,   77,   77,  602,  600,   77,
       77,   77,  718,  718,   77,  593,   77,   77,  601,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  603,   77,
       77,   77,   77,   77,  605,   77,   77,   77,  718,   77,

       77,  718,  606,  718,  604,  718,  718,  718,   77,  718,
       77,  718,   77,  718,   77,  718,   77,   77,   77,   77,
       77,   77,  605,   77,   77,   77,  607,   77,   77,  718,
      606,   77,  604,   77,  718,   77,   77,   77,  718,   77,
       77,   77,  608,  610,   77,   77,  718,   77,  609,   77,
      718,   77,   77,   77,  607,  718,   77,  718,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      608,  610,   77,   77,   77,   77,  609,   77,   77,   77,
       77,   77,  613,  612,   77,  718,   77,  718,   77,  718,
       77,  718,   77,  718,   77,  718,   77,  718,  718,  718,

       77,   73,   77,  718,   74,   75,   77,  718,  718,  718,
      613,  612,  718,  718,  718,  718,  546,  546,  546,  546,
      546,  546,  546,  546,  718,   77,   77,  718,  718,   77,
       77,  615,   77,   77,   77,   77,   77,   77,   77,  616,
       77,   77,   77,   77,  718,   77,   77,  718,  718,  718,
      718,  718,  718,   77,   77,  718,  546,   77,   77,  615,
       77,   77,   77,   77,   77,   77,   77,  616,   77,   77,
       77,   77,   77,   77,   77,  718,   77,  718,   73,  617,
       77,   74,   75,   77,   77,  629,   73,   77,   77,   74,
       75,   77,   77,  621,  618,  718,  718,  718,  622,  718,

       77,  623,  628,  718,   77,  718,  624,  617,   77,  718,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  618,   77,  634,  718,  630,   77,   77,  631,
      628,   77,   77,  718,  718,   77,  718,  718,   77,   77,
      632,   77,   77,   77,  718,   77,   77,  718,  633,   77,
      718,   77,  634,  718,  630,   77,   77,  631,   77,   77,
       77,  718,   77,   77,  718,  718,   77,   77,  632,  635,
       77,   77,  718,  636,   77,   77,  633,   77,   77,   77,
       77,   77,  718,   77,   77,   77,   77,   77,  637,   77,
       77,   77,  718,   77,   77,   77,   77,  635,   77,  718,

       77,  636,   77,   77,   77,   77,   77,   77,   77,   77,
      639,   77,   77,   77,   77,   77,  637,   77,   77,   77,
      638,   77,   77,   77,   77,  718,  718,  718,   77,  718,
      718,  718,   77,  718,  718,  718,   73,  718,  639,  588,
      589,  718,   77,  718,  718,  718,   77,  718,  638,  718,
       77,  590,  590,  590,  590,  590,  590,  590,  590,   73,
       77,  641,   74,   75,   77,   77,  718,  718,   77,   77,
      718,  718,  718,   77,   76,   76,   76,   76,   76,   76,
       76,   76,  718,  718,  647,  651,  718,  651,   77,  641,
       77,  590,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,  648,   77,   77,   77,   77,   77,
      649,   77,  647,   77,   76,   77,   77,  718,   77,  718,
       77,  718,   77,   77,   77,  650,   77,   77,   77,  718,
       77,   77,  648,   77,   77,   77,   77,   77,  649,   77,
      718,   77,   77,   77,   77,  718,  652,   77,   77,  718,
       77,  653,   77,  650,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  718,   77,  655,  718,
       77,  718,   77,  718,  652,   77,   77,  654,   77,  653,
       77,  718,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  655,  718,  656,   77,

       77,  718,   77,   77,   77,  654,   77,  657,   77,   77,
       77,   77,  718,   77,   77,   77,   77,   77,  660,   77,
       77,  661,   77,  718,   77,   77,  656,   77,  659,   77,
       77,   77,   77,   77,   77,  657,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  660,   77,   77,  661,
       77,  662,   77,   77,  663,   77,  659,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  664,   77,   77,
       77,  718,   77,   77,  718,  665,   77,  718,   77,  662,
       77,  718,  663,   77,  718,  666,   77,   77,  718,  718,
       77,   77,  718,   77,   77,  664,  718,   77,   77,  718,

       77,   77,   73,  665,   77,   74,   75,   77,   77,  718,
      718,   77,  718,  666,  718,   77,  669,  667,  667,  667,
      667,  667,  667,  667,  667,  718,   77,  718,   77,  718,
       77,  718,   77,   77,  672,   77,   77,   77,   77,   77,
      718,   77,   77,   77,  669,   77,   77,   77,  718,   77,
      673,   77,  676,   77,   77,   77,   77,  667,   77,  718,
       77,   77,  672,  675,   77,   77,   77,  718,   77,   77,
       77,  718,  677,   77,   77,   77,   77,   77,  673,   77,
      676,   77,   77,   77,   77,  718,  678,  718,   77,  718,
       77,  675,  679,  718,   77,   77,   77,  680,   77,   77,

      677,  718,   77,   77,   77,  718,  718,   77,  718,   77,
       77,  681,   77,   77,  678,   77,   77,   77,   77,  718,
      679,  718,   77,   77,  682,  680,   77,   77,  683,  718,
       77,   77,   77,  718,   77,   77,  684,   77,   77,  681,
       77,   77,   77,   77,  718,   77,   77,   77,  718,  718,
      685,  688,  682,   77,   77,   77,  683,   77,  718,  718,
       77,   77,   77,  718,  684,   77,   77,  718,   77,   77,
       77,  718,  686,   77,   77,   77,  718,  718,  685,  688,
      718,   77,   77,   77,  687,   77,  718,   73,   77,   77,
       74,   75,  691,   77,  718,  718,   77,   77,  718,  718,

      686,   77,  667,  667,  667,  667,  667,  667,  667,  667,
      718,   77,  687,   77,  718,   77,   77,   77,  695,   77,
      691,   77,   77,   77,   77,  690,   77,   77,   77,   77,
      718,   77,   77,   77,  718,  696,   77,   77,  718,   77,
       77,   77,  667,   77,  699,   77,  695,   77,   77,   77,
       77,   77,  718,  690,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  696,   77,   77,   77,   77,   77,  718,
       77,   77,  699,  718,   77,   77,   77,  697,   77,   77,
      718,   77,  718,   77,  698,   77,   77,   77,   77,   77,
       77,  718,   77,   77,   77,   77,   77,   77,   77,   77,

      718,   77,   77,   77,  718,  697,   77,   77,  718,   77,
       77,   77,  698,   77,   77,   77,   77,   77,   77,  718,
       77,   77,  718,  702,   77,   77,   77,   77,  700,   77,
       77,   77,  703,  718,   77,   77,   77,   77,   77,  707,
       77,   77,   77,  708,   77,   77,   77,  718,  718,  718,
      718,  702,  718,   77,   77,   77,  700,   77,   77,   77,
      703,   77,   77,   77,   77,   77,  718,  707,   77,   77,
       77,  708,   77,   77,   77,   77,   77,  709,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  718,  718,   77,
       77,  718,   77,   77,  718,  710,   77,  713,   77,  718,

       77,   77,   77,   77,   77,  709,   77,   77,   77,  712,
       77,   77,   77,  718,   77,  718,  718,  718,   77,  718,
       77,   77,   77,  710,   77,  713,   77,   77,   77,   77,
       77,   77,   77,  718,  715,   77,   77,  712,   77,   77,
       77,  714,   77,   77,   77,   77,  718,   77,   77,   77,
       77,  718,   77,   77,   77,   77,  718,  716,   77,   77,
       77,  718,  715,   77,   77,  718,   77,   77,   77,  714,
       77,   77,   77,   77,   77,   77,   77,   77,  717,   77,
       77,   77,   77,   77,  718,  716,  718,   77,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,   77,  718,  718,  718,  717,   77,  718,  718,
       77,   77,  718,  718,  718,   77,   53,   53,   53,   77,
       77,  165,  165,  165,   76,   76,  213,  213,  328,  328,
      327,  327,  463,  463,  361,  361,  361,  366,  366,  366,
      507,  507,  547,  547,  591,  591,  546,  546,  590,  590,
      640,  640,  668,  668,  667,  667,  692,  692,  692,  704,
      704,  704,    3,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

static const flex_int16_t yy_chk[5751] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    5,    2,
        5,    7,    9,    9,   25,   25,   18,   18,   18,   18,

       18,   18,   18,   18,   19,    2,    2,    2,    2,    2,
        2,    2,    2,   18,  720,   20,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   23,   23,   23,   33,   31,
       53,   76,   33,   31,   76,   76,   33,   31,  415,  165,
       31,   18,   31,   31,    7,   50,  166,   50,   50,   50,
       50,   50,   50,   50,   50,  477,   33,   31,    9,   26,
       33,   31,   26,   26,   33,   31,  415,   51,   31,   51,
       31,   31,  373,  373,   26,   26,   26,   26,   26,   26,
       26,   26,  327,   53,  417,  327,  327,   32,   26,   26,
      416,   32,  165,   55,  476,   32,   55,  416,   32,  166,

       26,   32,  365,  418,   32,   26,   26,  364,  419,  420,
       56,   56,  417,  363,   26,   32,   26,   26,  416,   32,
      510,  362,   49,   32,   49,  416,   32,  167,   26,   32,
      167,  418,   32,   26,   26,   27,  419,  420,   27,   27,
       49,   49,   49,   49,   49,   49,   49,   49,  510,   55,
       27,   27,   27,   27,   27,   27,   27,   27,  512,  514,
       34,  515,  361,   27,   34,   34,  516,  594,   34,   27,
      595,   35,  596,   34,   27,   35,   56,  597,   27,   35,
       27,  674,  598,  167,   35,   35,  512,  514,   34,  515,
       27,   27,   34,   34,  516,  594,   34,   27,  595,   35,

      596,   34,   27,   35,  643,  597,   27,   35,   27,   28,
      598,  692,   35,   35,   36,   28,   28,   28,   36,  329,
       28,   37,   36,   28,   28,   37,   28,  453,   36,   37,
      453,  453,  643,   28,  674,   37,  533,   28,   72,  533,
      533,  646,   36,   28,   28,   28,   36,  453,   28,   37,
       36,   28,   28,   37,   28,  534,   36,   37,  534,  534,
       68,   28,   29,   37,  692,  670,   29,   44,   29,  646,
       29,   44,  651,   29,  651,   44,  651,   29,  689,   29,
      469,   46,  704,  469,  469,   46,   67,  701,  535,   46,
       29,  535,  535,  670,   29,   44,   29,   63,   29,   44,

      469,   29,  705,   44,   52,   29,  689,   29,   30,   46,
       40,   21,   30,   46,   40,  701,   30,   46,   40,   30,
       17,   30,   30,   40,   40,  536,   43,   15,  536,  536,
       43,   30,   14,    6,   43,  704,   30,    3,   40,   43,
       30,    0,   40,    0,   30,    0,   40,   30,    0,   30,
       30,   40,   40,  537,   43,  705,  537,  537,   43,   30,
       38,   38,   43,    0,   38,   38,   45,   43,   38,    0,
       45,    0,    0,   45,   45,   38,    0,   38,   38,   38,
      448,    0,   77,  448,  448,    0,   77,    0,   38,   38,
       77,    0,   38,   38,   45,  448,   38,    0,   45,    0,

      448,   45,   45,   38,    0,   38,   38,   38,   39,    0,
       77,    0,   39,    0,   77,    0,   39,  538,   77,   39,
      538,  538,   39,    0,    0,   39,    0,   39,   61,   61,
       61,   61,   61,   61,   61,   61,   39,    0,    0,  449,
       39,    0,  449,  449,   39,   61,    0,   39,  539,    0,
       39,  539,  539,   39,  449,   39,   41,    0,   41,  449,
       41,   82,   41,   41,   41,   82,    0,    0,    0,   82,
       41,   41,   41,   61,   82,   41,    0,   78,   41,  451,
        0,   78,  451,  451,   41,   78,   41,    0,   41,   82,
       41,   41,   41,   82,  451,   78,    0,   82,   41,   41,

       41,    0,   82,   41,   79,   78,   41,   42,   79,   78,
        0,   42,   79,   78,   42,   42,  540,    0,    0,  540,
      540,   42,   79,   78,   42,    0,  450,    0,    0,  450,
      450,   42,   79,    0,  546,   42,   79,  546,  546,   42,
       79,  450,   42,   42,  549,    0,  450,  549,  549,   42,
       79,    0,   42,    0,    0,   62,    0,   62,    0,   42,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,  163,  163,  163,  163,
      163,  163,  163,  163,   66,   65,   66,   66,   66,   66,
       66,   66,   66,   66,   80,    0,   83,   80,   80,   81,

       83,   81,   80,   81,   83,    0,   84,   81,    0,   83,
       84,    0,   81,   65,   84,  550,    0,  551,  550,  550,
      551,  551,   80,    0,   83,   80,   80,   81,   83,   81,
       80,   81,   83,    0,   84,   81,    0,   83,   84,   85,
       81,   86,   84,   85,   87,   86,   88,   85,   87,   86,
       88,    0,   87,  452,   88,  694,  452,  452,  694,   85,
        0,   86,   89,    0,   88,    0,   89,   85,  452,   86,
       89,   85,   87,   86,   88,   85,   87,   86,   88,   89,
       87,  552,   88,  706,  552,  552,  706,   85,    0,   86,
       89,   90,   88,   93,   89,   90,   91,   93,   89,   90,

       91,   93,  553,    0,   91,  553,  553,   89,   90,   94,
       91,  694,  554,   94,   91,  554,  554,   94,    0,   90,
        0,   93,   92,   90,   91,   93,   92,   90,   91,   93,
       92,  467,   91,   92,  467,  467,   90,   94,   91,  706,
       92,   94,   91,   95,    0,   94,  467,   95,   97,  106,
       92,   95,   97,  106,   92,    0,   97,  106,   92,   96,
       97,   92,   95,   96,   96,   96,  106,   96,   92,   97,
       96,   95,    0,    0,    0,   95,   97,  106,   98,   95,
       97,  106,   98,    0,   97,  106,   98,   96,   97,    0,
       95,   96,   96,   96,  106,   96,   98,   97,   96,   99,

      100,    0,   99,   99,  100,  100,   98,   99,  100,  555,
       98,  101,  555,  555,   98,  101,    0,  100,  556,  101,
        0,  556,  556,    0,   98,    0,  101,   99,  100,    0,
       99,   99,  100,  100,    0,   99,  100,    0,  102,  101,
      102,    0,  102,  101,  103,  100,  102,  101,  103,  102,
        0,    0,  103,  104,  101,  103,  468,  104,    0,  468,
      468,  104,    0,    0,    0,    0,  102,  104,  102,    0,
      102,  468,  103,    0,  102,  590,  103,  102,  590,  590,
      103,  104,    0,  103,  105,  104,    0,  105,  105,  104,
      107,    0,    0,  532,  107,  104,  532,  532,  107,  105,

      105,  105,  105,  105,  105,  105,  105,  611,  532,  107,
      611,  611,  109,  108,    0,  110,  109,  108,  107,  110,
      109,  108,  107,  110,  111,    0,  107,  108,  111,    0,
      109,  109,  111,    0,    0,    0,    0,  107,    0,  105,
      109,  108,    0,  110,  109,  108,  113,  110,  109,  108,
      113,  110,  111,    0,  113,  108,  111,    0,  109,  109,
      111,  112,  114,    0,  113,  112,  114,  114,    0,  112,
      114,  112,    0,    0,  113,  114,  112,    0,  113,  112,
      112,  114,  113,  115,    0,    0,    0,  115,    0,  112,
      114,  115,  113,  112,  114,  114,  115,  112,  114,  112,

        0,  115,  116,  114,  112,    0,  116,  112,  112,  114,
      116,  115,  117,    0,  117,  115,  117,  118,  117,  115,
      117,  118,    0,  118,  115,  118,    0,    0,  119,  115,
      116,  119,  119,    0,  116,    0,  119,    0,  116,    0,
      117,    0,  117,    0,  117,  118,  117,    0,  117,  118,
        0,  118,    0,  118,  120,    0,  119,  120,  120,  119,
      119,  121,  120,    0,  119,  121,    0,  120,  122,  121,
        0,  123,  122,  124,  120,  123,  122,  124,    0,  123,
      123,  124,  120,    0,  121,  120,  120,  122,  614,  121,
      120,  614,  614,  121,    0,  120,  122,  121,    0,  123,

      122,  124,  120,  123,  122,  124,  125,  123,  123,  124,
      125,    0,  121,  126,  125,  122,  127,  126,  127,  128,
      127,  126,    0,  128,  127,  129,  128,  128,    0,  129,
        0,  131,    0,  129,  125,  131,    0,    0,  125,  131,
        0,  126,  125,    0,  127,  126,  127,  128,  127,  126,
        0,  128,  127,  129,  128,  128,  130,  129,  132,  131,
      130,  129,  132,  131,  130,  133,  132,  131,    0,  133,
      130,  134,  132,  133,  134,  134,    0,  620,    0,  134,
      620,  620,  133,    0,  130,    0,  132,    0,  130,    0,
      132,    0,  130,  133,  132,    0,    0,  133,  130,  134,

      132,  133,  134,  134,    0,  572,    0,  134,  572,  572,
      133,  135,  136,  135,  135,    0,  136,    0,  136,    0,
      136,  135,    0,  135,  135,  572,  135,    0,  137,  135,
      135,  137,  137,    0,  621,    0,  137,  621,  621,  135,
      136,  135,  135,    0,  136,    0,  136,    0,  136,  135,
        0,  135,  135,    0,  135,    0,  137,  135,  135,  137,
      137,  138,  139,    0,  137,  138,  139,  140,  141,  138,
      139,  140,  141,    0,  142,  140,  141,    0,  142,  139,
      138,  141,  142,  622,  140,    0,  622,  622,  142,  138,
      139,    0,    0,  138,  139,  140,  141,  138,  139,  140,

      141,    0,  142,  140,  141,    0,  142,  139,  138,  141,
      142,  143,  140,  148,  144,  143,  142,  148,  144,  143,
        0,  148,  144,  146,  143,  144,  145,  146,  145,  548,
      145,  146,  548,  548,  145,    0,    0,    0,    0,  143,
      146,  148,  144,  143,  548,  148,  144,  143,    0,  148,
      144,  146,  143,  144,  145,  146,  145,  147,  145,  146,
        0,  147,  145,  149,    0,  147,    0,  149,  146,  150,
        0,  149,    0,  150,  147,  151,  149,  150,  152,  151,
      153,    0,  152,  151,  153,  147,  152,    0,  153,  147,
      152,  149,  150,  147,    0,  149,    0,  150,    0,  149,

        0,  150,  147,  151,  149,  150,  152,  151,  153,  154,
      152,  151,  153,  154,  152,  155,  153,  154,  152,  155,
      150,  623,    0,  155,  623,  623,    0,  156,  157,  154,
      155,  156,  157,    0,  159,  156,  157,  154,  159,  157,
        0,  154,  159,  155,  158,  154,  156,  155,  158,    0,
      624,  155,  158,  624,  624,  156,  157,  154,  155,  156,
      157,  158,  159,  156,  157,  160,  159,  157,    0,  160,
      159,    0,  158,  160,  156,  161,  158,  173,    0,  161,
      158,  173,  160,  161,  464,  173,  161,  464,  464,  158,
        0,  570,    0,  160,  570,  570,    0,  160,  162,  464,

      162,  160,    0,  161,  464,  173,  570,  161,    0,  173,
      160,  161,    0,  173,  161,    0,  162,  162,  162,  162,
      162,  162,  162,  162,  164,    0,  164,  164,  164,  164,
      164,  164,  164,  164,  168,  168,  168,  168,  168,  168,
      168,  168,  169,  169,  169,  169,  169,  169,  169,  169,
      174,  175,  176,  177,  174,  175,  176,  177,  174,  175,
      176,  177,  178,  179,    0,  625,  178,  179,  625,  625,
      178,  179,  626,  179,    0,  626,  626,    0,  174,  175,
      176,  177,  174,  175,  176,  177,  174,  175,  176,  177,
      178,  179,  180,    0,  178,  179,  180,    0,  178,  179,

      180,  179,  181,    0,  181,  182,  181,    0,  183,  182,
      181,  180,  183,  182,  184,  185,  183,  186,  184,  185,
      180,  186,  184,  185,  180,  186,    0,  183,  180,  187,
      181,    0,  181,  182,  181,    0,  183,  182,  181,  180,
      183,  182,  184,  185,  183,  186,  184,  185,  189,  186,
      184,  185,  189,  186,  187,  183,  189,  188,  187,  188,
      190,  188,  187,  189,  190,  188,  191,  192,  190,  193,
      191,  192,    0,  193,  191,  192,  189,  193,  190,    0,
      189,  192,  187,    0,  189,  188,  187,  188,  190,  188,
      187,  189,  190,  188,  191,  192,  190,  193,  191,  192,

      194,  193,  191,  192,  194,  193,  190,  195,  194,  192,
      196,  195,    0,  198,  196,  195,    0,  198,  196,  197,
      195,  198,  199,  197,  197,  200,  199,  197,  194,  200,
      199,    0,  194,  200,  197,  195,  194,    0,  196,  195,
      204,  198,  196,  195,    0,  198,  196,  197,  195,  198,
      199,  197,  197,  200,  199,  197,  201,  200,  199,  202,
      201,  200,  197,  202,  201,  205,  204,  202,    0,  205,
      204,  206,  207,  205,  204,  206,  207,    0,  627,  206,
      207,  627,  627,    0,  201,    0,  658,  202,  201,  658,
      658,  202,  201,  205,  204,  202,  203,  205,  204,  206,

      207,  205,  204,  206,  207,    0,  208,  206,  207,  209,
      208,    0,  667,  209,  208,  667,  667,  209,  212,    0,
      209,    0,  212,    0,  208,  203,  212,  203,  210,  203,
      203,    0,  210,  203,  208,    0,  210,  209,  208,  210,
      203,  209,  208,    0,  203,  209,  212,  203,  209,    0,
      212,    0,  208,  203,  212,  203,  210,  203,  203,    0,
      210,  203,  211,    0,  210,  214,  211,  210,  203,  214,
      211,    0,  203,  214,    0,  203,    0,  211,    0,    0,
        0,    0,    0,    0,  465,    0,    0,  465,  465,    0,
      211,  215,  213,  214,  211,  213,  213,  214,  211,  465,

        0,  214,    0,    0,  465,  211,    0,  213,  213,  213,
      213,  213,  213,  213,  213,    0,  215,  216,  216,    0,
      215,  216,  217,  218,  215,  216,  217,  218,  219,    0,
      217,  218,  219,    0,    0,    0,  219,  218,    0,    0,
        0,    0,  217,  219,  215,  216,  216,  213,  215,  216,
      217,  218,  215,  216,  217,  218,  219,    0,  217,  218,
      219,    0,    0,    0,  219,  218,    0,    0,  220,  221,
      217,  219,  220,  221,  222,    0,  220,  221,  222,  223,
      224,    0,  222,  223,  224,    0,    0,  223,  224,    0,
        0,    0,    0,    0,  222,  225,  220,  221,  223,  225,

      220,  221,  222,  225,  220,  221,  222,  223,  224,  226,
      222,  223,  224,  226,  225,  223,  224,  226,    0,    0,
        0,  227,  222,  225,    0,  227,  223,  225,  226,  227,
      228,  225,  229,    0,  228,  230,  229,  226,  228,  230,
      229,  226,  225,  230,  231,  226,    0,  231,  231,  227,
        0,  232,  231,  227,  230,  232,  226,  227,  228,  232,
      229,  233,  228,  230,  229,  233,  228,  230,  229,  233,
      234,  230,  231,    0,  234,  231,  231,    0,  234,  232,
      231,    0,  230,  232,  235,    0,  236,  232,    0,  233,
      236,  237,  238,  233,  236,  237,  238,  233,  234,  237,

      238,    0,  234,    0,  240,  237,  234,  239,  240,  235,
      238,  239,  240,  235,  236,  239,    0,  235,  236,  237,
      238,  241,  236,  237,  238,  241,  239,  237,  238,  241,
        0,    0,  240,  237,    0,  239,  240,  235,  238,  239,
      240,  235,  242,  239,    0,  235,  242,    0,  243,  241,
      242,    0,  243,  241,  239,  242,  243,  241,  244,  243,
      245,    0,  244,    0,  245,  249,  244,    0,  245,  246,
      242,    0,    0,  246,  242,    0,  243,  246,  242,  245,
      243,    0,  246,  242,  243,  247,  244,  243,  245,  247,
      244,  249,  245,  247,  244,  249,  245,  246,  247,  249,

      248,  246,  248,    0,  248,  246,    0,  245,  248,    0,
      246,    0,  250,  247,  252,  248,  250,  247,  252,  249,
      250,  247,  252,  249,    0,    0,  247,  249,  248,    0,
      248,  251,  248,  252,  251,  251,  248,  253,    0,  251,
      250,  253,  252,  248,  250,  253,  252,    0,  250,  571,
      252,  466,  571,  571,  466,  466,    0,    0,    0,  251,
        0,  252,  251,  251,  571,  253,  466,  251,    0,  253,
        0,  466,    0,  253,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  255,  256,  257,  255,  255,  256,  257,  258,  255,
      256,  257,  258,  259,    0,    0,  258,  259,    0,    0,
      259,  259,  257,    0,    0,    0,  260,    0,  258,  255,
      256,  257,  255,  255,  256,  257,  258,  255,  256,  257,

      258,  259,    0,    0,  258,  259,    0,  260,  259,  259,
      257,  260,    0,  261,  262,  260,  258,  261,  262,  263,
      264,  261,  262,  263,  264,  262,  265,  263,  264,  266,
      265,    0,  266,  266,  265,  260,    0,  266,    0,  260,
        0,  261,  262,  260,  266,  261,  262,  263,  264,  261,
      262,  263,  264,  262,  265,  263,  264,  266,  265,  267,
      266,  266,  265,  267,    0,  266,  268,  267,    0,  269,
      268,  270,  266,  269,  268,  270,  271,  269,  272,  270,
      271,  267,  272,    0,  271,  619,  272,  267,  619,  619,
      273,  267,    0,  272,  268,  267,    0,  269,  268,  270,

      619,  269,  268,  270,  271,  269,  272,  270,  271,  267,
      272,    0,  271,    0,  272,  273,  274,    0,  275,  273,
      274,  272,  275,  273,  274,  278,  275,    0,  277,  278,
      276,  274,  277,  278,  276,    0,  277,    0,  276,    0,
        0,  277,    0,  273,  274,    0,  275,  273,  274,  276,
      275,  273,  274,  278,  275,    0,  277,  278,  276,  274,
      277,  278,  276,  279,  277,  279,  276,  279,    0,  277,
      280,  279,    0,    0,  280,  281,  279,  276,  280,  281,
      282,  283,  284,  281,  282,  283,  284,    0,  282,  283,
      284,  279,  286,  279,    0,  279,  286,    0,  280,  279,

      286,    0,  280,  281,  279,  286,  280,  281,  282,  283,
      284,  281,  282,  283,  284,  285,  282,  283,  284,  285,
      286,  287,  288,  285,  286,  287,  288,  289,  286,  287,
      288,  289,  287,  286,  285,  289,    0,  290,  289,    0,
      287,  290,    0,  285,  291,  290,    0,  285,  293,  287,
      288,  285,  293,  287,  288,  289,  293,  287,  288,  289,
      287,    0,  285,  289,    0,  290,  289,  292,  287,  290,
      291,  292,    0,  290,  291,  292,  293,  292,  291,    0,
      293,  294,  295,    0,  293,  296,  295,    0,    0,  296,
      295,    0,  295,  296,    0,  292,  297,    0,  291,  292,

      297,    0,  291,  292,  297,  292,  291,  294,  299,  297,
      295,  294,  299,  296,  295,  294,  299,  296,  295,  299,
      295,  296,  301,  304,  297,  302,  301,  304,  297,  302,
      301,  304,  297,  302,  300,  294,  299,  297,  300,  294,
      299,    0,  300,  294,  299,  302,    0,  299,  300,    0,
      301,  304,  303,  302,  301,  304,  303,  302,  301,  304,
      303,  302,  300,    0,  305,    0,  300,    0,  305,    0,
      300,  303,  305,  302,  306,  309,  300,  307,  306,  309,
      303,  307,  306,  309,  303,  307,    0,  306,  303,  308,
        0,    0,  305,  308,  307,    0,  305,  308,    0,  303,

      305,    0,  306,  309,    0,  307,  306,  309,  308,  307,
      306,  309,    0,  307,    0,  306,    0,  308,    0,    0,
      310,  308,  307,  310,  311,  308,  310,  314,  311,    0,
      312,  314,  311,  310,  312,  314,  308,  310,  312,    0,
      310,  313,    0,  312,  314,  313,  313,    0,  310,  313,
      312,  310,  311,    0,  310,  314,  311,    0,  312,  314,
      311,  310,  312,  314,    0,  310,  312,    0,  310,  313,
        0,  312,  314,  313,  313,  315,    0,  313,  312,  315,
      316,    0,  319,  315,  316,    0,  319,  316,  316,  318,
      319,  318,  320,  318,    0,    0,  320,  318,  321,  315,

      320,  321,  321,  315,    0,  322,  321,  315,  316,  322,
      319,  315,  316,  322,  319,  316,  316,  318,  319,  318,
      320,  318,    0,    0,  320,  318,  321,  315,  320,  321,
      321,  323,  324,  322,  321,  323,  324,  322,    0,  323,
      324,  322,    0,    0,    0,    0,  567,    0,    0,  567,
      567,  324,    0,    0,  328,    0,    0,  328,  328,  323,
      324,  567,    0,  323,  324,    0,  567,  323,  324,  328,
      328,  328,  328,  328,  328,  328,  328,    0,  330,  324,
        0,    0,  330,  331,  331,  332,  330,  331,  333,  332,
      334,  331,  333,  332,  334,  333,  333,    0,  334,    0,

        0,    0,    0,  334,    0,    0,  330,    0,    0,  328,
      330,  331,  331,  332,  330,  331,  333,  332,  334,  331,
      333,  332,  334,  333,  333,  335,  334,    0,  336,  335,
        0,  334,  336,  335,  337,  338,  336,    0,  337,  338,
      339,    0,  337,  338,  340,    0,    0,  336,  340,  335,
      338,  337,  340,  335,    0,    0,  336,  335,    0,    0,
      336,  335,  337,  338,  336,  339,  337,  338,    0,  339,
      337,  338,  340,  339,    0,  336,  340,  335,  338,  337,
      340,  341,    0,  342,  343,  341,  341,  342,  343,  341,
      344,  342,  343,  339,  344,  343,    0,  339,  344,    0,

        0,  339,  342,  344,    0,    0,    0,    0,    0,  341,
        0,  342,  343,  341,  341,  342,  343,  341,  344,  342,
      343,  347,  344,  343,    0,  347,  344,    0,    0,  347,
      342,  344,  346,  346,  346,  346,  346,  348,  346,    0,
        0,  348,  351,    0,  346,  348,  351,  350,  346,  347,
      351,  350,  346,  347,  349,  350,  349,  347,  349,    0,
      352,  350,  349,    0,  352,  348,    0,  350,  352,  348,
      351,    0,  346,  348,  351,  350,  346,  352,  351,  350,
      346,    0,  349,  350,  349,    0,  349,    0,  352,  350,
      349,    0,  352,  353,  354,  350,  352,  353,  354,  355,

        0,  353,  354,  355,    0,  352,  359,  355,    0,    0,
      359,  360,    0,  354,  359,  360,    0,    0,  355,  360,
        0,  353,  354,    0,    0,  353,  354,  355,    0,  353,
      354,  355,    0,  356,  359,  355,  356,  356,  359,  360,
        0,  354,  359,  360,    0,    0,  355,  360,  356,  356,
      356,  356,  356,  356,  356,  356,  357,  357,  357,  357,
      357,  368,  357,  369,    0,  368,  375,  369,  357,  368,
      375,  369,  357,    0,  375,    0,  357,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  356,  368,
        0,  369,    0,  368,  375,  369,  357,  368,  375,  369,

      357,    0,  375,    0,  357,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,    0,    0,    0,    0,    0,    0,
        0,    0,  366,  366,  366,  366,  366,  370,  371,  372,
      374,  370,  371,  372,  374,  370,  371,  372,  374,  376,
        0,  370,    0,  376,    0,  371,  377,  376,  372,  374,
      377,  377,    0,  366,  377,  370,  371,  372,  374,  370,
      371,  372,  374,  370,  371,  372,  374,  376,    0,  370,
        0,  376,    0,  371,  377,  376,  372,  374,  377,  377,
      366,  366,  377,  378,  379,  380,    0,  378,  379,  380,

      380,  378,  379,  380,  381,  382,  384,  381,  381,  382,
      384,    0,  381,  382,  384,    0,  385,    0,    0,  384,
      385,  378,  379,  380,  385,  378,  379,  380,  380,  378,
      379,  380,  381,  382,  384,  381,  381,  382,  384,  388,
      381,  382,  384,    0,  385,    0,  387,  384,  385,  386,
      387,  386,  385,  386,  387,  389,    0,  386,    0,  389,
        0,    0,    0,  389,  388,    0,  386,  392,  388,    0,
        0,  392,  388,    0,  387,  392,    0,  386,  387,  386,
      390,  386,  387,  389,  390,  386,    0,  389,  390,  391,
        0,  389,  388,  391,  386,  392,  388,  391,  390,  392,

      388,  393,  391,  392,    0,  393,  395,  394,  390,  393,
      395,  394,  390,    0,  395,  394,  390,  391,  394,  396,
      397,  391,    0,  396,  397,  391,  390,  396,  397,  393,
      391,    0,  398,  393,  395,  394,  398,  393,  395,  394,
      398,    0,  395,  394,    0,  399,  394,  396,  397,  399,
      399,  396,  397,  399,    0,  396,  397,  400,    0,  401,
      398,  400,  401,  401,  398,  400,  403,  401,  398,    0,
      403,  400,  406,  399,  403,    0,  406,  399,  399,    0,
      406,  399,    0,  409,    0,  400,    0,  401,  405,  400,
      401,  401,  405,  400,  403,  401,  405,  407,  403,  400,

      406,  407,  403,  405,  406,  407,  408,    0,  406,  409,
      408,  408,    0,  409,  408,    0,  405,  409,  410,  408,
      405,    0,  410,    0,  405,  407,  410,    0,  411,  407,
        0,  405,  411,  407,  408,  410,  411,  409,  408,  408,
        0,  409,  408,    0,    0,  409,  410,  408,    0,    0,
      410,    0,    0,  413,  410,  412,  411,  413,  412,  412,
      411,  413,    0,  410,  411,    0,    0,  413,    0,    0,
      412,  412,  412,  412,  412,  412,  412,  412,    0,  414,
      421,  413,    0,  414,  421,  413,  422,  414,  421,  413,
      422,    0,  423,  424,  422,  413,  423,  424,  421,    0,

      423,  424,    0,    0,    0,  423,    0,  414,  421,  425,
      412,  414,  421,  425,  422,  414,  421,  425,  422,    0,
      423,  424,  422,  425,  423,  424,  421,  426,  423,  424,
      427,  426,  429,  423,  427,  426,  429,  425,  427,  430,
      429,  425,  426,  430,    0,  425,  428,  430,    0,  431,
      428,  425,  431,  431,  428,  426,    0,  431,  427,  426,
      429,    0,  427,  426,  429,  428,  427,  430,  429,    0,
      426,  430,    0,  438,  428,  430,    0,  431,  428,  432,
      431,  431,  428,  432,  434,  431,  435,  432,  434,    0,
      435,    0,  434,  428,  435,  434,  436,  437,  438,    0,

      436,  437,  438,    0,  436,  437,  438,  432,    0,  439,
        0,  432,  434,  439,  435,  432,  434,  439,  435,    0,
      434,    0,  435,  434,  436,  437,  438,  440,  436,  437,
      438,  440,  436,  437,  438,  440,  441,  439,  440,  442,
      441,  439,  444,  442,  441,  439,  444,  442,    0,    0,
      444,    0,  445,  442,  446,  440,  445,  454,  446,  440,
      445,  454,  446,  440,  441,  454,  440,  442,  441,    0,
      444,  442,  441,    0,  444,  442,  445,    0,  444,  447,
      445,  442,  446,  447,  445,  454,  446,  447,  445,  454,
      446,  455,  456,  454,    0,  455,  456,    0,  447,  455,

      456,    0,    0,    0,  445,  456,    0,  447,  459,  457,
      455,  447,  459,  457,    0,  447,  459,  457,    0,  455,
      456,    0,    0,  455,  456,    0,  447,  455,  456,  457,
        0,  458,    0,  456,    0,  458,  459,  457,  455,  458,
      459,  457,    0,  460,  459,  457,  458,  460,  461,    0,
      462,  460,  461,    0,  462,    0,  461,  457,  462,  458,
        0,    0,  478,  458,    0,  460,  478,  458,    0,    0,
      478,  460,    0,    0,  458,  460,  461,    0,  462,  460,
      461,    0,  462,  470,  461,  463,  462,  470,  463,  463,
      478,  470,    0,  460,  478,    0,  470,    0,  478,    0,

      463,  463,  463,  463,  463,  463,  463,  463,    0,  471,
      472,  470,    0,  471,  472,  470,    0,  471,  472,  470,
        0,    0,    0,    0,  470,    0,  471,  473,  479,  472,
        0,  473,  479,  475,    0,  473,  479,  471,  472,  474,
      463,  471,  472,  474,  473,  471,  472,  474,    0,    0,
        0,    0,  474,    0,  471,  473,  479,  472,  475,  473,
      479,  480,  475,  473,  479,  480,  475,  474,    0,  480,
        0,  474,  473,    0,  480,  474,    0,    0,    0,    0,
      474,    0,    0,    0,    0,    0,  475,    0,    0,  480,
      475,    0,  483,  480,  475,    0,  483,  480,    0,    0,

      483,    0,  480,  481,  481,  481,  481,  481,  482,  481,
      484,  482,  482,  485,  484,  481,  482,  485,  484,  481,
      483,  485,    0,  481,  483,  484,  486,  487,  483,  488,
      486,  487,  486,  488,  486,  487,  482,  488,  484,  482,
      482,  485,  484,  481,  482,  485,  484,  481,  493,  485,
        0,  481,  493,  484,  486,  487,  493,  488,  486,  487,
      486,  488,  486,  487,  490,  488,  491,  492,  490,    0,
      491,  492,  490,  492,  491,  492,  493,  491,  490,  495,
      493,  494,  496,  495,  493,  494,  496,  495,    0,  494,
      496,    0,  490,    0,  491,  492,  490,    0,  491,  492,

      490,  492,  491,  492,  494,  491,  490,  495,  497,  494,
      496,  495,  497,  494,  496,  495,  497,  494,  496,  498,
      499,    0,  501,  498,  499,  497,  501,  498,  499,  500,
      501,    0,  494,  500,  502,    0,  497,  500,  502,  502,
      497,  498,  502,  500,  497,    0,    0,  498,  499,    0,
      501,  498,  499,  497,  501,  498,  499,  500,  501,    0,
      503,  500,  502,    0,  503,  500,  502,  502,  503,  498,
      502,  500,  505,  505,  506,    0,  505,    0,  506,  506,
      505,    0,  506,    0,    0,    0,  517,  508,  503,  508,
      517,  508,  503,    0,  517,  508,  503,    0,    0,    0,

      505,  505,  506,    0,  505,    0,  506,  506,  505,  507,
      506,    0,  507,  507,  517,  508,    0,  508,  517,  508,
        0,    0,  517,  508,  507,  507,  507,  507,  507,  507,
      507,  507,    0,  509,    0,  520,    0,  509,  518,  520,
      518,  509,  518,  520,    0,    0,  518,  509,  519,  521,
      519,  522,  519,  521,    0,  522,  519,  521,    0,  522,
      521,  509,    0,  520,  507,  509,  518,  520,  518,  509,
      518,  520,    0,    0,  518,  509,  519,  521,  519,  522,
      519,  521,  523,  522,  519,  521,  523,  522,  521,  524,
      523,  527,  525,  524,  525,  527,  525,  524,    0,  527,

      525,    0,  527,    0,  523,    0,    0,    0,  528,    0,
      523,    0,  528,    0,  523,    0,  528,  524,  523,  527,
      525,  524,  525,  527,  525,  524,  528,  527,  525,    0,
      527,  529,  523,  530,    0,  529,  528,  530,    0,  529,
      528,  530,  529,  531,  528,  541,    0,  531,  530,  541,
        0,  531,  542,  541,  528,    0,  542,    0,  544,  529,
      542,  530,  544,  529,  543,  530,  544,  529,  543,  530,
      529,  531,  543,  541,  545,  531,  530,  541,  545,  531,
      542,  541,  545,  543,  542,    0,  544,    0,  542,    0,
      544,    0,  543,    0,  544,    0,  543,    0,    0,    0,

      543,  547,  545,    0,  547,  547,  545,    0,    0,    0,
      545,  543,    0,    0,    0,    0,  547,  547,  547,  547,
      547,  547,  547,  547,    0,  557,  558,    0,    0,  557,
      558,  557,  559,  557,  558,  560,  559,  561,  565,  560,
      559,  561,  565,  560,    0,  561,  565,    0,    0,    0,
        0,    0,    0,  557,  558,    0,  547,  557,  558,  557,
      559,  557,  558,  560,  559,  561,  565,  560,  559,  561,
      565,  560,  566,  561,  565,    0,  566,    0,  568,  566,
      566,  568,  568,  573,  574,  575,  569,  573,  574,  569,
      569,  573,  574,  568,  566,    0,    0,    0,  568,    0,

      566,  569,  574,    0,  566,    0,  569,  566,  566,    0,
      575,  573,  574,  576,  575,  573,  574,  576,  575,  573,
      574,  576,  566,  577,  579,    0,  576,  577,  579,  577,
      574,  577,  579,    0,    0,  578,    0,    0,  575,  578,
      578,  576,  575,  578,    0,  576,  575,    0,  578,  576,
        0,  577,  579,    0,  576,  577,  579,  577,  580,  577,
      579,    0,  580,  578,    0,    0,  580,  578,  578,  580,
      581,  578,    0,  582,  581,  583,  578,  582,  581,  583,
      584,  582,    0,  583,  584,  585,  580,  599,  584,  585,
      580,  599,    0,  585,  580,  599,  587,  580,  581,    0,

      587,  582,  581,  583,  587,  582,  581,  583,  584,  582,
      587,  583,  584,  585,  586,  599,  584,  585,  586,  599,
      586,  585,  586,  599,  587,    0,    0,    0,  587,    0,
        0,    0,  587,    0,    0,    0,  591,    0,  587,  591,
      591,    0,  586,    0,    0,    0,  586,    0,  586,    0,
      586,  591,  591,  591,  591,  591,  591,  591,  591,  592,
      593,  593,  592,  592,  593,  600,    0,    0,  593,  600,
        0,    0,    0,  600,  592,  592,  592,  592,  592,  592,
      592,  592,    0,    0,  600,  606,    0,  606,  593,  593,
      601,  591,  593,  600,  601,  602,  593,  600,  601,  602,

      603,  600,  604,  602,  603,  607,  604,  605,  603,  607,
      604,  605,  600,  607,  592,  605,  606,    0,  601,    0,
      606,    0,  601,  602,  606,  605,  601,  602,  603,    0,
      604,  602,  603,  607,  604,  605,  603,  607,  604,  605,
        0,  607,  608,  605,  606,    0,  608,  609,  606,    0,
      608,  609,  606,  605,  610,  609,  612,  615,  610,  613,
      612,  615,  610,  613,  612,  615,    0,  613,  615,    0,
      608,    0,  616,    0,  608,  609,  616,  613,  608,  609,
      616,    0,  610,  609,  612,  615,  610,  613,  612,  615,
      610,  613,  612,  615,  617,  613,  615,    0,  617,  618,

      616,    0,  617,  618,  616,  613,  628,  618,  616,  630,
      628,  631,    0,  630,  628,  631,  632,  630,  631,  631,
      632,  632,  617,    0,  632,  633,  617,  618,  630,  633,
      617,  618,  634,  633,  628,  618,  634,  630,  628,  631,
      634,  630,  628,  631,  632,  630,  631,  631,  632,  632,
      635,  634,  632,  633,  635,  636,  630,  633,  635,  636,
      634,  633,  637,  636,  634,  638,  637,  636,  634,  638,
      637,    0,  639,  638,    0,  637,  639,    0,  635,  634,
      639,    0,  635,  636,    0,  639,  635,  636,    0,    0,
      637,  636,    0,  638,  637,  636,    0,  638,  637,    0,

      639,  638,  640,  637,  639,  640,  640,  641,  639,    0,
        0,  641,    0,  639,    0,  641,  641,  640,  640,  640,
      640,  640,  640,  640,  640,    0,  647,    0,  648,    0,
      647,    0,  648,  649,  647,  641,  648,  649,  650,  641,
        0,  649,  650,  641,  641,  652,  650,  653,    0,  652,
      649,  653,  653,  652,  647,  653,  648,  640,  647,    0,
      648,  649,  647,  652,  648,  649,  650,    0,  654,  649,
      650,    0,  654,  652,  650,  653,  654,  652,  649,  653,
      653,  652,  655,  653,  656,    0,  655,    0,  656,    0,
      655,  652,  656,    0,  657,  661,  654,  657,  657,  661,

      654,    0,  657,  661,  654,    0,    0,  659,    0,  660,
      655,  659,  656,  660,  655,  659,  656,  660,  655,    0,
      656,    0,  657,  661,  659,  657,  657,  661,  660,    0,
      657,  661,  662,    0,  663,  659,  662,  660,  663,  659,
      662,  660,  663,  659,    0,  660,  664,  669,    0,    0,
      664,  669,  659,  665,  664,  669,  660,  665,    0,    0,
      662,  665,  663,    0,  662,  666,  663,    0,  662,  666,
      663,    0,  665,  666,  664,  669,    0,    0,  664,  669,
        0,  665,  664,  669,  666,  665,    0,  668,  673,  665,
      668,  668,  673,  666,    0,    0,  673,  666,    0,    0,

      665,  666,  668,  668,  668,  668,  668,  668,  668,  668,
        0,  672,  666,  675,    0,  672,  673,  675,  676,  672,
      673,  675,  676,  677,  673,  672,  676,  677,  678,  679,
        0,  677,  678,  679,    0,  679,  678,  679,    0,  672,
      682,  675,  668,  672,  682,  675,  676,  672,  682,  675,
      676,  677,    0,  672,  676,  677,  678,  679,  680,  677,
      678,  679,  680,  679,  678,  679,  680,  681,  682,    0,
      683,  681,  682,    0,  683,  681,  682,  680,  683,  684,
        0,  685,    0,  684,  681,  685,  680,  684,  686,  685,
      680,    0,  686,  687,  680,  681,  686,  687,  683,  681,

        0,  687,  683,  681,    0,  680,  683,  684,    0,  685,
      690,  684,  681,  685,  690,  684,  686,  685,  690,    0,
      686,  687,    0,  690,  686,  687,  688,  691,  688,  687,
      688,  691,  691,    0,  688,  691,  696,  695,  690,  695,
      696,  695,  690,  696,  696,  695,  690,    0,    0,    0,
        0,  690,    0,  698,  688,  691,  688,  698,  688,  691,
      691,  698,  688,  691,  696,  695,    0,  695,  696,  695,
      697,  696,  696,  695,  697,  699,  700,  697,  697,  699,
      700,  698,  702,  699,  700,  698,  702,    0,    0,  698,
      702,    0,  703,  707,    0,  700,  703,  707,  697,    0,

      703,  707,  697,  699,  700,  697,  697,  699,  700,  703,
      702,  699,  700,    0,  702,    0,    0,    0,  702,    0,
      703,  707,  708,  700,  703,  707,  708,  709,  703,  707,
      708,  709,  710,    0,  712,  709,  710,  703,  712,  713,
      710,  708,  712,  713,  714,  715,    0,  713,  714,  715,
      708,    0,  714,  715,  708,  709,    0,  715,  708,  709,
      710,    0,  712,  709,  710,    0,  712,  713,  710,  708,
      712,  713,  714,  715,  716,  713,  714,  715,  716,  717,
      714,  715,  716,  717,    0,  715,    0,  717,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  716,    0,    0,    0,  716,  717,    0,    0,
      716,  717,    0,    0,    0,  717,  719,  719,  719,  721,
      721,  722,  722,  722,  723,  723,  724,  724,  725,  725,
      726,  726,  727,  727,  728,  728,  728,  729,  729,  729,
      730,  730,  731,  731,  732,  732,  733,  733,  734,  734,
      735,  735,  736,  736,  737,  737,  738,  738,  738,  739,
      739,  739,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[234] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "DARIC.l"
#line 6 "DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <sstream>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
extern std::list<std::string> error_list;
extern int status;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 2078 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"
#line 2079 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 54 "DARIC.l"


#line 2299 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 719 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5663 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 56 "DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 57 "DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 58 "DARIC.l"
return NL;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "DARIC.l"
return SS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "DARIC.l"
return INTEGERDIVIDE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "DARIC.l"
return TILDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "DARIC.l"
return TICK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "DARIC.l"
return E;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "DARIC.l"
return SEMICOLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "DARIC.l"
return LE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "DARIC.l"
return GE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "DARIC.l"
return SHL_E;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "DARIC.l"
return SHR_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "DARIC.l"
return PLUS_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "DARIC.l"
return MINUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "DARIC.l"
return NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "DARIC.l"
return SHL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "DARIC.l"
return SHR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "DARIC.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "DARIC.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "DARIC.l"
return MULTIPLY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "DARIC.l"
return DIVIDE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "DARIC.l"
return LT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "DARIC.l"
return GT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "DARIC.l"
return BANKED;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "DARIC.l"
return BGET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "DARIC.l"
return BPUT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "DARIC.l"
return CASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "DARIC.l"
return CHAIN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "DARIC.l"
return CLOSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "DARIC.l"
return DATA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "DARIC.l"
return DIM;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "DARIC.l"
return ELSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "DARIC.l"
return END;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "DARIC.l"
return END_CASE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "DARIC.l"
return END_IF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "DARIC.l"
return END_FN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "DARIC.l"
return END_FN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "DARIC.l"
return END_PROC;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "DARIC.l"
return END_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "DARIC.l"
return END_WHILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "DARIC.l"
return END_CASE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "DARIC.l"
return END_IF;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "DARIC.l"
return END_FN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "DARIC.l"
return END_FN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "DARIC.l"
return END_PROC;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "DARIC.l"
return END_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "DARIC.l"
return END_WHILE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "DARIC.l"
return EOFH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "DARIC.l"
return EXPECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "DARIC.l"
return FIELD;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "DARIC.l"
return FOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "DARIC.l"
return GET;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "DARIC.l"
return GETS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "DARIC.l"
return GETSH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "DARIC.l"
return GOSUB;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "DARIC.l"
return GOTO;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "DARIC.l"
return INKEY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "DARIC.l"
return INKEYS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "DARIC.l"
return INPUT_;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "DARIC.l"
return IF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "DARIC.l"
return IN_;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "DARIC.l"
return LISTFILES;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "DARIC.l"
return LOCAL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "DARIC.l"
return MOUSE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "DARIC.l"
return NEXT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "DARIC.l"
return OF;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "DARIC.l"
return OPENIN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "DARIC.l"
return OPENOUT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "DARIC.l"
return OPENUP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "DARIC.l"
return OTHERWISE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "DARIC.l"
return PRINT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "DARIC.l"
return PTR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "DARIC.l"
return READ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "DARIC.l"
return REPEAT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "DARIC.l"
return RESTORE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "DARIC.l"
return RND;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "DARIC.l"
return RND0;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "DARIC.l"
return RND1;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "DARIC.l"
return OSCLI;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "DARIC.l"
return RETURN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "DARIC.l"
return SPC;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "DARIC.l"
return STEP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "DARIC.l"
return SWAP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "DARIC.l"
return THEN;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "DARIC.l"
return TO;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "DARIC.l"
return TIME;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 152 "DARIC.l"
return TIMES;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "DARIC.l"
return TRACEON;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "DARIC.l"
return TRACEOFF;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 155 "DARIC.l"
return TYPE_;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 156 "DARIC.l"
return UNTIL;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "DARIC.l"
return WHEN;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 158 "DARIC.l"
return WHILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "DARIC.l"
return ASC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "DARIC.l"
return CHRS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "DARIC.l"
return INSTR;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "DARIC.l"
return LEFTS;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "DARIC.l"
return MIDS;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "DARIC.l"
return RIGHTS;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "DARIC.l"
return LEN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "DARIC.l"
return STRS;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "DARIC.l"
return STRINGS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "DARIC.l"
return AND;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "DARIC.l"
return OR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "DARIC.l"
return EOR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "DARIC.l"
return NOT; 
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "DARIC.l"
return FLOAT_;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "DARIC.l"
return INT_;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "DARIC.l"
return ACS;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "DARIC.l"
return DIV;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "DARIC.l"
return MOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "DARIC.l"
return SQR; 
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "DARIC.l"
return LN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "DARIC.l"
return LOG;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "DARIC.l"
return EXP;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "DARIC.l"
return ATN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "DARIC.l"
return TAN;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "DARIC.l"
return COS;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "DARIC.l"
return SIN; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "DARIC.l"
return ASN; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "DARIC.l"
return ABS; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "DARIC.l"
return DEG; 
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "DARIC.l"
return RAD; 
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "DARIC.l"
return SGN; 
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "DARIC.l"
return PI; 
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 195 "DARIC.l"
return VAL; 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 197 "DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 198 "DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "DARIC.l"
return CIRCLE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "DARIC.l"
return CLS;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "DARIC.l"
return CLIPON;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "DARIC.l"
return CLIPOFF;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "DARIC.l"
return COLOUR;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "DARIC.l"
return COLOURBG;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "DARIC.l"
return FILL;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "DARIC.l"
return FLIP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 208 "DARIC.l"
return SHOWFPS;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 209 "DARIC.l"
return GRAPHICS;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 210 "DARIC.l"
return LINE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 211 "DARIC.l"
return RECTANGLE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 212 "DARIC.l"
return PLOT;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 213 "DARIC.l"
return POINT_;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 214 "DARIC.l"
return SHADED;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 215 "DARIC.l"
return TEXT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 216 "DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 217 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 218 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 219 "DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 220 "DARIC.l"
return CREATEFONT;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 221 "DARIC.l"
return MONO15;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 222 "DARIC.l"
return MONO20;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 223 "DARIC.l"
return MONO25;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 224 "DARIC.l"
return MONO30;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 225 "DARIC.l"
return MONO35;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "DARIC.l"
return MONO40;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "DARIC.l"
return MONO50;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "DARIC.l"
return MONO75;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "DARIC.l"
return MONO100;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "DARIC.l"
return PROP15;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 231 "DARIC.l"
return PROP20;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 232 "DARIC.l"
return PROP25;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 233 "DARIC.l"
return PROP30;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 234 "DARIC.l"
return PROP35;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 235 "DARIC.l"
return PROP40;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 236 "DARIC.l"
return PROP50;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 237 "DARIC.l"
return PROP75;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 238 "DARIC.l"
return PROP100;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 239 "DARIC.l"
return SERIF15;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 240 "DARIC.l"
return SERIF20;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 241 "DARIC.l"
return SERIF25;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "DARIC.l"
return SERIF30;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "DARIC.l"
return SERIF35;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 244 "DARIC.l"
return SERIF40;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 245 "DARIC.l"
return SERIF50;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 246 "DARIC.l"
return SERIF75;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 247 "DARIC.l"
return SERIF100;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 248 "DARIC.l"
return TRIANGLE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 250 "DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "DARIC.l"
return RED;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 252 "DARIC.l"
return GREEN;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "DARIC.l"
return YELLOW;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 254 "DARIC.l"
return BLUE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 255 "DARIC.l"
return MAGENTA;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 256 "DARIC.l"
return CYAN;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 257 "DARIC.l"
return WHITE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 258 "DARIC.l"
return BLACK;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 259 "DARIC.l"
return LASTPOS;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 261 "DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 262 "DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 263 "DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 264 "DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 265 "DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 266 "DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 267 "DARIC.l"
return TRANSLATE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 268 "DARIC.l"
return ROTATE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 269 "DARIC.l"
return SCALE; 
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 270 "DARIC.l"
return SOLID; 
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 271 "DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 272 "DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 274 "DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
#ifdef WINDOWS
                        s += ".daric";
#endif

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            // Test exists
                            FILE *f = fopen(s.c_str(), "r");
                            if (!f) {
                                std::stringstream stream;   
                                stream << "Include file '" << s << "' not found";
                                error_list.push_back(stream.str());
                                status = 0;
                            } else {
                                yyin = fopen(s.c_str(), "r");
                                yyfileno++;
                                files_index.insert(std::pair<std::string, int>(s, yyfileno));
                                strcpy(yytext, s.c_str());
                                included_files.insert(std::move(s));
                                file_stack.push(std::move(file));
                                file = yytext;
                                yylineno_stack.push(yylineno);
                                yylineno = 0;
                                yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                                BEGIN(INITIAL);
                            }
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 314 "DARIC.l"
{
                        static int once = 0; 
                        if (once = !once)
                            return NL;
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 329 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 330 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 331 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 332 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 333 "DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 334 "DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 335 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_PROCEDURE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 336 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_INTEGER_FUNCTION; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 337 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_STRING_FUNCTION; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 338 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_REAL_FUNCTION; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 339 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_FUNCTION; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 340 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_FUNCTION; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 341 "DARIC.l"
{ yylval.v_string = strdup(yytext); return REAL_FUNCTION; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 342 "DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 343 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 344 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 345 "DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 346 "DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 227:
#line 349 "DARIC.l"
case 228:
#line 350 "DARIC.l"
case 229:
#line 351 "DARIC.l"
case 230:
#line 352 "DARIC.l"
case 231:
YY_RULE_SETUP
#line 352 "DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 354 "DARIC.l"
/* do nothing */
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 356 "DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3581 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 719 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 719 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 718);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 356 "DARIC.l"

