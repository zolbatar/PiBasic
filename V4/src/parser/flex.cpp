#line 1 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#line 3 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 224
#define YY_END_OF_BUFFER 225
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[699] =
    {   0,
        0,    0,  225,  223,    2,    3,  223,  222,  203,  202,
        7,  218,  219,   24,   22,  220,   23,  204,   25,  201,
        4,    9,   26,    8,   27,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  221,    6,    2,  200,
        2,    3,    0,  205,    0,  203,  202,   16,   14,   15,
      204,    0,    5,   17,  204,  201,    4,   20,   10,   19,
       11,   21,  216,  215,  214,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
       67,   68,  217,  217,  217,  120,  217,  217,  217,  217,
      217,  217,  217,   73,  217,  111,  217,  217,  132,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,   92,  217,  217,  217,  217,  217,  217,  217,  217,
        2,  200,  200,    0,  205,    0,    0,  204,   18,   12,
       13,  128,  116,  110,  101,  127,  123,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  137,
      217,  125,  217,  217,  217,  217,  129,  217,   36,  117,

      217,   38,  217,  112,  122,  217,  217,  217,  217,  217,
      217,  212,   56,   57,  217,  217,  217,  217,  217,  217,
      217,  217,  115,  217,  217,  107,   66,  217,  217,  217,
      217,  121,  217,  217,  118,  217,  217,  217,  113,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  130,  217,
      217,  178,  217,  217,  217,  217,  217,  217,   83,  217,
      217,  217,  131,  217,  217,  126,  217,   88,  119,  217,
      217,  217,  124,  217,  217,  217,  217,  217,  217,  217,
      217,  133,  217,  217,  217,  217,  217,  217,  217,  217,
      181,  217,  217,   32,  217,  102,  217,  217,  217,  217,

      217,  183,   35,  217,  217,  217,   37,    0,  217,  217,
      217,  217,  217,  217,   53,  217,  189,  217,  217,  142,
      143,  217,  210,  211,  212,  212,   58,  217,  217,   62,
      217,  217,  217,  217,  217,  217,  217,  146,  217,  217,
      217,  217,  105,  217,  217,   72,  217,  217,  217,  217,
      148,  217,  217,  217,  217,   79,   80,  217,    0,    1,
      216,  215,  214,  217,  217,  217,  217,  217,  217,  217,
        0,  217,  217,  217,  217,  217,  217,  217,   89,  108,
      217,   90,  151,   91,   93,  217,  217,  217,  135,   97,
      217,  217,   99,  217,  217,  217,  217,  217,   29,  185,

       30,  217,   33,  217,  217,  217,  217,  217,  217,  217,
      217,    0,    0,    0,    0,    0,    0,  217,   42,  217,
       40,  217,  217,  217,  217,  134,   55,  217,  114,   59,
      217,   61,  217,  179,   63,   65,  217,  103,  217,  104,
      217,  217,   70,  217,  217,  217,  217,  217,  217,  217,
       71,  217,  217,  217,  217,   86,  217,  149,   78,  213,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,    0,    0,  217,  195,  217,  217,  190,  217,
      196,  217,  217,  217,   94,  217,  217,  217,   98,  217,
      100,  184,  217,  217,   28,  217,  136,  217,  138,   34,

      140,  217,  209,  217,  217,    0,   48,    0,   47,    0,
        0,    0,  217,  217,  217,  217,  217,   54,  217,   60,
      217,   64,  217,  217,  217,  217,  217,  217,  157,  158,
      159,  160,  161,  162,  163,  164,  192,   74,  217,   76,
      217,  213,  213,  217,  166,  167,  168,  169,  170,  171,
      172,  173,  217,  191,   81,  217,   87,  106,   84,   85,
      194,  217,  150,  217,  217,  217,  217,  217,  217,  217,
      188,  217,  180,  217,  139,  217,  217,  208,  207,  209,
      209,  217,  217,    0,    0,    0,    0,    0,   39,  217,
       43,   44,  217,  217,  217,  217,  186,  217,  217,  182,

      165,   75,  217,  174,  217,   82,  217,  217,  144,  109,
      217,  217,  217,   95,  217,  217,  217,  217,  141,  217,
      206,  217,   46,    0,   50,   51,    0,  217,   45,  217,
      145,    0,  217,  217,  217,  217,  217,  217,  217,  217,
       96,  217,  175,  217,  217,  217,  206,  206,  217,    0,
       52,  217,  217,    0,   69,  217,   77,  147,  217,  217,
      217,  217,  152,  193,  197,   31,  156,  217,    0,  217,
      217,    0,  199,    0,  217,  217,  217,  154,  153,  217,
        0,   41,  217,    0,  199,    0,  217,  217,  176,  187,
       49,  217,  155,  177,  217,  217,  198,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   26,   26,   28,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
        1,   59,    1,    1,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   58,    1,   86,    1,   87,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[88] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
        3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1
    } ;

static const flex_int16_t yy_base[720] =
    {   0,
        0,   86,  438, 5652,   87,  431,   86, 5652,   73,    0,
     5652, 5652, 5652,  402,  397, 5652,  390,   77,   86,   98,
      384, 5652,   96, 5652,   64,  155,  231,  277,  330,  376,
       97,  155,   96,  228,  239,  282,  289,  428,  476,  378,
      524,  575,  394,  335,  434,  349, 5652, 5652,  221,  128,
      166,  402,  125, 5652,  191,  191,    0, 5652, 5652, 5652,
      509,  641,  367, 5652,  649,  667,  359,  330, 5652, 5652,
     5652,  308, 5652, 5652, 5652,  127,  450,  545,  572,  662,
      667,  529,  664,  674,  707,  709,  712,  714,  730,  759,
      764,  790,  761,  777,  811,  827,  816,  846,  867,  868,

      879,  906,  912,  921,  980,  817,  958,  981,  980,  983,
      992, 1029, 1014, 1030, 1051, 1070, 1080, 1085, 1096, 1122,
     1129, 1136, 1139, 1141, 1174, 1181, 1184, 1187, 1193, 1224,
     1199, 1226, 1233, 1239, 1279, 1280, 1296, 1329, 1330, 1331,
     1341, 1374, 1360, 1389, 1386, 1412, 1400, 1426, 1433, 1438,
     1443, 1445, 1460, 1478, 1490, 1491, 1503, 1497, 1524, 1534,
     1588,  657, 1598,  134,  141,  225, 1606, 1614, 5652, 5652,
     5652, 1536, 1609, 1610, 1611, 1612, 1621, 1622, 1651, 1661,
     1664, 1667, 1673, 1674, 1676, 1713, 1716, 1707, 1719, 1725,
     1726, 1728, 1759, 1766, 1769, 1778, 1772, 1781, 1784, 1815,

     1818, 1884, 1825, 1824, 1830, 1831, 1865, 1868, 1887, 1921,
     1877, 1979, 1924, 1975, 1976, 1981, 1982, 1987, 2027, 2028,
     2033, 2038, 2039, 2054, 2068, 2080, 2089, 2091, 2094, 2103,
     2110, 2120, 2129, 2168, 2145, 2150, 2151, 2166, 2163, 2180,
     2201, 2207, 2217, 2219, 2228, 2244, 2259, 2250, 2271, 2290,
     2273, 2296, 2365, 2420, 2421, 2422, 2427, 2432, 2466, 2472,
     2473, 2478, 2479, 2488, 2513, 2518, 2525, 2528, 2530, 2540,
     2567, 2565, 2570, 2577, 2607, 2582, 2617, 2623, 2628, 2629,
     2634, 2646, 2667, 2668, 2669, 2679, 2702, 2690, 2717, 2719,
     2720, 2758, 2736, 2731, 2765, 5652, 2771, 2777, 2776, 2814,

     2792, 2817, 2823, 2844, 2856, 2863, 2833, 2881, 2866, 2905,
     2915, 2904, 2926, 2952, 5652, 2961, 2964, 2966, 2973, 2967,
     2982, 3007, 5652, 5652,  178, 3057,  313, 3030, 3059, 3053,
     3064, 3065, 3086, 3104, 3103, 3109, 3146, 3125, 3155, 3158,
     3164, 3176, 5652, 3230, 3165, 3207, 3223, 3228, 3229, 3246,
     3241, 3267, 3279, 3329, 3339, 5652, 3332, 3334,  260,  219,
      211,  205,  200, 3408,    0, 3337, 3408, 3409, 3410, 3411,
      153, 3448, 3421, 3460, 3465, 3466, 3477, 3475, 3500, 5652,
     3512, 3514, 3535, 3519, 3554, 3541, 3556, 3568, 3575, 3585,
     3587, 3597, 3606, 3608, 3620, 3627, 3637, 3646, 5652, 3639,

     5652, 3653, 3658, 3672, 3693, 3709, 3695, 3707, 3772, 3710,
     3749,  106,  145,  147,  154,  152,  170, 3750, 3772, 3775,
     3787, 3798, 3805, 3789, 3810, 3824, 3827, 3850, 3839, 5652,
     3861, 3862, 3876, 3879, 3902, 3888, 3914, 3891, 3929, 5652,
     3913, 3928, 3931, 3947,  476,  535,  622,  575,  749,  323,
     3940, 3954, 3984, 3985, 3987, 3996, 4014, 3999, 4037, 4068,
     1571, 1971, 2338,  827,  952,  376, 4066, 4068, 4078, 4084,
     4111, 4118,  182,  143, 4123, 4128, 4140, 4130, 4137, 4163,
     4175, 4180, 4185, 4190, 5652, 4196, 4219, 4225, 4235, 4237,
     4236, 4242, 4275, 4276, 4277, 4282, 4287, 4289, 4327, 5652,

     4328, 4333, 4395, 4344, 4391,  170, 5652,  213, 5652,  213,
      214,  226, 4345, 4396, 4406, 4393, 4407, 4409, 4440, 4447,
     4450, 5652, 4449, 4466, 4489, 4491, 4501,  989,  332,  351,
      384,  421,  449,  513,  544,  612, 4503, 4510, 4522, 4516,
     4532,  630, 4587, 1578,  640,  711,  713,  777,  798,  808,
      905,  914, 4583, 4584, 4590, 4593, 4595, 5652, 5652, 5652,
     4596, 4630, 4635, 4636, 4670, 4647, 4653, 4686, 4669, 4692,
     4704, 4707, 4709, 4721, 4726, 4738, 4747, 5652, 5652,  971,
     4805, 4815, 4811,  231,  236,  238,  241,  239, 4813, 4816,
     4818, 4823, 4825, 4830, 4856, 4896, 4869, 4871, 4878, 4881,

     1003, 4883, 4890, 1184, 4912, 4921, 4927, 4930, 4933, 5652,
     4952, 4968, 4973, 4979, 4989, 4982, 5012, 5019, 4994, 5029,
     5087, 5064, 5652,  253, 5652, 5652,  305, 5083, 5085, 5090,
     5095,  371, 5102, 5104, 5125, 5139, 5141, 5151, 5164, 5166,
     5152, 5189, 5191, 5203, 5210, 5222, 1273, 5272, 5204,  325,
     5652, 5268, 5245,  276, 5270, 5275, 5280, 5285, 5286, 5315,
     5324, 5297, 5327, 5336, 5338, 5345, 5350, 5383,  332, 5367,
     5384,  306, 5652,  753, 5394, 5393, 5427, 5410, 5432, 5433,
      342, 5439, 5449,  377,  397,  781, 5450, 5479, 5484, 5489,
     5652, 5491, 5496, 5501, 5502, 5531, 5536, 5652, 5605,  112,

     5607, 5610, 5612, 5614, 5616, 5618, 5620, 5623, 5626, 5628,
     5630, 5632, 5634, 5636, 5638, 5640, 5642, 5645, 5648
    } ;

static const flex_int16_t yy_def[720] =
    {   0,
      698,    1,  698,  698,  698,  698,  699,  698,  698,  700,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  701,  701,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  698,  698,  698,  698,
      698,  698,  699,  698,  702,  698,  700,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  703,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,  704,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  112,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      698,  698,  698,  699,  699,  702,  698,  698,  698,  698,
      698,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  705,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  698,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  698,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,  698,   29,   29,
       29,   29,   29,   29,  698,   29,   29,   29,   29,   29,
       29,   29,  698,  698,  706,  705,  698,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  698,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  707,   29,  698,   29,   29,  708,  698,
      708,  708,  708,  709,  253,   29,   29,   29,   29,   29,
      698,   29,   29,   29,   29,   29,   29,   29,   29,  698,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  698,   29,

      698,   29,   29,   29,   29,   29,   29,   29,  710,   29,
       29,  698,  698,  698,  698,  698,  698,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  698,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  698,
       29,   29,   29,   29,  703,  703,  703,  703,  703,  703,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  711,
      703,  703,  703,  703,  703,  703,   29,   29,   29,   29,
       29,   29,  698,  698,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  698,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,  698,

       29,   29,  712,   29,   29,  698,  698,  698,  698,  698,
      698,  698,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  698,   29,   29,   29,   29,   29,  703,  703,  703,
      703,  703,  703,  703,  703,  703,   29,   29,   29,   29,
       29,  713,  711,  703,  703,  703,  703,  703,  703,  703,
      703,  703,   29,   29,   29,   29,   29,  698,  698,  698,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  698,  698,  714,
      712,  715,   29,  698,  698,  698,  698,  698,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

      703,   29,   29,  703,   29,   29,   29,   29,   29,  698,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      716,   29,  698,  698,  698,  698,  698,   29,   29,   29,
       29,  698,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  717,  716,   29,  698,
      698,   29,   29,  718,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  698,   29,
       29,  718,  698,  719,   29,   29,   29,   29,   29,   29,
      698,   29,   29,  718,  718,  719,   29,   29,   29,   29,
      698,   29,   29,   29,   29,   29,   29,    0,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698
    } ;

static const flex_int16_t yy_nxt[5740] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    4,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   33,   33,   35,   36,   37,   38,   39,   33,   40,
       41,   42,   43,   44,   45,   33,   46,   33,    4,    4,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   33,
       33,   35,   36,   37,   38,   39,   33,   40,   41,   42,
       43,   44,   45,   33,   46,   47,   48,   49,   51,   49,
       51,   54,   56,   56,   71,   72,   61,   61,   61,   61,

       61,   61,   61,   61,   63,   50,   50,   50,   50,   50,
       50,   50,   50,   62,   57,   65,   64,   66,   66,   66,
       66,   66,   66,   66,   66,   68,   69,   70,   77,  102,
       54,   73,   77,   77,   74,   75,   77,  103,  506,   54,
      104,   62,  105,  106,   55,   65,   54,  163,  163,  163,
      163,  163,  163,  163,  163,  560,   77,  102,   56,   73,
       77,   77,   74,   75,   77,  103,  506,   51,  104,   51,
      105,  106,  473,  474,   76,   76,   76,   76,   76,   76,
       76,   76,   73,   55,  509,  323,  324,   77,   78,   79,
      507,  107,   55,   53,  559,   77,  165,  508,  108,   55,

       80,  109,  360,  510,  110,   81,   82,  360,  511,  512,
       56,   56,  509,  360,   76,   77,   78,   79,  507,  107,
      584,  360,  161,   77,  161,  508,  108,   53,   80,  109,
      165,  510,  110,   81,   82,   73,  511,  512,   74,   75,
      162,  162,  162,  162,  162,  162,  162,  162,  584,  166,
       76,   76,   76,   76,   76,   76,   76,   76,  585,  586,
       77,  587,  360,   83,   77,  111,  588,  623,   77,   84,
      624,  113,  625,  112,   85,  114,   56,  626,   86,  115,
       87,  673,  627,  166,  116,  117,  585,  586,   77,  587,
       76,   83,   77,  111,  588,  623,   77,   84,  624,  113,

      625,  112,   85,  114,  650,  626,   86,  115,   87,   88,
      627,  673,  116,  117,  118,   77,   89,   90,   77,  430,
       91,   77,  119,   92,   77,  121,   93,   73,  120,   77,
       74,   75,  650,   94,  674,  122,   73,   88,  171,   74,
       75,  651,  118,   77,   89,   90,   77,  536,   91,   77,
      119,   92,   77,  121,   93,   73,  120,   77,   74,   75,
      170,   94,   95,  122,  674,  669,   96,  156,   77,  651,
       97,  157,  632,   77,  632,   77,  654,   77,  681,   77,
       73,   77,  673,   74,   75,  160,   67,  691,   73,   77,
       95,   74,   75,  669,   96,  156,   77,  169,   97,  157,

      552,   77,  673,   77,   52,   77,  681,   77,   77,   77,
      134,   67,   77,  160,  135,  691,   77,   77,  136,   98,
       60,   99,  100,  137,  138,   73,   77,   59,   74,   75,
       77,  101,   58,   52,   77,  674,   77,  698,  134,  155,
       77,  698,  135,  698,   77,  698,  136,   98,  698,   99,
      100,  137,  138,   73,   77,  674,   74,   75,   77,  101,
       77,  123,   77,  698,   77,  124,   77,  155,   77,  698,
       77,  698,  698,  158,  159,  125,  698,  126,  127,  128,
       73,  698,   77,   74,   75,  698,   77,  698,   77,  123,
       77,  698,   77,  124,   77,  528,   77,  698,   77,  698,

      529,  158,  159,  125,  698,  126,  127,  128,   77,  698,
       77,  698,   77,  698,   77,  698,  129,   73,   77,  130,
       74,   75,  131,  698,  698,  132,  698,  133,   61,   61,
       61,   61,   61,   61,   61,   61,   77,  698,  698,   73,
       77,  698,   74,   75,  129,   62,  698,  130,   73,  698,
      131,   74,   75,  132,  530,  133,   77,  698,  139,  531,
       77,   77,  140,  141,  142,   77,  698,  698,  698,   77,
      143,  144,  145,   62,  177,  146,  698,   77,  147,   73,
      698,   77,   74,   75,   77,   77,  139,  698,   77,   77,
      140,  141,  142,   77,  534,  172,  698,   77,  143,  144,

      145,  698,  177,  146,   77,   77,  147,  148,   77,   77,
      698,  149,   77,   77,  150,  151,   73,  698,  698,   74,
       75,  152,  173,  172,  153,  698,   73,  698,  698,   74,
       75,  154,   77,  698,   73,  148,   77,   74,   75,  149,
       77,  532,  150,  151,   73,  698,  533,   74,   75,  152,
      173,  698,  153,  698,  698,  167,  698,  167,  698,  154,
      168,  168,  168,  168,  168,  168,  168,  168,   61,   61,
       61,   61,   61,   61,   61,   61,  162,  162,  162,  162,
      162,  162,  162,  162,   65,   62,   66,   66,   66,   66,
       66,   66,   66,   66,   77,  698,   77,  174,   77,   77,

       77,  175,   77,   77,   77,  698,   77,   77,  698,  178,
      179,  698,  176,   62,   77,   73,  698,   73,   74,   75,
       74,   75,   77,  698,   77,  174,   77,   77,   77,  175,
       77,   77,   77,  698,   77,   77,  698,  178,  179,  180,
      176,   77,   77,   77,   77,   77,   77,   77,  183,   77,
       77,  698,   77,   73,   77,  672,   74,   75,  685,  181,
      698,  182,  185,  698,  184,  698,   77,  180,  535,   77,
       77,   77,   77,   77,   77,   77,  183,   77,   77,  186,
       77,   73,   77,  672,   74,   75,  685,  181,  698,  182,
      185,   77,  184,   77,   77,   77,   77,  193,   77,   77,

       77,   77,   73,  698,  188,   74,   75,  186,  187,  194,
      189,  686,   73,   77,  190,   74,   75,   77,  698,   77,
      698,   77,   77,   77,   77,  193,   77,   77,   77,   77,
       77,   73,  188,  191,   74,   75,  187,  194,  189,  686,
      192,   77,  190,   77,  698,   77,  550,   77,   77,   77,
       77,   77,   77,   77,   77,  698,   77,   77,   77,   77,
      199,  191,  195,   77,  196,  197,  213,   77,  192,  200,
      198,   77,  698,  698,  698,   77,   77,   77,   77,   77,
       77,   77,   77,  698,   77,   77,   77,   77,  199,  698,
      195,   77,  196,  197,  213,   77,  201,  200,  198,   77,

       77,  698,  202,   77,   77,  203,   77,   77,   77,   73,
       77,   77,   74,   75,   77,   77,  698,  204,   73,   77,
      698,   74,   75,  698,  201,  698,  205,   77,   77,  698,
      202,   77,   77,  203,  698,   77,   77,  698,   77,   77,
      206,  698,   77,   77,   77,  204,   77,   77,  208,  207,
      698,  698,   77,   77,  205,  209,   73,   77,  698,   74,
       75,  210,  698,  698,  698,  698,   77,  211,  206,  698,
       77,  551,   77,  698,   77,   73,  208,  207,  578,  579,
       77,   77,  698,  209,   73,   77,  698,   74,   75,  210,
       77,  698,  698,   73,   77,  211,   74,   75,   77,   76,

       76,   76,   76,   76,   76,   76,   76,   73,  601,  214,
       74,   75,   77,   77,  698,  218,   77,   77,   77,  219,
       77,   77,   77,   77,   77,  698,   77,  215,   77,  698,
      216,  217,   77,  698,  698,  698,  698,  214,  698,   76,
       77,   77,  698,  218,   77,   77,   77,  219,   77,   77,
       77,   77,   77,  698,   77,  215,   77,  698,  216,  217,
       77,   77,   77,  698,  224,   77,   77,  225,  698,   77,
       77,  220,  698,  698,   77,  226,  221,  698,   77,  222,
      223,  227,   77,   77,  698,  698,  698,   77,  698,   77,
       77,   77,  224,   77,   77,  225,  228,   77,   77,  220,

      698,  229,   77,  226,  221,  698,   77,  222,  223,  227,
       77,   77,  230,  698,  231,   77,   77,   77,  232,   77,
       77,   77,  698,  233,  228,   77,  698,  698,   77,  229,
       77,  234,   77,  698,   77,  698,   77,  698,   77,  698,
      230,  698,  231,  698,   77,   77,  232,  698,   77,   77,
      698,  233,  698,   77,   77,  698,   77,  235,   77,  234,
       77,   77,   77,  698,   77,   77,  698,  236,   77,   77,
      698,   77,   77,   77,  237,   77,   77,   77,  698,   77,
      240,   77,   77,  698,  238,  235,   77,  239,   73,   77,
       77,   74,   75,   77,  698,  236,   77,   77,  698,   77,

       77,   77,  237,   77,   77,   77,   77,   77,  240,   77,
      241,  698,  238,   77,   77,  239,   77,   77,  242,   77,
       77,   77,  698,   77,   77,   77,  243,   77,  698,   77,
      698,   77,  698,   77,   77,   77,  698,  698,  241,  245,
      698,   77,   77,  698,   77,   77,  242,   77,   77,   77,
      698,   77,   77,   77,  243,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  246,  245,  698,   77,
      244,   77,  247,   77,  249,   77,  698,   73,  698,   77,
       74,   75,  248,  698,   77,  698,   77,  698,   77,  698,
       77,  698,   77,   77,  246,  698,  698,   77,  244,   77,

      247,   77,  249,   77,  698,  698,  698,   77,  698,  698,
      248,  250,   77,  251,  252,  698,   77,  698,  258,  698,
       77,   77,  698,  253,  254,  698,  255,  698,   77,  256,
      257,  259,   77,  698,  698,  698,   77,  698,  698,  250,
       77,  251,  252,  698,   77,  698,  258,  698,   77,   77,
      698,  253,  254,  698,  255,  698,   77,  256,  257,  259,
       77,   77,  261,   77,   77,   77,   77,   77,  698,   77,
       77,   77,  698,  264,  698,  698,  263,   77,  698,  262,
      260,   77,  698,  698,  698,  698,  698,  265,  698,   77,
      261,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,  264,  698,  267,  263,   77,   77,  262,  260,   77,
       77,  698,  698,  698,   77,  265,  698,  698,   77,  266,
       77,   77,   77,  268,   77,   77,   77,  698,   77,   77,
      698,  267,  272,  698,   77,  269,   77,  698,   77,  698,
       77,  698,   77,  698,   77,  698,   77,  266,  270,   77,
       77,  268,   77,   77,   77,  698,  698,   77,   77,  698,
      272,  271,   77,  269,   77,   77,   77,  698,   77,   77,
       77,  273,   77,   77,  275,   77,  270,   77,   77,   77,
       77,   77,  698,   77,  698,   77,   77,  276,  274,  271,
       77,  698,  277,   77,   77,  698,   77,   77,   77,  273,

      278,   77,  275,   77,  698,   77,   77,   77,  698,   77,
       77,   77,  279,   77,   77,  276,  274,  698,   77,  698,
      277,  698,   77,   77,   77,  280,   77,   77,  278,   77,
       77,   77,  698,  284,  282,   77,  698,  285,   77,   77,
      279,  281,   77,   77,  698,  698,   77,  698,  698,  698,
       77,   77,  283,  280,   77,   77,   77,   77,   77,   77,
       77,  284,  282,   77,   77,  285,   77,   77,   77,  281,
       77,   77,   77,  286,   77,   73,   77,  287,   74,   75,
      283,  698,   73,  698,   77,   74,   75,  698,   77,  161,
      544,  161,   77,  698,   77,  545,   77,  604,   77,  698,

       77,  286,   77,  698,   77,  287,  698,  162,  162,  162,
      162,  162,  162,  162,  162,   65,  698,  163,  163,  163,
      163,  163,  163,  163,  163,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  698,  698,   77,   77,  698,
      698,   77,   77,  698,  288,  698,  698,  698,  698,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  698,   77,   77,   77,  698,   77,
       77,   77,  288,   77,  698,  290,   77,   77,  698,   77,

      291,   77,  289,   77,   77,  293,   77,   77,   77,   77,
      294,   77,   77,   77,   77,   77,  295,  698,  292,   77,
      296,   77,  698,  290,   77,   77,  698,   77,  291,   77,
      289,   77,   77,  293,   77,   77,   77,   77,  294,   77,
       77,   77,   77,   77,  295,   77,  292,   77,   77,   77,
      297,   77,   77,   77,  298,   77,   77,   77,   77,   77,
       77,   77,   77,  698,   77,   77,   77,   77,   77,  299,
      698,   77,  300,   77,  698,   77,   77,   77,  297,   77,
       77,   77,  298,   77,   77,   77,   77,   77,   77,   77,
       77,  301,   77,   77,   77,   77,   77,  299,   77,   77,

      300,  303,   77,  698,   77,   77,   77,  698,   77,   77,
       77,  302,   77,   77,   77,  304,   77,  306,   77,  301,
       77,   77,  698,   77,   77,  305,   77,   77,  698,  303,
       77,  315,   77,   77,   77,  698,   77,   77,   77,  302,
       77,   77,   77,  304,   77,  306,   77,   77,   77,   77,
       77,   77,   77,  305,  307,   77,   77,   77,   77,  698,
       77,   77,   77,   77,   77,   77,  316,  317,  698,  698,
       77,   77,  698,  698,  698,   77,  698,  698,   77,   77,
      698,  698,  307,   77,   77,   77,   77,  308,   77,   77,
       77,   77,   77,   77,  316,  317,  698,   77,   77,   77,

       77,   77,  698,  698,   77,   77,  698,  698,   77,  322,
      698,  319,  698,   77,  698,  318,   77,   77,  309,   77,
       77,  310,  698,   77,  311,   77,  698,   77,   77,   77,
      320,  312,   77,   77,  698,  313,   77,  322,  314,  319,
      698,   77,  698,  318,   77,   77,  309,   77,   77,  310,
      698,   77,  311,   77,  698,   77,   77,   77,  320,  312,
       77,   77,  698,  313,   77,  698,  314,  698,  321,  698,
      698,  698,  698,  698,  698,   73,  698,  698,   74,   75,
      698,   77,  327,   73,   77,   77,  323,  324,   77,   77,
      546,  698,   77,  698,  698,  547,  321,  698,  325,  325,

      325,  325,  325,  325,  325,  325,  698,   77,   77,  328,
      698,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      698,   77,   77,   77,  698,  698,  698,   77,  330,  698,
      698,  698,  698,  329,  331,   77,   77,  328,  325,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  698,   77,
       77,   77,  698,  698,  698,   77,  330,  698,  698,   77,
       77,  329,  331,  332,  333,   77,  698,   77,   77,   77,
       77,   77,  698,   77,   77,   77,  698,  698,   77,   77,
      698,  698,  698,  698,  698,  334,   77,   77,   77,  335,
       77,  332,  333,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,  336,   77,   77,   77,  698,
      698,  698,   77,  334,   77,  698,   77,  335,   77,  337,
       77,   77,   77,   77,  698,   77,   77,  338,   77,   77,
       77,   77,   77,  336,   77,   77,   77,  698,  340,   77,
       77,  698,  341,   77,   77,  339,   77,  337,   77,   77,
       77,   77,   77,   77,   77,  338,   77,   77,   77,   77,
       77,   77,   77,   77,  698,  342,  340,   77,  698,   77,
      341,   77,  698,  339,   77,  343,  698,   77,   77,  698,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  698,  342,  698,   77,  344,   77,   77,   77,

       77,  345,   77,   77,   77,   77,   77,  698,   77,   77,
       77,   77,   77,   77,   77,   77,  347,  346,   77,   77,
       77,  698,  698,   77,  344,  698,   77,   77,   77,  345,
       77,   77,   77,   77,   77,  698,   77,   77,  698,   77,
       77,   77,  698,   77,  347,  346,  348,   77,   77,   77,
      349,   77,  698,  350,  698,   77,  356,   77,  698,   77,
       77,   77,  698,  698,   77,   77,  698,   77,   77,   77,
      351,   77,  698,  352,  348,   77,   77,   77,  349,   77,
       77,  350,   77,   77,   77,   77,   77,   77,   77,  353,
       77,   77,   77,  354,  698,   77,   77,  698,  351,   77,

      698,  352,  698,   77,   77,   77,  355,   77,   77,   77,
       77,   77,   77,   77,   77,  698,  698,  353,   77,   77,
      698,  354,   77,   77,  358,  357,   77,   77,   77,  698,
       77,   77,   77,   77,  355,   77,   77,   77,  698,   77,
      698,   77,   73,  698,  698,   74,   75,  698,  698,  698,
       77,  698,  358,  357,   77,  698,   77,  548,   77,  698,
       77,  698,  549,  698,   77,  359,  359,  360,  359,  361,
      359,  359,  362,  363,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  364,  364,  364,  364,  364,  364,
      364,  364,  359,  359,  359,  359,  359,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  359,  364,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      359,  359,   77,   77,   77,  366,   77,  367,   77,   77,
       77,   77,   77,   77,   77,  698,  698,   77,   77,  698,
      698,  370,   77,  368,  698,  698,  698,  371,  698,  369,
       77,   77,   77,  366,   77,  367,   77,   77,   77,   77,
       77,   77,   77,  698,  698,   77,   77,  698,   77,  370,

       77,  368,   77,  698,  372,   77,   77,  369,   77,   77,
       77,   77,   77,   77,  374,   77,  373,  698,   77,   77,
       77,  698,  698,  375,   77,  698,   77,  698,   77,  698,
       77,  698,  372,   77,   77,  376,   77,   77,   77,   77,
       77,   77,  374,   77,  373,   77,   77,   77,   77,   77,
       77,  375,   77,   77,   77,  698,   77,   77,   77,  698,
       77,   77,   77,  376,   77,  378,   77,  377,   77,  698,
       77,  698,   77,   77,  380,  698,   77,   77,   77,  698,
       77,   77,   77,  698,  698,   77,   77,  379,   77,   77,
       77,  698,   77,  378,   77,  377,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,  381,   77,   77,
       77,  698,  382,   77,   77,  379,  698,   77,  385,  698,
      698,  698,   77,  698,  698,   77,  698,   77,  383,   77,
       77,   77,  698,   77,   77,  381,  698,   77,   77,   77,
      382,   77,   77,   77,  698,   77,  385,   77,  698,   77,
       77,  386,  384,   77,  698,  388,  383,   77,  698,   77,
       77,   77,  387,   77,  389,  390,   77,   77,   77,   77,
       77,   77,  698,  698,  391,   77,  698,   77,   77,  386,
      384,   77,   77,  388,  698,   77,   77,   77,   77,   77,
      387,   77,  389,  390,   77,  698,   77,   77,   77,   77,

       77,   77,  391,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  394,  393,   77,  396,  698,  698,  392,   77,
      395,  698,   77,  399,  698,  698,  398,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      394,  393,   77,  396,  698,  397,  392,   77,  395,   77,
       77,   77,   77,   77,  398,   77,   77,   77,   77,   77,
       77,  400,   77,   77,  401,  698,   77,   77,   77,  698,
       77,   77,   77,  397,  698,  698,   77,   77,  402,   77,
       77,   77,  698,   77,   77,   77,  698,   77,   77,  400,
       77,   77,  698,  698,   77,   77,   77,   77,   77,   77,

       77,   77,  698,   77,   77,   77,  402,   77,   77,   77,
      403,   77,  406,   77,  404,  698,   77,   77,   77,  698,
      698,  698,   77,  405,   77,   77,   77,  698,   77,   77,
      698,   77,   77,   77,  698,   77,   77,   77,  403,   77,
      406,   77,  404,  408,   77,   77,   77,  698,  698,   77,
       77,  405,   77,   77,   77,   77,   77,   77,  698,   77,
       77,  698,  698,   77,  698,   77,  407,  698,  698,   77,
      698,  408,  698,   77,   77,  698,   77,   77,   77,  698,
       77,   77,   77,   77,   77,   77,  698,   77,   77,  409,
      698,   77,   77,   77,  407,   77,   77,   77,  418,   77,

      698,   77,   77,   77,   77,  410,   77,  698,   77,  698,
      698,  698,   77,  698,  411,  412,   77,  409,  413,  698,
       77,  414,  698,   77,   77,  698,  418,   77,  415,  698,
       77,   77,  416,  410,   77,  417,   77,   77,  698,  698,
       77,   77,  411,  412,   77,   77,  413,   77,  698,  414,
      419,   77,  421,  422,  698,   77,  415,  420,   77,  698,
      416,  698,   77,  417,   77,   77,   77,  698,   77,   77,
      698,  698,   77,   77,  698,   77,  698,  698,  419,   77,
      421,  422,  423,   77,   77,  420,   77,  698,   77,  698,
       77,  424,   77,   77,   77,  425,   77,   77,   77,   77,

       77,   77,  426,  428,   77,   77,   77,   77,  427,   77,
      423,  698,   77,   77,   77,  698,   77,  698,   77,  424,
       77,   77,   77,  425,   77,   77,   77,   77,   77,   77,
      426,  428,   77,   77,   77,   77,  427,   77,  698,   77,
      698,   77,   77,   77,  698,  698,   77,   77,  698,  698,
       77,  698,  698,  698,  698,  698,  698,  698,  429,  698,
      698,   73,  431,  698,  323,  324,   77,   77,  698,  698,
       77,   77,  698,  698,  698,   77,  325,  325,  325,  325,
      325,  325,  325,  325,  698,   77,  429,  698,  698,   77,
      431,   77,  432,   77,   77,   77,   77,   77,   77,   77,

       77,   77,  698,  433,   77,   77,  698,  698,  698,  698,
      434,  698,  698,   77,  698,  698,  325,   77,   77,   77,
      432,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      698,  433,   77,   77,  698,  437,   77,  698,  434,   77,
       77,   77,  435,   77,   77,   77,   77,  698,  698,   77,
       77,  698,  438,  440,   77,  436,  439,   77,  698,  698,
      698,   77,  698,  437,   77,   77,  698,   77,   77,   77,
      435,   77,   77,   77,  698,  698,  698,   77,   77,  698,
      438,  698,   77,  436,  439,   77,   77,   77,  698,   77,
       77,   77,  441,   77,   77,   77,   77,   77,   77,  698,

       77,  451,  698,  698,   77,   77,   77,  443,   77,  442,
       77,  698,   77,  698,   77,   77,   77,  698,   77,   77,
      441,  444,   77,   77,   77,   77,   77,  698,   77,  451,
      698,  698,   77,   77,  698,  443,   77,  442,  698,   77,
       77,  698,  698,   77,   77,  698,  698,   77,  698,  444,
      445,  446,  447,  448,  449,   77,  450,  452,  698,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  453,  456,
       77,   77,  698,   77,  454,   77,  698,   77,   77,  698,
      455,   77,   77,   77,  698,  452,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  457,  453,  456,   77,   77,

      698,   77,  454,   77,  698,   77,   77,   77,  455,   77,
       77,   77,  698,  698,   77,   77,  698,  698,  458,   77,
      698,  698,  698,  457,  698,  698,  698,   77,  698,  698,
      459,   77,  698,   73,  698,   77,   74,   75,  698,   77,
      698,  698,  698,   77,  698,  698,  458,   77,   76,   76,
       76,   76,   76,   76,   76,   76,  698,  698,  459,  461,
      462,  463,  464,  465,   77,  466,  467,  698,   77,   77,
       77,   77,   77,  468,   77,   77,  698,   77,  698,   77,
      698,  698,  698,  698,  698,  698,  698,  698,   76,  698,
      698,  698,   77,  698,  467,  698,   77,   77,   77,   77,

       77,  468,   77,   77,  698,   77,  698,   77,  359,  359,
      360,  359,  361,  359,  359,  362,  363,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  698,  698,  698,
      698,  698,  698,  698,  698,  359,  359,  359,  359,  359,
      469,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  698,   77,  698,  470,  698,  476,  698,  471,
      698,   77,  472,  698,  698,  698,  359,  698,  469,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  698,  470,   77,  476,  698,  471,   77,   77,
      472,  698,   77,  359,  359,  698,  477,   77,   77,  475,

       77,  478,  479,  698,  698,   77,   77,   77,   77,   77,
      481,   77,   77,   77,  480,   77,   77,   77,  698,  698,
       77,  698,  698,  698,  477,   77,   77,  475,   77,  478,
      479,  698,   77,   77,   77,   77,   77,   77,  481,   77,
       77,   77,  480,   77,   77,   77,   77,  698,   77,  698,
       77,   77,   77,  698,   77,   77,  698,  482,  698,   77,
       77,  485,  698,  698,   77,  698,  698,   77,   77,  483,
      698,   77,   77,   77,   77,   77,   77,  486,   77,   77,
       77,   77,   77,   77,  484,  482,   77,   77,   77,  698,
       77,  698,   77,  698,   77,   77,   77,  483,  698,   77,

       77,   77,  698,   77,   77,  486,  487,   77,   77,   77,
      698,   77,  484,  488,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  698,   77,   77,   77,
      489,  698,   77,  490,  487,   77,   77,   77,   77,   77,
       77,  488,   77,   77,  491,   77,   77,   77,   77,   77,
      698,   77,   77,   77,  698,   77,  492,   77,  489,   77,
       77,  490,  698,   77,  493,   77,   77,   77,   77,   77,
       77,   77,  491,   77,   77,   77,   77,   77,   77,   77,
       77,  495,   77,  494,  492,   77,   77,   77,   77,   77,
       77,   77,  493,   77,   77,   77,  698,   77,   77,   77,

      496,   77,  698,   77,   77,   77,   77,   77,  497,  495,
       77,  494,   77,   77,   77,  500,  698,   77,   77,  698,
      698,   77,   77,  698,  698,   77,   77,   77,  496,   77,
      498,   77,   77,   77,  698,   77,  497,  698,  499,   77,
       77,   77,   77,  502,  501,   77,   77,   77,  698,   77,
       77,  698,  698,   77,  698,   77,  504,   77,  498,   77,
      698,   77,  698,   77,  698,  698,  499,   77,  698,   77,
       77,  502,  501,   77,   77,   77,   73,   77,   77,   74,
       75,   77,   77,  698,  504,  505,   77,  698,  698,   77,
       77,   76,   76,   76,   76,   76,   76,   76,   76,  698,

      513,  698,  698,  698,   77,  698,  698,   77,   77,   77,
       77,   77,   77,  505,   77,   77,  698,   77,   77,   77,
      514,   77,  698,   77,  698,   77,  698,   77,  513,  517,
       77,   76,   77,  698,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  515,   77,   77,   77,  514,   77,
       77,   77,  516,   77,  698,   77,   77,  517,   77,   77,
       77,  518,   77,   77,   77,   77,   77,   77,  698,   77,
       77,   77,  515,   77,   77,   77,  698,  698,   77,   77,
      516,  698,   77,  698,   77,  519,   77,   77,   77,  518,
       77,   77,   77,   77,   77,   77,  698,   77,   77,   77,

      698,   77,   77,   77,  520,  698,  698,   77,   77,  522,
       77,   77,   77,  519,   77,   77,  521,  698,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  520,  698,   77,  698,   77,  698,   77,   77,
       77,  698,   77,   77,  521,   77,   77,   77,   77,   77,
       77,   77,   77,  525,   77,   77,   77,  523,  698,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  524,   77,   77,   77,   77,
       77,  525,   77,   77,  526,  523,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  527,   77,

       77,  698,  698,  524,   77,  537,  698,   77,   77,  698,
      698,   77,  526,  698,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  527,   77,   77,  538,
      698,   77,   77,  537,  540,   77,   77,  539,  698,   77,
      698,  698,  698,  698,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  538,  698,   77,
       77,  698,  540,   77,   77,  539,  698,   77,  541,   77,
      698,  698,   73,   77,   77,   74,   75,   77,   77,  698,
      698,  698,   77,  698,  698,  698,  698,  542,  542,  542,
      542,  542,  542,  542,  542,  698,  541,   77,   77,  698,

       77,   77,   77,  698,   77,   77,   77,  698,   77,  698,
       77,  553,  698,  698,   77,  698,   77,  554,   77,  698,
       77,  698,  698,  698,   77,  558,   77,  542,   77,  555,
       77,  698,   77,  556,   77,  698,   77,  698,   77,  553,
      698,  698,   77,   77,   77,  554,   77,   77,   77,  698,
       77,   77,   77,  698,   77,   77,  557,  555,   77,  561,
       77,  556,   77,   77,   77,  563,   77,  698,   77,   77,
       77,   77,   77,   77,  698,   77,   77,   77,   77,   77,
       77,  698,   77,   77,  557,  562,   77,  561,   77,  698,
       77,   77,   77,  563,   77,   77,   77,   77,   77,   77,

       77,   77,  698,   77,   77,   77,  698,   77,   77,  698,
      564,   77,   77,  562,  698,   77,   77,   77,  565,  698,
       77,  566,   77,   77,  698,   77,   77,   77,   77,  698,
      567,   77,   77,  698,  698,   77,   77,  698,  564,   77,
       77,  698,  568,   77,   77,   77,  565,  698,   77,  566,
       77,   77,  698,   77,   77,   77,   77,   77,  567,   77,
       77,   77,  569,  570,   77,   77,  698,   77,   77,   77,
      568,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      698,  698,   77,   77,  698,   77,  698,   77,  698,   77,
      569,  570,  571,   77,  698,   77,   77,   77,  698,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      571,   77,   77,   77,  572,   77,  575,   77,  574,   77,
      573,  698,  698,  698,  698,   77,   77,   77,  698,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  698,   77,
       77,   77,  572,   77,  575,   77,  574,   77,  573,   77,
       77,  576,  698,   77,   77,   77,  698,   77,   77,   77,
      577,  698,  698,   77,  698,  698,   77,   77,  582,  698,
       77,  589,  698,  698,   77,   77,  698,   77,   77,  576,
      698,   77,   77,   77,  698,   77,   77,   77,  577,   73,

      698,   77,  578,  579,   77,   77,  582,  698,   77,  589,
      698,  698,   77,   77,  580,  580,  580,  580,  580,  580,
      580,  580,  698,   77,  698,   77,  698,   77,   77,  592,
      590,   77,   77,   77,  698,  698,   77,  583,   77,   77,
      591,   77,   77,   77,  698,   77,   77,   77,  698,   77,
      593,   77,  698,   77,  580,   77,   77,  592,  590,   77,
       77,   77,  698,  698,   77,  583,   77,   77,  591,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  593,   77,
       77,   77,   77,   77,  595,   77,   77,   77,  698,   77,
       77,  698,  596,  698,  594,  698,  698,  698,   77,  698,

       77,  698,   77,  698,   77,  698,   77,   77,   77,   77,
       77,   77,  595,   77,   77,   77,  597,   77,   77,  698,
      596,   77,  594,   77,  698,   77,   77,   77,  698,   77,
       77,   77,  598,  600,   77,   77,  698,   77,  599,   77,
      698,   77,   77,   77,  597,  698,   77,  698,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      598,  600,   77,   77,   77,   77,  599,   77,   77,   77,
       77,   77,  603,  602,   77,  698,   77,  698,   77,  698,
       77,  698,   77,  698,   77,  698,   77,  698,  698,  698,
       77,   73,   77,  698,   74,   75,   77,  698,  698,  698,

      603,  602,  698,  698,  698,  698,  542,  542,  542,  542,
      542,  542,  542,  542,  698,   77,   77,  698,  698,   77,
       77,  605,   77,   77,   77,   77,   77,   77,   77,  606,
       77,   77,   77,   77,  698,   77,   77,  698,  698,  698,
      698,  698,  698,   77,   77,  698,  542,   77,   77,  605,
       77,   77,   77,   77,   77,   77,   77,  606,   77,   77,
       77,   77,   77,   77,   77,  698,   77,   77,   77,  607,
       77,   77,   77,  698,  698,   77,   77,  610,  698,   77,
      698,  698,  698,   77,  608,   77,  609,   77,  698,   77,
       77,  612,  611,   77,   77,   77,   77,  607,   77,   77,

       77,  615,   77,   77,   77,   77,   77,   77,  698,   77,
       77,   77,  608,   77,  609,   77,  698,   77,   77,  612,
      611,   77,   77,  613,   77,  698,   77,  698,   77,  615,
       77,  614,   77,   77,   77,  616,   77,   77,   77,  617,
       77,   77,  698,   77,   77,   77,   77,   77,  698,   77,
       77,  613,   77,   77,   77,  698,   77,   77,   77,  614,
       77,  618,   77,  616,   77,  698,   77,  617,   77,   77,
       77,   77,   77,   77,   77,   77,  619,   77,   77,   77,
      698,   77,  698,   77,  698,   77,   77,   77,  698,  618,
       77,  698,  698,  620,   77,  698,  698,  698,   77,  698,

      698,  698,   77,  698,  619,  698,   77,   77,  698,   73,
      698,   77,  578,  579,  698,   77,  698,  698,  698,   73,
      698,  620,   74,   75,  580,  580,  580,  580,  580,  580,
      580,  580,  698,  698,   76,   76,   76,   76,   76,   76,
       76,   76,  698,   77,  622,   77,  698,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      698,  629,   77,   77,  580,   77,   77,  628,  698,  698,
      630,   77,  622,   77,   76,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  629,
       77,   77,   77,   77,   77,  628,   77,  632,  630,  632,

      698,   77,  698,   77,  698,   77,  631,  633,  698,   77,
       77,   77,  698,   77,  634,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  698,   77,  698,   77,   77,
       77,   77,   77,   77,  631,  633,   77,   77,   77,   77,
      635,   77,  634,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  636,   77,   77,   77,   77,
       77,   77,   77,  637,   77,   77,   77,   77,  635,   77,
      638,  698,   77,   77,  698,  698,   77,  698,  698,  698,
       77,   77,  698,  636,   77,   77,  698,   77,   77,   77,
       77,  637,   77,   77,   77,   77,  698,   77,  638,  698,

       77,   77,  698,  639,   77,   77,  698,  640,   77,   77,
      641,   77,   77,   77,   77,   77,   77,  698,  643,   77,
       77,   77,   77,  698,  698,   77,   77,  698,   77,   77,
       77,  639,   77,   77,   77,  640,   77,   77,  641,   77,
      642,   77,   77,   77,   77,  698,  643,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  644,   77,   77,   77,
      698,   77,   77,  698,  645,   77,  698,  698,  642,   77,
      698,  698,   77,  698,  646,  698,   77,  698,  698,   77,
       77,  698,  698,   77,  644,  698,  698,   77,  698,   77,
      698,   73,  645,   77,   74,   75,   77,   77,  698,  698,

       77,  698,  646,  698,   77,  649,  647,  647,  647,  647,
      647,  647,  647,  647,  698,   77,  698,   77,  698,   77,
      698,   77,   77,  652,   77,   77,   77,   77,   77,  698,
       77,   77,   77,  649,   77,   77,   77,  698,   77,  653,
       77,  656,   77,   77,   77,   77,  647,   77,  698,   77,
       77,  652,  655,   77,   77,   77,  698,   77,   77,   77,
      698,  657,   77,   77,   77,   77,   77,  653,   77,  656,
       77,   77,   77,   77,  698,  658,  698,   77,  698,   77,
      655,  659,  698,   77,   77,   77,  660,   77,   77,  657,
      698,   77,   77,   77,  698,  698,   77,  698,   77,   77,

      661,   77,   77,  658,   77,   77,   77,   77,  698,  659,
      698,   77,   77,  662,  660,   77,   77,  663,  698,   77,
       77,   77,  698,   77,   77,  664,   77,   77,  661,   77,
       77,   77,   77,  698,   77,   77,   77,  698,  698,  665,
      668,  662,   77,   77,   77,  663,   77,  698,  698,   77,
       77,   77,  698,  664,   77,   77,  698,   77,   77,   77,
      698,  666,   77,   77,   77,  698,  698,  665,  668,  698,
       77,   77,   77,  667,   77,  698,   73,   77,   77,   74,
       75,  671,   77,  698,  698,   77,   77,  698,  698,  666,
       77,  647,  647,  647,  647,  647,  647,  647,  647,  698,

       77,  667,   77,  698,   77,   77,   77,  675,   77,  671,
       77,   77,   77,   77,  670,   77,   77,   77,   77,  698,
       77,   77,   77,  698,  676,   77,   77,  698,   77,   77,
       77,  647,   77,  679,   77,  675,   77,   77,   77,   77,
       77,  698,  670,   77,   77,   77,   77,   77,   77,   77,
       77,   77,  676,   77,   77,   77,   77,   77,  698,   77,
       77,  679,  698,   77,   77,   77,  677,   77,   77,  698,
       77,  698,   77,  678,   77,   77,   77,   77,   77,   77,
      698,   77,   77,   77,   77,   77,   77,   77,   77,  698,
       77,   77,   77,  698,  677,   77,   77,  698,   77,   77,

       77,  678,   77,   77,   77,   77,   77,   77,  698,   77,
       77,  698,  682,   77,   77,   77,   77,  680,   77,   77,
       77,  683,  698,   77,   77,   77,   77,   77,  687,   77,
       77,   77,  688,   77,   77,   77,  698,  698,  698,  698,
      682,  698,   77,   77,   77,  680,   77,   77,   77,  683,
       77,   77,   77,   77,   77,  698,  687,   77,   77,   77,
      688,   77,   77,   77,   77,   77,  689,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  698,  698,   77,   77,
      698,   77,   77,  698,  690,   77,  693,   77,  698,   77,
       77,   77,   77,   77,  689,   77,   77,   77,  692,   77,

       77,   77,  698,   77,  698,  698,  698,   77,  698,   77,
       77,   77,  690,   77,  693,   77,   77,   77,   77,   77,
       77,   77,  698,  695,   77,   77,  692,   77,   77,   77,
      694,   77,   77,   77,   77,  698,   77,   77,   77,   77,
      698,   77,   77,   77,   77,  698,  696,   77,   77,   77,
      698,  695,   77,   77,  698,   77,   77,   77,  694,   77,
       77,   77,   77,   77,   77,   77,   77,  697,   77,   77,
       77,   77,   77,  698,  696,  698,   77,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,   77,  698,  698,  698,  697,   77,  698,  698,   77,

       77,  698,  698,  698,   77,   53,   53,   53,   77,   77,
      164,  164,  164,   76,   76,  212,  212,  326,  326,  325,
      325,  460,  460,  359,  359,  359,  364,  364,  364,  503,
      503,  543,  543,  581,  581,  542,  542,  580,  580,  621,
      621,  648,  648,  647,  647,  672,  672,  672,  684,  684,
      684,    3,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698
    } ;

static const flex_int16_t yy_chk[5740] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    5,    2,
        5,    7,    9,    9,   25,   25,   18,   18,   18,   18,

       18,   18,   18,   18,   19,    2,    2,    2,    2,    2,
        2,    2,    2,   18,  700,   20,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   23,   23,   23,   33,   31,
       53,   76,   33,   31,   76,   76,   33,   31,  412,  164,
       31,   18,   31,   31,    7,   50,  165,   50,   50,   50,
       50,   50,   50,   50,   50,  474,   33,   31,    9,   26,
       33,   31,   26,   26,   33,   31,  412,   51,   31,   51,
       31,   31,  371,  371,   26,   26,   26,   26,   26,   26,
       26,   26,  325,   53,  414,  325,  325,   32,   26,   26,
      413,   32,  164,   55,  473,   32,   55,  413,   32,  165,

       26,   32,  363,  415,   32,   26,   26,  362,  416,  417,
       56,   56,  414,  361,   26,   32,   26,   26,  413,   32,
      506,  360,   49,   32,   49,  413,   32,  166,   26,   32,
      166,  415,   32,   26,   26,   27,  416,  417,   27,   27,
       49,   49,   49,   49,   49,   49,   49,   49,  506,   55,
       27,   27,   27,   27,   27,   27,   27,   27,  508,  510,
       34,  511,  359,   27,   34,   34,  512,  584,   34,   27,
      585,   35,  586,   34,   27,   35,   56,  587,   27,   35,
       27,  654,  588,  166,   35,   35,  508,  510,   34,  511,
       27,   27,   34,   34,  512,  584,   34,   27,  585,   35,

      586,   34,   27,   35,  624,  587,   27,   35,   27,   28,
      588,  672,   35,   35,   36,   28,   28,   28,   36,  327,
       28,   37,   36,   28,   28,   37,   28,  450,   36,   37,
      450,  450,  624,   28,  654,   37,  529,   28,   72,  529,
      529,  627,   36,   28,   28,   28,   36,  450,   28,   37,
       36,   28,   28,   37,   28,  530,   36,   37,  530,  530,
       68,   28,   29,   37,  672,  650,   29,   44,   29,  627,
       29,   44,  632,   29,  632,   44,  632,   29,  669,   29,
      466,   46,  684,  466,  466,   46,   67,  681,  531,   46,
       29,  531,  531,  650,   29,   44,   29,   63,   29,   44,

      466,   29,  685,   44,   52,   29,  669,   29,   30,   46,
       40,   21,   30,   46,   40,  681,   30,   46,   40,   30,
       17,   30,   30,   40,   40,  532,   43,   15,  532,  532,
       43,   30,   14,    6,   43,  684,   30,    3,   40,   43,
       30,    0,   40,    0,   30,    0,   40,   30,    0,   30,
       30,   40,   40,  533,   43,  685,  533,  533,   43,   30,
       38,   38,   43,    0,   38,   38,   45,   43,   38,    0,
       45,    0,    0,   45,   45,   38,    0,   38,   38,   38,
      445,    0,   77,  445,  445,    0,   77,    0,   38,   38,
       77,    0,   38,   38,   45,  445,   38,    0,   45,    0,

      445,   45,   45,   38,    0,   38,   38,   38,   39,    0,
       77,    0,   39,    0,   77,    0,   39,  534,   77,   39,
      534,  534,   39,    0,    0,   39,    0,   39,   61,   61,
       61,   61,   61,   61,   61,   61,   39,    0,    0,  446,
       39,    0,  446,  446,   39,   61,    0,   39,  535,    0,
       39,  535,  535,   39,  446,   39,   41,    0,   41,  446,
       41,   82,   41,   41,   41,   82,    0,    0,    0,   82,
       41,   41,   41,   61,   82,   41,    0,   78,   41,  448,
        0,   78,  448,  448,   41,   78,   41,    0,   41,   82,
       41,   41,   41,   82,  448,   78,    0,   82,   41,   41,

       41,    0,   82,   41,   79,   78,   41,   42,   79,   78,
        0,   42,   79,   78,   42,   42,  536,    0,    0,  536,
      536,   42,   79,   78,   42,    0,  447,    0,    0,  447,
      447,   42,   79,    0,  542,   42,   79,  542,  542,   42,
       79,  447,   42,   42,  545,    0,  447,  545,  545,   42,
       79,    0,   42,    0,    0,   62,    0,   62,    0,   42,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   65,  162,  162,  162,  162,
      162,  162,  162,  162,   66,   65,   66,   66,   66,   66,
       66,   66,   66,   66,   80,    0,   83,   80,   80,   81,

       83,   81,   80,   81,   83,    0,   84,   81,    0,   83,
       84,    0,   81,   65,   84,  546,    0,  547,  546,  546,
      547,  547,   80,    0,   83,   80,   80,   81,   83,   81,
       80,   81,   83,    0,   84,   81,    0,   83,   84,   85,
       81,   86,   84,   85,   87,   86,   88,   85,   87,   86,
       88,    0,   87,  449,   88,  674,  449,  449,  674,   85,
        0,   86,   89,    0,   88,    0,   89,   85,  449,   86,
       89,   85,   87,   86,   88,   85,   87,   86,   88,   89,
       87,  548,   88,  686,  548,  548,  686,   85,    0,   86,
       89,   90,   88,   93,   89,   90,   91,   93,   89,   90,

       91,   93,  549,    0,   91,  549,  549,   89,   90,   94,
       91,  674,  550,   94,   91,  550,  550,   94,    0,   90,
        0,   93,   92,   90,   91,   93,   92,   90,   91,   93,
       92,  464,   91,   92,  464,  464,   90,   94,   91,  686,
       92,   94,   91,   95,    0,   94,  464,   95,   97,  106,
       92,   95,   97,  106,   92,    0,   97,  106,   92,   96,
       97,   92,   95,   96,   96,   96,  106,   96,   92,   97,
       96,   95,    0,    0,    0,   95,   97,  106,   98,   95,
       97,  106,   98,    0,   97,  106,   98,   96,   97,    0,
       95,   96,   96,   96,  106,   96,   98,   97,   96,   99,

      100,    0,   99,   99,  100,  100,   98,   99,  100,  551,
       98,  101,  551,  551,   98,  101,    0,  100,  552,  101,
        0,  552,  552,    0,   98,    0,  101,   99,  100,    0,
       99,   99,  100,  100,    0,   99,  100,    0,  102,  101,
      102,    0,  102,  101,  103,  100,  102,  101,  103,  102,
        0,    0,  103,  104,  101,  103,  465,  104,    0,  465,
      465,  104,    0,    0,    0,    0,  102,  104,  102,    0,
      102,  465,  103,    0,  102,  580,  103,  102,  580,  580,
      103,  104,    0,  103,  105,  104,    0,  105,  105,  104,
      107,    0,    0,  528,  107,  104,  528,  528,  107,  105,

      105,  105,  105,  105,  105,  105,  105,  601,  528,  107,
      601,  601,  109,  108,    0,  110,  109,  108,  107,  110,
      109,  108,  107,  110,  111,    0,  107,  108,  111,    0,
      109,  109,  111,    0,    0,    0,    0,  107,    0,  105,
      109,  108,    0,  110,  109,  108,  113,  110,  109,  108,
      113,  110,  111,    0,  113,  108,  111,    0,  109,  109,
      111,  112,  114,    0,  113,  112,  114,  114,    0,  112,
      114,  112,    0,    0,  113,  114,  112,    0,  113,  112,
      112,  114,  113,  115,    0,    0,    0,  115,    0,  112,
      114,  115,  113,  112,  114,  114,  115,  112,  114,  112,

        0,  115,  116,  114,  112,    0,  116,  112,  112,  114,
      116,  115,  117,    0,  117,  115,  117,  118,  117,  115,
      117,  118,    0,  118,  115,  118,    0,    0,  119,  115,
      116,  119,  119,    0,  116,    0,  119,    0,  116,    0,
      117,    0,  117,    0,  117,  118,  117,    0,  117,  118,
        0,  118,    0,  118,  120,    0,  119,  120,  120,  119,
      119,  121,  120,    0,  119,  121,    0,  120,  122,  121,
        0,  123,  122,  124,  120,  123,  122,  124,    0,  123,
      123,  124,  120,    0,  121,  120,  120,  122,  604,  121,
      120,  604,  604,  121,    0,  120,  122,  121,    0,  123,

      122,  124,  120,  123,  122,  124,  125,  123,  123,  124,
      125,    0,  121,  126,  125,  122,  127,  126,  127,  128,
      127,  126,    0,  128,  127,  129,  128,  128,    0,  129,
        0,  131,    0,  129,  125,  131,    0,    0,  125,  131,
        0,  126,  125,    0,  127,  126,  127,  128,  127,  126,
        0,  128,  127,  129,  128,  128,  130,  129,  132,  131,
      130,  129,  132,  131,  130,  133,  132,  131,    0,  133,
      130,  134,  132,  133,  134,  134,    0,  647,    0,  134,
      647,  647,  133,    0,  130,    0,  132,    0,  130,    0,
      132,    0,  130,  133,  132,    0,    0,  133,  130,  134,

      132,  133,  134,  134,    0,    0,    0,  134,    0,    0,
      133,  135,  136,  135,  135,    0,  136,    0,  136,    0,
      136,  135,    0,  135,  135,    0,  135,    0,  137,  135,
      135,  137,  137,    0,    0,    0,  137,    0,    0,  135,
      136,  135,  135,    0,  136,    0,  136,    0,  136,  135,
        0,  135,  135,    0,  135,    0,  137,  135,  135,  137,
      137,  138,  139,  140,  137,  138,  139,  140,    0,  138,
      139,  140,    0,  141,    0,    0,  140,  141,    0,  139,
      138,  141,    0,    0,    0,    0,    0,  141,    0,  138,
      139,  140,  143,  138,  139,  140,  143,  138,  139,  140,

      143,  141,    0,  143,  140,  141,  142,  139,  138,  141,
      142,    0,    0,    0,  142,  141,    0,    0,  145,  142,
      143,  144,  145,  144,  143,  144,  145,    0,  143,  144,
        0,  143,  147,    0,  142,  145,  147,    0,  142,    0,
      147,    0,  142,    0,  146,    0,  145,  142,  146,  144,
      145,  144,  146,  144,  145,    0,    0,  144,  148,    0,
      147,  146,  148,  145,  147,  149,  148,    0,  147,  149,
      150,  148,  146,  149,  150,  151,  146,  152,  150,  151,
      146,  152,    0,  151,    0,  152,  148,  151,  149,  146,
      148,    0,  153,  149,  148,    0,  153,  149,  150,  148,

      153,  149,  150,  151,    0,  152,  150,  151,    0,  152,
      154,  151,  153,  152,  154,  151,  149,    0,  154,    0,
      153,    0,  155,  156,  153,  154,  155,  156,  153,  158,
      155,  156,    0,  158,  156,  157,    0,  158,  154,  157,
      153,  155,  154,  157,    0,    0,  154,    0,    0,    0,
      155,  156,  157,  154,  155,  156,  159,  158,  155,  156,
      159,  158,  156,  157,  159,  158,  160,  157,  172,  155,
      160,  157,  172,  159,  160,  461,  172,  160,  461,  461,
      157,    0,  544,    0,  159,  544,  544,    0,  159,  161,
      461,  161,  159,    0,  160,  461,  172,  544,  160,    0,

      172,  159,  160,    0,  172,  160,    0,  161,  161,  161,
      161,  161,  161,  161,  161,  163,    0,  163,  163,  163,
      163,  163,  163,  163,  163,  167,  167,  167,  167,  167,
      167,  167,  167,  168,  168,  168,  168,  168,  168,  168,
      168,  173,  174,  175,  176,  173,  174,  175,  176,  173,
      174,  175,  176,  177,  178,    0,    0,  177,  178,    0,
        0,  177,  178,    0,  178,    0,    0,    0,    0,  173,
      174,  175,  176,  173,  174,  175,  176,  173,  174,  175,
      176,  177,  178,  179,    0,  177,  178,  179,    0,  177,
      178,  179,  178,  180,    0,  180,  181,  180,    0,  182,

      181,  180,  179,  182,  181,  183,  184,  182,  185,  183,
      184,  179,  185,  183,  184,  179,  185,    0,  182,  179,
      186,  180,    0,  180,  181,  180,    0,  182,  181,  180,
      179,  182,  181,  183,  184,  182,  185,  183,  184,  188,
      185,  183,  184,  188,  185,  186,  182,  188,  187,  186,
      187,  189,  187,  186,  188,  189,  187,  190,  191,  189,
      192,  190,  191,    0,  192,  190,  191,  188,  192,  189,
        0,  188,  191,  186,    0,  188,  187,  186,  187,  189,
      187,  186,  188,  189,  187,  190,  191,  189,  192,  190,
      191,  193,  192,  190,  191,  193,  192,  189,  194,  193,

      191,  195,  194,    0,  197,  195,  194,    0,  197,  195,
      196,  194,  197,  198,  196,  196,  199,  198,  196,  193,
      199,  198,    0,  193,  199,  196,  194,  193,    0,  195,
      194,  203,  197,  195,  194,    0,  197,  195,  196,  194,
      197,  198,  196,  196,  199,  198,  196,  200,  199,  198,
      201,  200,  199,  196,  201,  200,  204,  203,  201,    0,
      204,  203,  205,  206,  204,  203,  205,  206,    0,    0,
      205,  206,    0,    0,    0,  200,    0,    0,  201,  200,
        0,    0,  201,  200,  204,  203,  201,  202,  204,  203,
      205,  206,  204,  203,  205,  206,    0,  207,  205,  206,

      208,  207,    0,    0,  208,  207,    0,    0,  208,  211,
        0,  208,    0,  211,    0,  207,  202,  211,  202,  209,
      202,  202,    0,  209,  202,  207,    0,  209,  208,  207,
      209,  202,  208,  207,    0,  202,  208,  211,  202,  208,
        0,  211,    0,  207,  202,  211,  202,  209,  202,  202,
        0,  209,  202,  210,    0,  209,  213,  210,  209,  202,
      213,  210,    0,  202,  213,    0,  202,    0,  210,    0,
        0,    0,    0,    0,    0,  462,    0,    0,  462,  462,
        0,  210,  214,  212,  213,  210,  212,  212,  213,  210,
      462,    0,  213,    0,    0,  462,  210,    0,  212,  212,

      212,  212,  212,  212,  212,  212,    0,  214,  215,  215,
        0,  214,  215,  216,  217,  214,  215,  216,  217,  218,
        0,  216,  217,  218,    0,    0,    0,  218,  217,    0,
        0,    0,    0,  216,  218,  214,  215,  215,  212,  214,
      215,  216,  217,  214,  215,  216,  217,  218,    0,  216,
      217,  218,    0,    0,    0,  218,  217,    0,    0,  219,
      220,  216,  218,  219,  220,  221,    0,  219,  220,  221,
      222,  223,    0,  221,  222,  223,    0,    0,  222,  223,
        0,    0,    0,    0,    0,  221,  224,  219,  220,  222,
      224,  219,  220,  221,  224,  219,  220,  221,  222,  223,

      225,  221,  222,  223,  225,  224,  222,  223,  225,    0,
        0,    0,  226,  221,  224,    0,  226,  222,  224,  225,
      226,  227,  224,  228,    0,  227,  229,  228,  225,  227,
      229,  228,  225,  224,  229,  230,  225,    0,  230,  230,
      226,    0,  231,  230,  226,  229,  231,  225,  226,  227,
      231,  228,  232,  227,  229,  228,  232,  227,  229,  228,
      232,  233,  229,  230,    0,  233,  230,  230,    0,  233,
      231,  230,    0,  229,  231,  234,    0,  235,  231,    0,
      232,  235,  236,  237,  232,  235,  236,  237,  232,  233,
      236,  237,    0,  233,    0,  239,  236,  233,  238,  239,

      234,  237,  238,  239,  234,  235,  238,    0,  234,  235,
      236,  237,  240,  235,  236,  237,  240,  238,  236,  237,
      240,    0,    0,  239,  236,    0,  238,  239,  234,  237,
      238,  239,  234,  241,  238,    0,  234,  241,    0,  242,
      240,  241,    0,  242,  240,  238,  241,  242,  240,  243,
      242,  244,    0,  243,    0,  244,  248,  243,    0,  244,
      245,  241,    0,    0,  245,  241,    0,  242,  245,  241,
      244,  242,    0,  245,  241,  242,  246,  243,  242,  244,
      246,  243,  248,  244,  246,  243,  248,  244,  245,  246,
      248,  247,  245,  247,    0,  247,  245,    0,  244,  247,

        0,  245,    0,  249,  246,  251,  247,  249,  246,  251,
      248,  249,  246,  251,  248,    0,    0,  246,  248,  247,
        0,  247,  250,  247,  251,  250,  250,  247,  252,    0,
      250,  249,  252,  251,  247,  249,  252,  251,    0,  249,
        0,  251,  463,    0,    0,  463,  463,    0,    0,    0,
      250,    0,  251,  250,  250,    0,  252,  463,  250,    0,
      252,    0,  463,    0,  252,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  254,  255,  256,  254,  254,  255,  256,  257,
      254,  255,  256,  257,  258,    0,    0,  257,  258,    0,
        0,  258,  258,  256,    0,    0,    0,  259,    0,  257,
      254,  255,  256,  254,  254,  255,  256,  257,  254,  255,
      256,  257,  258,    0,    0,  257,  258,    0,  259,  258,

      258,  256,  259,    0,  260,  261,  259,  257,  260,  261,
      262,  263,  260,  261,  262,  263,  261,    0,  262,  263,
      264,    0,    0,  264,  264,    0,  259,    0,  264,    0,
      259,    0,  260,  261,  259,  264,  260,  261,  262,  263,
      260,  261,  262,  263,  261,  265,  262,  263,  264,  265,
      266,  264,  264,  265,  266,    0,  264,  267,  266,    0,
      268,  267,  269,  264,  268,  267,  269,  265,  268,    0,
      269,    0,  270,  265,  271,    0,  270,  265,  266,    0,
      270,  265,  266,    0,    0,  267,  266,  270,  268,  267,
      269,    0,  268,  267,  269,  265,  268,  272,  269,  271,

      270,  272,  273,  271,  270,  272,  273,  271,  270,  274,
      273,    0,  272,  274,  276,  270,    0,  274,  276,    0,
        0,    0,  276,    0,    0,  272,    0,  271,  274,  272,
      273,  271,    0,  272,  273,  271,    0,  274,  273,  275,
      272,  274,  276,  275,    0,  274,  276,  275,    0,  277,
      276,  277,  275,  277,    0,  278,  274,  277,    0,  278,
      279,  280,  277,  278,  279,  280,  281,  275,  279,  280,
      281,  275,    0,    0,  281,  275,    0,  277,  282,  277,
      275,  277,  282,  278,    0,  277,  282,  278,  279,  280,
      277,  278,  279,  280,  281,    0,  279,  280,  281,  283,

      284,  285,  281,  283,  284,  285,  282,  283,  284,  285,
      282,  286,  285,  284,  282,  286,    0,    0,  283,  286,
      285,    0,  288,  289,    0,    0,  288,  283,  284,  285,
      288,  283,  284,  285,  287,  283,  284,  285,  287,  286,
      285,  284,  287,  286,    0,  287,  283,  286,  285,  289,
      288,  290,  291,  289,  288,  290,  291,  289,  288,  290,
      291,  290,  287,  294,  292,    0,  287,  294,  293,    0,
      287,  294,  293,  287,    0,    0,  293,  289,  293,  290,
      291,  289,    0,  290,  291,  289,    0,  290,  291,  290,
      292,  294,    0,    0,  292,  294,  293,  295,  292,  294,

      293,  295,    0,  297,  293,  295,  293,  297,  299,  298,
      295,  297,  299,  298,  297,    0,  299,  298,  292,    0,
        0,    0,  292,  298,  301,  295,  292,    0,  301,  295,
        0,  297,  301,  295,    0,  297,  299,  298,  295,  297,
      299,  298,  297,  301,  299,  298,  300,    0,    0,  302,
      300,  298,  301,  302,  300,  303,  301,  302,    0,  303,
      301,    0,    0,  303,    0,  307,  300,    0,    0,  307,
        0,  301,    0,  307,  300,    0,  304,  302,  300,    0,
      304,  302,  300,  303,  304,  302,    0,  303,  305,  304,
        0,  303,  305,  307,  300,  306,  305,  307,  309,  306,

        0,  307,  309,  306,  304,  305,  309,    0,  304,    0,
        0,    0,  304,    0,  306,  308,  305,  304,  308,    0,
      305,  308,    0,  306,  305,    0,  309,  306,  308,    0,
      309,  306,  308,  305,  309,  308,  312,  310,    0,    0,
      312,  310,  306,  308,  312,  310,  308,  311,    0,  308,
      310,  311,  311,  312,    0,  311,  308,  310,  313,    0,
      308,    0,  313,  308,  312,  310,  313,    0,  312,  310,
        0,    0,  312,  310,    0,  311,    0,    0,  310,  311,
      311,  312,  313,  311,  314,  310,  313,    0,  314,    0,
      313,  314,  314,  316,  313,  316,  317,  316,  318,  320,

      317,  316,  318,  320,  317,  319,  318,  320,  319,  319,
      313,    0,  314,  319,  321,    0,  314,    0,  321,  314,
      314,  316,  321,  316,  317,  316,  318,  320,  317,  316,
      318,  320,  317,  319,  318,  320,  319,  319,    0,  322,
        0,  319,  321,  322,    0,    0,  321,  322,    0,    0,
      321,    0,    0,    0,    0,    0,    0,    0,  322,    0,
        0,  326,  328,    0,  326,  326,  328,  322,    0,    0,
      328,  322,    0,    0,    0,  322,  326,  326,  326,  326,
      326,  326,  326,  326,    0,  330,  322,    0,    0,  330,
      328,  329,  329,  330,  328,  329,  331,  332,  328,  329,

      331,  332,    0,  331,  331,  332,    0,    0,    0,    0,
      332,    0,    0,  330,    0,    0,  326,  330,  333,  329,
      329,  330,  333,  329,  331,  332,  333,  329,  331,  332,
        0,  331,  331,  332,    0,  335,  334,    0,  332,  335,
      334,  336,  333,  335,  334,  336,  333,    0,    0,  336,
      333,    0,  335,  337,  333,  334,  336,  338,    0,    0,
        0,  338,    0,  335,  334,  338,    0,  335,  334,  336,
      333,  335,  334,  336,    0,    0,    0,  336,  337,    0,
      335,    0,  337,  334,  336,  338,  337,  339,    0,  338,
      340,  339,  339,  338,  340,  339,  341,  345,  340,    0,

      341,  345,    0,    0,  341,  345,  337,  341,  342,  340,
      337,    0,  342,    0,  337,  339,  342,    0,  340,  339,
      339,  342,  340,  339,  341,  345,  340,    0,  341,  345,
        0,    0,  341,  345,    0,  341,  342,  340,    0,  346,
      342,    0,    0,  346,  342,    0,    0,  346,    0,  342,
      344,  344,  344,  344,  344,  347,  344,  347,    0,  347,
      348,  349,  344,  347,  348,  349,  344,  346,  348,  349,
      344,  346,    0,  351,  348,  346,    0,  351,  350,    0,
      348,  351,  350,  347,    0,  347,  350,  347,  348,  349,
      344,  347,  348,  349,  344,  350,  348,  349,  344,  352,

        0,  351,  348,  352,    0,  351,  350,  352,  348,  351,
      350,  353,    0,    0,  350,  353,    0,    0,  352,  353,
        0,    0,    0,  350,    0,    0,    0,  352,    0,    0,
      353,  352,    0,  354,    0,  352,  354,  354,    0,  353,
        0,    0,    0,  353,    0,    0,  352,  353,  354,  354,
      354,  354,  354,  354,  354,  354,    0,    0,  353,  355,
      355,  355,  355,  355,  357,  355,  358,    0,  357,  366,
      358,  355,  357,  366,  358,  355,    0,  366,    0,  355,
        0,    0,    0,    0,    0,    0,    0,    0,  354,    0,
        0,    0,  357,    0,  358,    0,  357,  366,  358,  355,

      357,  366,  358,  355,    0,  366,    0,  355,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,    0,    0,    0,
        0,    0,    0,    0,    0,  364,  364,  364,  364,  364,
      367,  368,  369,  370,  367,  368,  369,  370,  367,  368,
      369,  370,    0,  373,    0,  368,    0,  373,    0,  369,
        0,  373,  370,    0,    0,    0,  364,    0,  367,  368,
      369,  370,  367,  368,  369,  370,  367,  368,  369,  370,
      372,  373,    0,  368,  372,  373,    0,  369,  372,  373,
      370,    0,  374,  364,  364,    0,  374,  375,  376,  372,

      374,  375,  376,    0,    0,  375,  376,  378,  372,  377,
      378,  378,  372,  377,  377,  378,  372,  377,    0,    0,
      374,    0,    0,    0,  374,  375,  376,  372,  374,  375,
      376,    0,  379,  375,  376,  378,  379,  377,  378,  378,
      379,  377,  377,  378,  381,  377,  382,    0,  381,    0,
      382,  384,  381,    0,  382,  384,    0,  381,    0,  384,
      379,  385,    0,    0,  379,    0,    0,  383,  379,  383,
        0,  383,  381,  386,  382,  383,  381,  386,  382,  384,
      381,  386,  382,  384,  383,  381,  385,  384,  387,    0,
      385,    0,  387,    0,  385,  383,  387,  383,    0,  383,

      388,  386,    0,  383,  388,  386,  387,  389,  388,  386,
        0,  389,  383,  388,  385,  389,  387,  390,  385,  391,
      387,  390,  385,  391,  387,  390,    0,  391,  388,  392,
      391,    0,  388,  392,  387,  389,  388,  392,  393,  389,
      394,  388,  393,  389,  394,  390,  393,  391,  394,  390,
        0,  391,  395,  390,    0,  391,  395,  392,  391,  396,
      395,  392,    0,  396,  396,  392,  393,  396,  394,  397,
      393,  400,  394,  397,  393,  400,  394,  397,  398,  400,
      395,  398,  398,  397,  395,  402,  398,  396,  395,  402,
      403,  396,  396,  402,  403,  396,    0,  397,  403,  400,

      402,  397,    0,  400,  404,  397,  398,  400,  404,  398,
      398,  397,  404,  402,  398,  406,    0,  402,  403,    0,
        0,  402,  403,    0,    0,  405,  403,  407,  402,  405,
      405,  407,  404,  405,    0,  407,  404,    0,  405,  408,
      404,  406,  410,  408,  407,  406,  410,  408,    0,  406,
      410,    0,    0,  405,    0,  407,  410,  405,  405,  407,
        0,  405,    0,  407,    0,    0,  405,  408,    0,  406,
      410,  408,  407,  406,  410,  408,  409,  406,  410,  409,
      409,  411,  418,    0,  410,  411,  418,    0,    0,  411,
      418,  409,  409,  409,  409,  409,  409,  409,  409,    0,

      418,    0,    0,    0,  419,    0,    0,  420,  419,  411,
      418,  420,  419,  411,  418,  420,    0,  411,  418,  421,
      420,  424,    0,  421,    0,  424,    0,  421,  418,  424,
      422,  409,  419,    0,  422,  420,  419,  423,  422,  420,
      419,  423,  425,  420,  422,  423,  425,  421,  420,  424,
      425,  421,  423,  424,    0,  421,  426,  424,  422,  427,
      426,  425,  422,  427,  426,  423,  422,  427,    0,  423,
      425,  429,  422,  423,  425,  429,    0,    0,  425,  429,
      423,    0,  428,    0,  426,  428,  428,  427,  426,  425,
      428,  427,  426,  431,  432,  427,    0,  431,  432,  429,

        0,  431,  432,  429,  431,    0,    0,  429,  433,  435,
      428,  434,  433,  428,  428,  434,  433,    0,  428,  434,
      436,  431,  432,  438,  436,  431,  432,  438,  436,  431,
      432,  438,  431,    0,  435,    0,  433,    0,  435,  434,
      433,    0,  435,  434,  433,  441,  437,  434,  436,  441,
      437,  438,  436,  441,  437,  438,  436,  437,    0,  438,
      442,  439,  435,  443,  442,  439,  435,  443,  442,  439,
      435,  443,  451,  441,  437,  439,  451,  441,  437,  444,
      451,  441,  437,  444,  442,  437,  452,  444,  442,  439,
      452,  443,  442,  439,  452,  443,  442,  439,  444,  443,

      451,    0,    0,  439,  451,  452,    0,  444,  451,    0,
        0,  444,  442,    0,  452,  444,  453,  454,  452,  455,
      453,  454,  452,  455,  453,  454,  444,  455,  456,  453,
        0,  458,  456,  452,  455,  458,  456,  454,    0,  458,
        0,    0,    0,    0,  453,  454,  457,  455,  453,  454,
      457,  455,  453,  454,  457,  455,  456,  453,    0,  458,
      456,    0,  455,  458,  456,  454,    0,  458,  457,  459,
        0,    0,  460,  459,  457,  460,  460,  459,  457,    0,
        0,    0,  457,    0,    0,    0,    0,  460,  460,  460,
      460,  460,  460,  460,  460,    0,  457,  459,  467,    0,

      468,  459,  467,    0,  468,  459,  467,    0,  468,    0,
      469,  467,    0,    0,  469,    0,  470,  468,  469,    0,
      470,    0,    0,    0,  470,  472,  467,  460,  468,  469,
      467,    0,  468,  470,  467,    0,  468,    0,  469,  467,
        0,    0,  469,  471,  470,  468,  469,  471,  470,    0,
      472,  471,  470,    0,  472,  475,  471,  469,  472,  475,
      476,  470,  478,  475,  476,  478,  478,    0,  476,  479,
      478,  471,  477,  479,    0,  471,  477,  479,  472,  471,
      477,    0,  472,  475,  471,  477,  472,  475,  476,    0,
      478,  475,  476,  478,  478,  480,  476,  479,  478,  480,

      477,  479,    0,  480,  477,  479,    0,  481,  477,    0,
      480,  481,  482,  477,    0,  481,  482,  483,  482,    0,
      482,  483,  484,  480,    0,  483,  484,  480,  486,    0,
      484,  480,  486,    0,    0,  481,  486,    0,  480,  481,
      482,    0,  486,  481,  482,  483,  482,    0,  482,  483,
      484,  487,    0,  483,  484,  487,  486,  488,  484,  487,
      486,  488,  487,  488,  486,  488,    0,  489,  491,  490,
      486,  489,  491,  490,  492,  489,  491,  490,  492,  487,
        0,    0,  492,  487,    0,  488,    0,  487,    0,  488,
      487,  488,  490,  488,    0,  489,  491,  490,    0,  489,

      491,  490,  492,  489,  491,  490,  492,  493,  494,  495,
      492,  493,  494,  495,  496,  493,  494,  495,  496,  497,
      490,  498,  496,  497,  493,  498,  498,  497,  496,  498,
      494,    0,    0,    0,    0,  493,  494,  495,    0,  493,
      494,  495,  496,  493,  494,  495,  496,  497,    0,  498,
      496,  497,  493,  498,  498,  497,  496,  498,  494,  499,
      501,  501,    0,  499,  501,  502,    0,  499,  501,  502,
      502,    0,    0,  502,    0,    0,  504,  513,  504,    0,
      504,  513,    0,    0,  504,  513,    0,  499,  501,  501,
        0,  499,  501,  502,    0,  499,  501,  502,  502,  503,

        0,  502,  503,  503,  504,  513,  504,    0,  504,  513,
        0,    0,  504,  513,  503,  503,  503,  503,  503,  503,
      503,  503,    0,  505,    0,  516,    0,  505,  514,  516,
      514,  505,  514,  516,    0,    0,  514,  505,  515,  517,
      515,  518,  515,  517,    0,  518,  515,  517,    0,  518,
      517,  505,    0,  516,  503,  505,  514,  516,  514,  505,
      514,  516,    0,    0,  514,  505,  515,  517,  515,  518,
      515,  517,  519,  518,  515,  517,  519,  518,  517,  520,
      519,  523,  521,  520,  521,  523,  521,  520,    0,  523,
      521,    0,  523,    0,  519,    0,    0,    0,  524,    0,

      519,    0,  524,    0,  519,    0,  524,  520,  519,  523,
      521,  520,  521,  523,  521,  520,  524,  523,  521,    0,
      523,  525,  519,  526,    0,  525,  524,  526,    0,  525,
      524,  526,  525,  527,  524,  537,    0,  527,  526,  537,
        0,  527,  538,  537,  524,    0,  538,    0,  540,  525,
      538,  526,  540,  525,  539,  526,  540,  525,  539,  526,
      525,  527,  539,  537,  541,  527,  526,  537,  541,  527,
      538,  537,  541,  539,  538,    0,  540,    0,  538,    0,
      540,    0,  539,    0,  540,    0,  539,    0,    0,    0,
      539,  543,  541,    0,  543,  543,  541,    0,    0,    0,

      541,  539,    0,    0,    0,    0,  543,  543,  543,  543,
      543,  543,  543,  543,    0,  553,  554,    0,    0,  553,
      554,  553,  555,  553,  554,  556,  555,  557,  561,  556,
      555,  557,  561,  556,    0,  557,  561,    0,    0,    0,
        0,    0,    0,  553,  554,    0,  543,  553,  554,  553,
      555,  553,  554,  556,  555,  557,  561,  556,  555,  557,
      561,  556,  562,  557,  561,    0,  562,  563,  564,  562,
      562,  563,  564,    0,    0,  563,  564,  565,    0,  566,
        0,    0,    0,  566,  562,  567,  564,  566,    0,  567,
      562,  567,  566,  567,  562,  563,  564,  562,  562,  563,

      564,  569,  565,  563,  564,  569,  565,  566,    0,  569,
      565,  566,  562,  567,  564,  566,    0,  567,  568,  567,
      566,  567,  568,  568,  570,    0,  568,    0,  570,  569,
      565,  568,  570,  569,  565,  570,  571,  569,  565,  572,
      571,  573,    0,  572,  571,  573,  568,  572,    0,  573,
      568,  568,  570,  574,  568,    0,  570,  574,  575,  568,
      570,  574,  575,  570,  571,    0,  575,  572,  571,  573,
      576,  572,  571,  573,  576,  572,  576,  573,  576,  577,
        0,  574,    0,  577,    0,  574,  575,  577,    0,  574,
      575,    0,    0,  577,  575,    0,    0,    0,  576,    0,

        0,    0,  576,    0,  576,    0,  576,  577,    0,  581,
        0,  577,  581,  581,    0,  577,    0,    0,    0,  582,
        0,  577,  582,  582,  581,  581,  581,  581,  581,  581,
      581,  581,    0,    0,  582,  582,  582,  582,  582,  582,
      582,  582,    0,  583,  583,  589,    0,  583,  590,  589,
      591,  583,  590,  589,  591,  592,  590,  593,  591,  592,
        0,  593,  594,  592,  581,  593,  594,  590,    0,    0,
      594,  583,  583,  589,  582,  583,  590,  589,  591,  583,
      590,  589,  591,  592,  590,  593,  591,  592,  595,  593,
      594,  592,  595,  593,  594,  590,  595,  596,  594,  596,

        0,  597,    0,  598,    0,  597,  595,  598,    0,  597,
      599,  598,    0,  600,  599,  602,  595,  600,  599,  602,
      595,  600,  603,  602,  595,    0,  603,    0,  596,  597,
      603,  598,  596,  597,  595,  598,  596,  597,  599,  598,
      603,  600,  599,  602,  605,  600,  599,  602,  605,  600,
      603,  602,  605,  606,  603,  605,  596,  606,  603,  607,
      596,  606,  608,  607,  596,  609,  608,  607,  603,  609,
      608,    0,  605,  609,    0,    0,  605,    0,    0,    0,
      605,  606,    0,  605,  611,  606,    0,  607,  611,  606,
      608,  607,  611,  609,  608,  607,    0,  609,  608,    0,

      612,  609,    0,  611,  612,  613,    0,  612,  612,  613,
      613,  614,  611,  613,  616,  614,  611,    0,  616,  614,
      611,  615,  616,    0,    0,  615,  619,    0,  612,  615,
      619,  611,  612,  613,  619,  612,  612,  613,  613,  614,
      615,  613,  616,  614,  617,    0,  616,  614,  617,  615,
      616,  618,  617,  615,  619,  618,  617,  615,  619,  618,
        0,  620,  619,    0,  618,  620,    0,    0,  615,  620,
        0,    0,  617,    0,  620,    0,  617,    0,    0,  618,
      617,    0,    0,  618,  617,    0,    0,  618,    0,  620,
        0,  621,  618,  620,  621,  621,  622,  620,    0,    0,

      622,    0,  620,    0,  622,  622,  621,  621,  621,  621,
      621,  621,  621,  621,    0,  628,    0,  629,    0,  628,
        0,  629,  630,  628,  622,  629,  630,  631,  622,    0,
      630,  631,  622,  622,  633,  631,  634,    0,  633,  630,
      634,  634,  633,  628,  634,  629,  621,  628,    0,  629,
      630,  628,  633,  629,  630,  631,    0,  635,  630,  631,
        0,  635,  633,  631,  634,  635,  633,  630,  634,  634,
      633,  636,  634,  637,    0,  636,    0,  637,    0,  636,
      633,  637,    0,  638,  641,  635,  638,  638,  641,  635,
        0,  638,  641,  635,    0,    0,  639,    0,  640,  636,

      639,  637,  640,  636,  639,  637,  640,  636,    0,  637,
        0,  638,  641,  639,  638,  638,  641,  640,    0,  638,
      641,  642,    0,  643,  639,  642,  640,  643,  639,  642,
      640,  643,  639,    0,  640,  644,  649,    0,    0,  644,
      649,  639,  645,  644,  649,  640,  645,    0,    0,  642,
      645,  643,    0,  642,  646,  643,    0,  642,  646,  643,
        0,  645,  646,  644,  649,    0,    0,  644,  649,    0,
      645,  644,  649,  646,  645,    0,  648,  653,  645,  648,
      648,  653,  646,    0,    0,  653,  646,    0,    0,  645,
      646,  648,  648,  648,  648,  648,  648,  648,  648,    0,

      652,  646,  655,    0,  652,  653,  655,  656,  652,  653,
      655,  656,  657,  653,  652,  656,  657,  658,  659,    0,
      657,  658,  659,    0,  659,  658,  659,    0,  652,  662,
      655,  648,  652,  662,  655,  656,  652,  662,  655,  656,
      657,    0,  652,  656,  657,  658,  659,  660,  657,  658,
      659,  660,  659,  658,  659,  660,  661,  662,    0,  663,
      661,  662,    0,  663,  661,  662,  660,  663,  664,    0,
      665,    0,  664,  661,  665,  660,  664,  666,  665,  660,
        0,  666,  667,  660,  661,  666,  667,  663,  661,    0,
      667,  663,  661,    0,  660,  663,  664,    0,  665,  670,

      664,  661,  665,  670,  664,  666,  665,  670,    0,  666,
      667,    0,  670,  666,  667,  668,  671,  668,  667,  668,
      671,  671,    0,  668,  671,  676,  675,  670,  675,  676,
      675,  670,  676,  676,  675,  670,    0,    0,    0,    0,
      670,    0,  678,  668,  671,  668,  678,  668,  671,  671,
      678,  668,  671,  676,  675,    0,  675,  676,  675,  677,
      676,  676,  675,  677,  679,  680,  677,  677,  679,  680,
      678,  682,  679,  680,  678,  682,    0,    0,  678,  682,
        0,  683,  687,    0,  680,  683,  687,  677,    0,  683,
      687,  677,  679,  680,  677,  677,  679,  680,  683,  682,

      679,  680,    0,  682,    0,    0,    0,  682,    0,  683,
      687,  688,  680,  683,  687,  688,  689,  683,  687,  688,
      689,  690,    0,  692,  689,  690,  683,  692,  693,  690,
      688,  692,  693,  694,  695,    0,  693,  694,  695,  688,
        0,  694,  695,  688,  689,    0,  695,  688,  689,  690,
        0,  692,  689,  690,    0,  692,  693,  690,  688,  692,
      693,  694,  695,  696,  693,  694,  695,  696,  697,  694,
      695,  696,  697,    0,  695,    0,  697,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  696,    0,    0,    0,  696,  697,    0,    0,  696,

      697,    0,    0,    0,  697,  699,  699,  699,  701,  701,
      702,  702,  702,  703,  703,  704,  704,  705,  705,  706,
      706,  707,  707,  708,  708,  708,  709,  709,  709,  710,
      710,  711,  711,  712,  712,  713,  713,  714,  714,  715,
      715,  716,  716,  717,  717,  718,  718,  718,  719,  719,
      719,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[225] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "DARIC.l"
#line 6 "DARIC.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <string>
#include <unordered_set>
#include <stack>
#include <map>
#include "bison.hpp"
std::string file;
int yyfileno = 0;
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 2067 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"
#line 2068 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 51 "DARIC.l"


#line 2288 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 699 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5652 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 53 "DARIC.l"
/* skip comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "DARIC.l"
/* skip blanks and tabs */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "DARIC.l"
return NL;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "DARIC.l"
return SS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "DARIC.l"
return INTEGERDIVIDE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "DARIC.l"
return TILDE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "DARIC.l"
return TICK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "DARIC.l"
return E;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "DARIC.l"
return SEMICOLON;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "DARIC.l"
return LE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "DARIC.l"
return GE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "DARIC.l"
return SHL_E;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "DARIC.l"
return SHR_E;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 67 "DARIC.l"
return PLUS_E;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 68 "DARIC.l"
return MINUS_E;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 69 "DARIC.l"
return MULTIPLY_E;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 70 "DARIC.l"
return DIVIDE_E;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 71 "DARIC.l"
return INTEGERDIVIDE_E;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "DARIC.l"
return NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "DARIC.l"
return SHL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "DARIC.l"
return SHR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "DARIC.l"
return PLUS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "DARIC.l"
return MINUS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "DARIC.l"
return MULTIPLY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "DARIC.l"
return DIVIDE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "DARIC.l"
return LT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "DARIC.l"
return GT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 83 "DARIC.l"
return BANKED;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 84 "DARIC.l"
return BGET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 85 "DARIC.l"
return BPUT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 86 "DARIC.l"
return BREAKPOINT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 87 "DARIC.l"
return CASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 88 "DARIC.l"
return CHAIN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 89 "DARIC.l"
return CLOSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "DARIC.l"
return DATA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "DARIC.l"
return DIM;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "DARIC.l"
return ELSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "DARIC.l"
return END;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "DARIC.l"
return END_CASE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "DARIC.l"
return END_IF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "DARIC.l"
return END_FN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "DARIC.l"
return END_FN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "DARIC.l"
return END_PROC;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "DARIC.l"
return END_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "DARIC.l"
return END_WHILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "DARIC.l"
return END_CASE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "DARIC.l"
return END_IF;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "DARIC.l"
return END_FN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "DARIC.l"
return END_FN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "DARIC.l"
return END_PROC;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "DARIC.l"
return END_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "DARIC.l"
return END_WHILE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "DARIC.l"
return EOFH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "DARIC.l"
return EXPECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "DARIC.l"
return FIELD;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "DARIC.l"
return FOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "DARIC.l"
return GET;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "DARIC.l"
return GETS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "DARIC.l"
return GETSH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "DARIC.l"
return GOSUB;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "DARIC.l"
return GOTO;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "DARIC.l"
return INKEY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "DARIC.l"
return INKEYS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "DARIC.l"
return INPUT_;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "DARIC.l"
return GLOBAL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "DARIC.l"
return IF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "DARIC.l"
return IN_;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 124 "DARIC.l"
return LISTFILES;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "DARIC.l"
return LOCAL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "DARIC.l"
return MOUSE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "DARIC.l"
return NEXT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "DARIC.l"
return OF;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "DARIC.l"
return OPENIN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "DARIC.l"
return OPENOUT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 131 "DARIC.l"
return OPENUP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 132 "DARIC.l"
return OTHERWISE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "DARIC.l"
return PRINT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 134 "DARIC.l"
return PTR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 135 "DARIC.l"
return READ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 136 "DARIC.l"
return REPEAT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 137 "DARIC.l"
return RESTORE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 138 "DARIC.l"
return RND;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 139 "DARIC.l"
return RND0;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "DARIC.l"
return RND1;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "DARIC.l"
return OSCLI;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "DARIC.l"
return RETURN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "DARIC.l"
return SPC;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "DARIC.l"
return STEP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "DARIC.l"
return SWAP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "DARIC.l"
return THEN;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "DARIC.l"
return TO;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "DARIC.l"
return TIME;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 "DARIC.l"
return TIMES;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "DARIC.l"
return TRACEON;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 151 "DARIC.l"
return TRACEOFF;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 152 "DARIC.l"
return TYPE_;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 "DARIC.l"
return UNTIL;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 "DARIC.l"
return WHEN;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 155 "DARIC.l"
return WHILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "DARIC.l"
return ASC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "DARIC.l"
return CHRS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "DARIC.l"
return INSTR;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "DARIC.l"
return LEFTS;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "DARIC.l"
return MIDS;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "DARIC.l"
return RIGHTS;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "DARIC.l"
return LEN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "DARIC.l"
return STRS;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 "DARIC.l"
return STRINGS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "DARIC.l"
return AND;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "DARIC.l"
return OR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "DARIC.l"
return EOR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "DARIC.l"
return NOT; 
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 172 "DARIC.l"
return FLOAT_;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 173 "DARIC.l"
return INT_;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "DARIC.l"
return ACS;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "DARIC.l"
return DIV;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "DARIC.l"
return MOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "DARIC.l"
return SQR; 
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "DARIC.l"
return LN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 179 "DARIC.l"
return LOG;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 180 "DARIC.l"
return EXP;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "DARIC.l"
return ATN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "DARIC.l"
return TAN;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "DARIC.l"
return COS;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "DARIC.l"
return SIN; 
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 185 "DARIC.l"
return ASN; 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 186 "DARIC.l"
return ABS; 
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 187 "DARIC.l"
return DEG; 
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 188 "DARIC.l"
return RAD; 
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 189 "DARIC.l"
return SGN; 
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 190 "DARIC.l"
return PI; 
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "DARIC.l"
return VAL; 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "DARIC.l"
return BOOLFALSE; 
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "DARIC.l"
return BOOLTRUE; 
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "DARIC.l"
return CIRCLE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "DARIC.l"
return CLS;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "DARIC.l"
return CLIPON;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "DARIC.l"
return CLIPOFF;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "DARIC.l"
return COLOUR;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "DARIC.l"
return COLOURBG;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "DARIC.l"
return FILL;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "DARIC.l"
return FLIP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "DARIC.l"
return SHOWFPS;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "DARIC.l"
return GRAPHICS;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "DARIC.l"
return LINE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "DARIC.l"
return RECTANGLE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 209 "DARIC.l"
return PLOT;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 210 "DARIC.l"
return POINT_;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 211 "DARIC.l"
return SHADED;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 212 "DARIC.l"
return TEXT;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 213 "DARIC.l"
return TEXTRIGHT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 214 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 215 "DARIC.l"
return TEXTCENTRE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 216 "DARIC.l"
return LOADTYPEFACE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 217 "DARIC.l"
return CREATEFONT;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 218 "DARIC.l"
return MONO15;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 219 "DARIC.l"
return MONO20;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 220 "DARIC.l"
return MONO25;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 221 "DARIC.l"
return MONO30;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 222 "DARIC.l"
return MONO35;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 223 "DARIC.l"
return MONO40;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 224 "DARIC.l"
return MONO50;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 225 "DARIC.l"
return MONO75;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 226 "DARIC.l"
return MONO100;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 227 "DARIC.l"
return PROP15;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 228 "DARIC.l"
return PROP20;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 229 "DARIC.l"
return PROP25;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 230 "DARIC.l"
return PROP30;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 231 "DARIC.l"
return PROP35;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 232 "DARIC.l"
return PROP40;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 233 "DARIC.l"
return PROP50;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 234 "DARIC.l"
return PROP75;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 235 "DARIC.l"
return PROP100;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 236 "DARIC.l"
return TRIANGLE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 237 "DARIC.l"
return SCREENWIDTH;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 238 "DARIC.l"
return SCREENHEIGHT;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 239 "DARIC.l"
return RED;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 240 "DARIC.l"
return GREEN;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 241 "DARIC.l"
return YELLOW;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 242 "DARIC.l"
return BLUE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 243 "DARIC.l"
return MAGENTA;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 244 "DARIC.l"
return CYAN;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 245 "DARIC.l"
return WHITE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 246 "DARIC.l"
return BLACK;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 247 "DARIC.l"
return LASTPOS;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 249 "DARIC.l"
return DELETEOBJECT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 250 "DARIC.l"
return CREATEVERTEX;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 251 "DARIC.l"
return CREATETRIANGLE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 252 "DARIC.l"
return CREATESHAPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 253 "DARIC.l"
return RENDERFRAME;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 254 "DARIC.l"
return CREATEOBJECT;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 255 "DARIC.l"
return TRANSLATE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 256 "DARIC.l"
return ROTATE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 257 "DARIC.l"
return SCALE; 
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 258 "DARIC.l"
return SOLID; 
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 259 "DARIC.l"
return WIREFRAME; 
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 260 "DARIC.l"
return FILLEDWIREFRAME;
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 262 "DARIC.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
#ifdef WINDOWS
                        s += ".daric";
#endif

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            yyfileno++;
                            files_index.insert(std::pair<std::string, int>(s, yyfileno));
                            strcpy(yytext, s.c_str());
                            included_files.insert(std::move(s));
                            yyin = fopen(yytext, "r");
                            if (!yyin) {
                                fprintf(stderr, "Include file '%s' not found", yytext);
                                exit(1);
                            }
	                        //std::cout << "Including '" << yytext << "' at line " << yylineno << " as file index " << yyfileno << std::endl;
                            file_stack.push(std::move(file));
                            file = yytext;
                            yylineno_stack.push(yylineno);
                            yylineno = 0;
                            yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                            BEGIN(INITIAL);
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 298 "DARIC.l"
{
                        static int once = 0; 
                        if (once = !once)
                            return NL;
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 313 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 314 "DARIC.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 315 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 316 "DARIC.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 2); return LITERAL_INT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 317 "DARIC.l"
{ yylval.v_real = std::stod(yytext); return LITERAL_REAL; }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 318 "DARIC.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 319 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_PROCEDURE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 320 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_INTEGER_FUNCTION; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 321 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_STRING_FUNCTION; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 322 "DARIC.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_REAL_FUNCTION; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 323 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_FUNCTION; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 324 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_FUNCTION; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 325 "DARIC.l"
{ yylval.v_string = strdup(yytext); return REAL_FUNCTION; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 326 "DARIC.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 327 "DARIC.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 328 "DARIC.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 329 "DARIC.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 330 "DARIC.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 218:
#line 333 "DARIC.l"
case 219:
#line 334 "DARIC.l"
case 220:
#line 335 "DARIC.l"
case 221:
#line 336 "DARIC.l"
case 222:
YY_RULE_SETUP
#line 336 "DARIC.l"
{ return yytext[0]; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 338 "DARIC.l"
/* do nothing */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 340 "DARIC.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3521 "C:\\Users\\d_dud\\source\\repos\\PiBasic\\V4\\src\\parser\\flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 699 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 699 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 698);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 340 "DARIC.l"

