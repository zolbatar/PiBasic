#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[568] =
    {   0,
        0,    0,  192,  190,    2,    3,  190,  188,  158,  189,
      174,  175,  181,  179,  178,  180,  159,  182,  157,    3,
      186,  183,    5,  184,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  176,  177,  187,  185,    2,  156,
        2,    3,    0,  160,    0,  158,    0,  159,    0,    4,
      159,  157,   11,    9,    6,    8,   12,    7,   10,  171,
      170,  169,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,   30,  173,

      173,  173,  173,   39,  173,  173,  173,  138,  173,  173,
      173,  173,  173,  173,   42,  173,  130,  173,  173,  151,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   59,
      173,  173,  173,  173,  173,  173,  173,    2,  156,  156,
        0,  160,    0,  172,    0,  159,  146,  134,  129,  120,
      145,  141,  173,  173,  173,  173,  173,  173,  173,   69,
      173,  143,  173,  173,   18,  147,   19,  135,  173,  173,
      173,   21,  173,  131,  140,  173,  173,  173,  173,  173,
      173,  163,   31,  173,  173,  173,  173,  173,  173,  173,

      133,  173,  126,   38,  173,  173,  173,  139,  173,  136,
      173,  173,  152,  173,  173,  173,  173,  173,  173,  173,
      148,  173,  173,   49,    1,  173,  173,  173,  173,  173,
       52,  173,  173,  173,  149,  173,  144,  173,   55,  137,
      173,  173,   57,  142,  173,  173,  173,  173,  173,  173,
      173,  173,  150,  173,  173,  173,  173,  173,  173,   15,
      121,  173,  173,  173,  173,  173,   17,  173,  173,  173,
      173,   20,  173,  173,  173,  173,  173,  173,   28,  110,
      173,  173,   75,   76,  173,  161,  162,  163,  163,  173,
      173,   34,  173,  173,  173,  173,  173,   78,  173,  173,

      124,  173,   41,  173,  173,  173,  173,   80,  173,  173,
      173,   48,  173,    1,    1,    1,    1,    1,    1,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       56,  127,  173,   82,   58,   60,  173,  173,  173,  154,
       64,  173,  173,   66,  173,  173,   13,   14,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,   24,   23,
      173,  173,  173,  153,   29,  132,  173,   33,  173,   35,
       37,  173,  122,  123,  173,   40,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,   53,  173,   47,  164,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  116,  173,  173,  111,  117,  173,  173,
      173,   61,  173,  173,  173,   65,  173,   67,  173,   68,
      173,   70,   16,   72,  173,  168,  173,  173,  173,  173,
      173,  173,  173,   32,  173,   36,  173,  173,   88,   89,
       90,   91,   92,   93,   94,   95,  113,   43,  173,   45,
      173,  164,  164,   97,   98,   99,  100,  101,  102,  103,
      104,  173,  112,   50,  173,   54,  125,  115,  173,   81,
      173,  173,  173,  173,  173,  173,  109,  173,   71,  173,
      173,  167,  166,  168,  168,  173,  173,   74,   22,   25,
       26,  173,  173,  173,  173,   96,   44,  173,  105,  173,

       51,  173,  173,  128,  173,  173,  173,   62,  173,  173,
      173,   73,  173,  165,  173,   27,   77,    0,  173,  173,
      173,  173,  173,  173,  173,   63,  173,  106,  173,  173,
      165,  165,  173,    0,  173,   46,   79,  173,  173,  173,
      173,   83,  114,  118,   87,  173,    0,  155,    0,  173,
      173,  173,   85,   84,  173,    0,  155,    0,  173,  173,
      107,  173,   86,  108,  173,  119,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   25,   25,   27,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,    1,   61,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   57,    1,   87,    1,   88,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[89] =
    {   0,
        1,    1,    2,    3,    1,    1,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        3,    5,    5,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1
    } ;

static const flex_int16_t yy_base[590] =
    {   0,
        0,   87,  172, 3844,  168,   87,   86, 3844,    0, 3844,
     3844, 3844,  148, 3844, 3844, 3844,   96,  124,   75,   99,
      109,   74,   96,   93,  159,  237,  283,  159,  328,  382,
       92,   87,  149,  231,  226,  243,  427,  299,  439,  482,
      532,  160,  302,  248, 3844, 3844, 3844, 3844,  127,  229,
       91,  130,  131, 3844,  153,    0,    0,  366,  417, 3844,
      517,  600, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844,  136,  236,  423,  497,  434,  535,  379,  519,
      415,  529,  566,  589,  601,  590,  606,  442,  612,  608,
      449,  649,  655,  657,  523,  667,  703,  681,  766,  716,

      756,  728,  766,  665,  768,  784,  769,  700,  822,  803,
      828,  815,  834,  841,  829,  851,  857,  876,  869,  875,
      883,  886,  901,  947,  903,  935,  936,  958,  948,  998,
      963,  996,  995, 1003, 1008, 1020, 1023, 1043, 1054, 1009,
     1067, 1055, 1065, 1083, 1066, 1100, 1101, 1162, 1170, 1180,
      149,  154,  171,    0, 1188, 1196, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1214, 1237, 1236, 1238, 1239, 1240,
     1250, 1243, 1263, 1290, 1256, 1274, 1291, 1292, 1296, 1306,
     1309, 1353, 1303, 1334, 1341, 1356, 1351, 1367, 1389, 1361,
     1407, 1457, 1378, 1425, 1421, 1448, 1449, 1454, 1453, 1459,

     1461, 1481, 1466, 1476, 1501, 1507, 1509, 1508, 1526, 1512,
     1514, 1519, 1527, 1545, 1560, 1550, 1563, 1568, 1579, 1574,
     1578, 1606, 1592, 1610, 1687, 1741, 1742, 1739, 1744, 1745,
     1747, 1755, 1757, 1791, 1790, 1798, 1793, 1801, 1797, 1804,
     1805, 1839, 1815, 1817, 1842, 1850, 1864, 1867, 1866, 1870,
     1886, 1899, 1852, 1902, 1910, 1913, 1926, 1944, 1955, 1921,
     3844, 1928, 1961, 1959, 1962, 1966, 1972, 1973, 1977, 2017,
     1995, 2013, 2021, 2020, 2024, 2028, 2031, 2064, 3844, 2032,
     2068, 2075, 2046, 2074, 2078, 3844, 3844,  207, 2146, 2126,
     2142, 2080, 2140, 2136, 2109, 2144, 2177, 2164, 2178, 2188,

     3844, 2246, 2180, 2196, 2236, 2239, 2240, 2224, 2243, 2318,
     2307, 2308, 2315,    0,    0,    0,    0, 2392,    0, 2312,
     2379, 2314, 2378, 2377, 2391, 2396, 2397, 2401, 2439, 2446,
     2318, 3844, 2438, 2453, 2393, 2481, 2454, 2486, 2480, 2461,
     2488, 2496, 2504, 2499, 2514, 2537, 3844, 3844, 2524, 2540,
     2541, 2548, 2564, 2627, 2590, 2556, 2607, 2618, 2521, 2617,
     2623, 2624, 2634, 2635, 2642, 2658, 2670, 2659, 2669, 2676,
     2677, 2682, 2683, 3844, 2684, 2694,  391,  748,  404,  793,
      957,  320, 2718, 2719, 2711, 2729, 2730, 2735, 2734, 2801,
     1155, 1657, 2232, 2291, 2362,  373, 2790, 2736, 2763, 2792,

     2791, 2809, 2807, 2795, 2808, 2814, 2810, 2842, 2843, 2856,
     2855, 3844, 2850, 2861, 2860, 2862, 2893, 2867, 2868, 2874,
     2912, 2905, 3844, 2908, 2916, 2983, 2954, 2972, 2977, 2985,
     2982, 2989, 2990, 2918, 2992, 3844, 3027, 3000, 2490,  350,
      441,  541,  582,  870, 1150, 1168, 3014, 3026, 3033, 3034,
     3038, 1241, 3105, 2992, 1443, 1445, 1463, 1655, 1678, 2131,
     2191, 3069, 3085, 3095, 3102, 3096, 3844, 3097, 3113, 3101,
     3112, 3109, 3138, 3154, 3155, 3157, 3156, 3173, 3160, 3171,
     3198, 3844, 3844, 2193, 3239, 3263, 3230, 3172, 3204, 3231,
     3254, 3255, 3265, 3278, 3281, 2245, 3258, 3280, 2328, 3291,

     3273, 3315, 3314, 3844, 3318, 3328, 3333, 3325, 3338, 3341,
     3370, 3356, 3366, 3432, 3399, 3382, 3422,  126, 3424, 3428,
     3432, 3434, 3442, 3448, 3470, 3435, 3477, 3482, 3490, 3484,
     2360, 3556, 3536,  172, 3552, 3485, 3519, 3547, 3550, 3551,
     3555, 3548, 3588, 3595, 3596, 3598,  183, 3844,  277, 3603,
     3601, 3613, 3606, 3608, 3654,  184,  233,  288, 3621, 3646,
     3611, 3656, 3657, 3658, 3670, 3664, 3844, 3747, 3750, 3753,
     3759, 3761, 3765, 3769, 3773, 3777, 3781, 3787, 3793, 3797,
     3801, 3805, 3809, 3813, 3817, 3821, 3825, 3831, 3837
    } ;

static const flex_int16_t yy_def[590] =
    {   0,
      567,    1,  567,  567,  567,  567,  568,  567,  569,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  570,  570,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   30,   26,
       27,   26,   26,   26,  567,  567,  567,  567,  567,  567,
      567,  567,  568,  567,  571,  569,  572,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  573,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  574,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  567,  567,  567,
      568,  568,  571,  572,  567,  567,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  575,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  567,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      567,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  567,   26,
       26,   26,   26,   26,   26,  567,  567,  576,  575,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

      567,   26,   26,   26,   26,   26,   26,   26,   26,  577,
       26,   26,   26,  578,  578,  578,  578,  579,  225,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  567,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  567,  567,   26,   26,
       26,   26,   26,  580,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  567,   26,   26,  573,  573,  573,  573,
      573,  573,   26,   26,   26,   26,   26,   26,   26,  581,
      573,  573,  573,  573,  573,  573,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  567,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  567,   26,   26,  582,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  567,   26,   26,  573,  573,
      573,  573,  573,  573,  573,  573,   26,   26,   26,   26,
       26,  583,  581,  573,  573,  573,  573,  573,  573,  573,
      573,   26,   26,   26,   26,   26,  567,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  567,  567,  584,  582,  585,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  573,   26,   26,  573,   26,

       26,   26,   26,  567,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  586,   26,   26,   26,  567,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      587,  586,   26,  588,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  588,  567,  589,   26,
       26,   26,   26,   26,   26,  588,  588,  589,   26,   26,
       26,   26,   26,   26,   26,   26,    0,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567
    } ;

static const flex_int16_t yy_nxt[3933] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    4,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       32,   32,   34,   35,   36,   37,   38,   32,   39,   40,
       41,   42,   43,   44,   32,   32,   32,   45,    4,   46,
        4,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       32,   32,   34,   35,   36,   37,   38,   32,   39,   40,
       41,   42,   43,   44,   32,   32,   47,   48,   49,   52,
       54,   61,   51,   62,   62,   62,   62,   62,   62,   62,

       62,   52,   64,   65,   66,   50,   50,   50,   50,   50,
       50,   50,   50,   52,   58,   58,   58,   58,   58,   58,
       58,   58,   68,   69,   74,   52,   67,  518,  148,   74,
      534,   59,   52,   74,  101,   54,   63,  102,   74,   70,
      103,   60,   71,   72,   55,  149,  149,  149,  149,  149,
      149,  149,  149,   54,   74,   53,   52,  152,   54,   74,
       57,   59,   70,   74,  101,   71,   72,  102,   74,   51,
      103,  567,  567,   53,  567,  152,  548,   73,   73,   73,
       73,   73,   73,   73,   73,  104,   74,  548,  548,   55,
       88,   75,   76,  105,   89,   74,   74,   74,   90,  567,

      567,  567,  567,   77,  143,   74,   74,   55,   78,   79,
       70,  153,   55,  286,  287,  104,   74,  567,  567,   73,
       88,   75,   76,  105,   89,   74,   74,   74,   90,  153,
      549,  567,  567,   77,  143,   74,   74,  548,   78,   79,
       70,  549,  549,   71,   72,   61,  567,  150,  150,  150,
      150,  150,  150,  150,  150,   73,   73,   73,   73,   73,
       73,   73,   73,   74,  567,  110,  106,  567,   74,  567,
      107,  111,   74,   74,   80,  108,  109,   74,  112,  547,
       74,  557,   74,   81,  567,   74,  146,  147,  113,   74,
      547,  549,  557,   74,   74,  110,  106,   73,   74,  567,

      107,  111,   74,   74,   80,  108,  109,   74,  112,  567,
       74,  567,   74,   81,   82,   74,  146,  147,  113,   74,
       74,   83,   84,   70,   74,   85,   71,   72,   86,   74,
      567,   87,  567,  144,  567,  558,   74,  145,  120,   74,
      567,  121,  567,  446,   82,   74,  558,  122,   74,  567,
       74,   83,   84,   70,  567,   85,   71,   72,   86,   74,
      567,   87,   91,  144,  567,   74,   74,  145,  120,   74,
       92,  121,   93,   94,   74,   74,   70,  122,   74,   71,
       72,  567,   95,  567,   58,   58,   58,   58,   58,   58,
       58,   58,   91,  567,   70,   74,  461,   71,   72,  567,

       92,   59,   93,   94,   74,  567,  567,   70,  567,  439,
       71,   72,   95,   96,  440,  567,   74,  567,  567,   74,
      567,   97,  443,  162,   98,   74,   99,  100,   74,  567,
      155,   59,  155,  567,  567,  156,  156,  156,  156,  156,
      156,  156,  156,   96,   70,  567,   74,   71,   72,   74,
      567,   97,   74,  162,   98,   74,   99,  100,   74,  114,
       74,   74,  567,  115,   74,  567,  164,  567,  159,   74,
      123,   74,  157,  116,  124,  117,  118,  119,  125,   74,
       74,   74,   74,  126,  127,  567,  179,  567,   74,  114,
       74,   74,  174,  115,   74,   74,  164,  567,  159,   74,

      123,   74,  157,  116,  124,  117,  118,  119,  125,   74,
       74,   74,  567,  126,  127,  128,  179,  567,   74,  129,
      130,  131,  174,  567,  567,   74,  567,  132,  133,  134,
      567,  567,  135,  567,   74,   58,   58,   58,   58,   58,
       58,   58,   58,   74,   70,  128,  158,   71,   72,  129,
      130,  131,   59,  567,  163,  567,   74,  132,  133,  134,
       74,  567,  135,  136,   74,   74,   74,  137,  160,  185,
      138,  139,   74,   74,   74,   74,  158,  140,  165,  161,
      141,   74,   59,  567,  163,   70,   74,  142,   71,   72,
       74,  567,  567,  136,  567,   74,   74,  137,  160,  185,

      138,  139,   74,   74,   74,   74,  567,  140,  165,  161,
      141,   74,   74,  567,  166,  567,   61,  142,   62,   62,
       62,   62,   62,   62,   62,   62,   74,   74,  567,  567,
      567,  567,  171,   74,  567,   74,   74,  167,   74,  172,
      168,  173,   74,   74,  166,   74,  169,   74,  175,  176,
      170,  177,   74,  567,   74,  567,   74,   74,   74,  567,
      178,  567,  171,  567,  567,   74,   74,  167,   74,  172,
      168,  173,  567,   74,  567,   74,  169,   74,  175,  176,
      170,  177,   74,  567,   74,  567,   74,  567,   74,  182,
      178,  180,   74,  183,   74,   74,  567,  567,  181,  567,

      186,   74,   74,   74,   74,  184,  567,  567,  567,  187,
      567,   74,  567,   74,  567,  567,   74,  567,   74,  182,
      190,  180,   74,  183,   74,   74,  191,   74,  181,  567,
      186,   74,   74,   74,   74,  184,  567,   74,  188,  187,
       74,   74,  567,   74,  567,  189,   74,  567,   74,   74,
      190,   70,  567,   74,   71,   72,  191,   74,  567,  567,
      567,  567,   74,  567,  193,   74,  441,   74,  188,   70,
       74,  442,   71,   72,   74,  189,   74,  195,  196,   74,
      567,  567,  567,   74,   73,   73,   73,   73,   73,   73,
       73,   73,   74,   74,  193,   74,   70,  197,  567,   71,

       72,  194,   74,   74,   74,   74,   74,  195,  196,  198,
      567,  444,   74,  205,  199,   74,  567,  200,  201,  567,
      202,   74,  567,   74,  567,  567,   73,  197,  203,  567,
       74,  194,   74,   74,  204,   74,   74,  209,  567,  198,
       74,  567,   74,  205,  199,   74,  567,  200,  201,   74,
      202,   74,   74,  206,  567,  207,  567,  567,  203,  208,
       74,   74,  210,  567,  204,   74,   74,  209,   74,  212,
       74,   74,  211,   70,   74,   74,   71,   72,   74,   74,
       74,  214,   74,  206,  213,  207,  215,   74,   74,  208,
      567,   74,  210,  567,   74,   74,   74,   74,   74,  212,

      567,   74,  211,   74,   74,   74,   74,  217,   74,  216,
       74,  214,   74,   74,  213,   74,  215,   74,   74,  567,
       74,   74,   74,   74,   74,  219,  567,   74,  218,   74,
      567,  220,   74,   74,  567,  221,   74,  217,   74,  216,
      230,  567,   74,   74,  567,   74,  567,   74,  567,   74,
       74,   74,   74,   74,  567,  219,  567,  567,  218,   74,
       70,  220,   74,   71,   72,  221,  567,  567,   74,  231,
      230,  567,   74,   74,  567,  445,  567,   74,  222,   74,
      223,   74,   74,  224,   74,   74,  232,  567,  567,  233,
      225,  226,  235,  227,   74,   74,  228,  229,  567,  231,

       74,  567,   74,   74,   74,  567,  234,  237,  222,   74,
      223,   74,   74,  224,   74,   74,  232,  567,  567,  233,
      225,  226,  235,  227,   74,   74,  228,  229,  239,  236,
       74,  567,   74,   74,   74,   74,  234,  237,  238,   74,
       74,   74,   74,  241,   74,   74,   74,  567,  567,   74,
      567,  240,  243,  567,   74,   74,  242,   74,  239,  236,
       74,  567,   74,   74,  244,   74,   74,  567,  238,   74,
       74,   74,   74,  241,   74,   74,   74,  245,  246,   74,
       74,  240,  243,  567,   74,   74,  242,   74,  567,   74,
       74,   74,   74,  567,  244,  567,   74,  247,  248,   74,

       74,  251,   74,   74,   74,  567,  249,  245,  246,  567,
       74,   74,   74,   74,  254,  252,  567,  567,  250,   74,
       74,   74,   74,  567,  567,  253,  567,  247,  248,   74,
       74,  251,   74,   74,   74,  255,  249,   74,   74,  256,
      567,   74,   74,   74,  254,  252,   74,   74,  250,  257,
       74,  567,  567,   70,  567,  253,   71,   72,   70,   74,
      567,   71,   72,  148,  567,  255,  567,   74,   74,  256,
      567,   70,  567,  454,   71,   72,   74,   74,  455,  257,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,   61,  567,  150,  150,

      150,  150,  150,  150,  150,  150,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,   74,   74,   74,   74,   74,   74,   74,   74,
      567,   74,   74,   74,   74,   74,   74,   74,   74,  567,
      567,  258,  259,  261,   70,  567,  567,   71,   72,  260,
      567,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,  262,
      567,  258,  259,   74,   74,   74,   74,   74,  567,  260,
       74,   74,   74,   74,  263,   74,   74,   74,  264,   74,
       74,  567,  268,   74,  266,  265,   74,  567,  567,  262,

       74,  567,  269,   74,   74,   74,   74,   74,  279,   74,
       74,   74,   74,   74,  263,   74,   74,   74,  264,   74,
       74,  267,  268,   74,  266,  265,   74,   74,   74,   74,
       74,  270,  269,   74,  567,  567,   74,   74,   74,   74,
       74,   74,   74,   74,  272,  271,   74,  567,  567,   74,
       74,  267,   74,  567,  567,   74,  567,   74,   74,   74,
      567,  270,  567,   74,  567,  567,   74,   74,   74,  567,
       74,   74,   74,   74,  272,  271,   74,  567,   74,   74,
       74,  567,   74,  567,  567,   74,  273,   74,   74,  274,
       74,  280,  275,   74,  567,  567,  567,   74,   74,  276,

      281,   74,   74,  277,   74,  567,  278,  284,   74,  282,
       74,  567,  567,   74,  567,   74,  273,   74,   74,  274,
       74,  280,  275,   74,   74,  567,   74,   74,   74,  276,
      281,  283,   74,  277,   74,   74,  278,  284,  285,  282,
      567,  567,  567,   74,   74,   74,   70,  567,   70,   71,
       72,   71,   72,   74,   74,  567,   74,  290,   74,  567,
       70,  283,   74,  286,  287,   74,   70,   74,  285,   71,
       72,   74,  291,  567,   74,  288,  288,  288,  288,  288,
      288,  288,  288,   74,  567,   74,   74,  290,   74,  294,
       74,   74,   74,  292,   74,  293,   74,   74,   74,   74,

       74,   74,  291,   74,  295,   74,  567,   74,  567,  296,
      567,  567,   74,   74,  567,   74,   74,  288,   74,  294,
       74,   74,   74,  292,   74,  293,   74,   74,   74,   74,
       74,  297,  301,   74,  295,   74,  298,   74,   74,  296,
      300,  299,   74,   74,   74,   74,   74,   74,   74,   74,
      567,   74,   74,   74,   74,   74,   74,   74,   74,  302,
       74,  297,  567,   74,   74,   74,  298,  567,   74,  303,
      300,  299,   74,   74,   74,   74,   74,   74,  567,   74,
      304,   74,   74,   74,   74,   74,   74,   74,   74,  302,
       74,   74,  306,   74,   74,   74,   74,   74,  307,  303,

       74,  567,   74,   74,  305,   74,   74,  310,  567,   74,
      304,   74,   74,  567,   74,   74,   74,   74,  308,  567,
      311,   74,  306,  309,   74,   74,   74,   74,  307,   74,
       74,  567,  567,  567,  305,   74,   74,  310,   74,   74,
      312,   74,  313,   74,   74,   74,   74,   74,  308,  567,
      311,  567,   74,  309,   74,   74,   74,  567,   70,   74,
       70,   71,   72,   71,   72,  567,  567,  567,   74,  567,
      312,  567,  313,   74,  567,  456,  567,   74,  567,  567,
      457,   70,   74,  567,   71,   72,   74,  314,  314,  567,
      315,  314,  314,  316,  317,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  318,  318,  318,  318,  318,
      318,  318,  318,  314,  314,  314,  314,  314,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  314,  314,  314,  318,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  314,  314,  320,   74,  321,   74,   74,
      567,   74,   74,  324,   74,   74,  325,   74,   74,  322,
       74,   74,   74,   74,   74,  323,  567,  567,  567,  326,

      567,   74,  567,   74,  567,  320,   74,  321,   74,   74,
      567,   74,   74,  324,   74,   74,  325,   74,   74,  322,
       74,   74,   74,   74,   74,  323,  327,   74,   74,  326,
       74,   74,  328,   74,   74,   74,   74,   74,   74,   74,
      330,   74,   74,   74,  329,  332,  567,   74,  567,  567,
       74,  331,   74,  567,   74,  567,  327,   74,   74,  567,
       74,   74,  328,   74,   74,   74,   74,   74,   74,   74,
      330,   74,   74,   74,  329,  567,   74,   74,  333,   74,
       74,  331,   74,  567,   74,   74,  567,   74,   74,   74,
      567,   74,  334,   74,  335,  567,   74,  339,   74,  336,

      337,   74,  567,   74,   74,  340,   74,   74,  333,   74,
       74,  338,   74,   74,  567,   74,   74,   74,   74,   74,
      567,  341,  334,   74,  335,  567,   74,  339,   74,  336,
      337,   74,   74,   74,   74,  340,   74,   74,  342,   74,
       74,  338,   74,   74,  567,   74,   74,   74,   74,  347,
       74,  341,  343,   74,  344,  345,   74,  567,   74,   74,
      348,  346,   74,   74,  567,   74,   74,   74,  342,   74,
      349,  567,   74,  567,   74,   74,  567,   74,   74,  567,
       74,   74,  343,  567,  344,  345,   74,  567,   74,   74,
       74,  346,   74,   74,  351,   74,   74,   74,   74,   74,

      349,   74,   74,   74,   74,   74,  350,   74,   74,   74,
       74,   74,   74,  352,   74,  567,  353,  354,   74,   74,
       74,  567,   74,   74,  351,  355,   74,  567,   74,   74,
      567,   74,   74,   74,  567,   74,  350,   74,   74,   74,
       74,  357,   74,  352,   74,  567,  353,  354,   74,   74,
       74,  356,  358,   74,   74,  355,  567,   74,   74,   74,
      360,   74,   74,   74,  359,   74,   74,   74,   74,   74,
       74,  357,  567,  567,   74,  567,  361,   74,   74,  567,
       74,  356,  358,   74,   74,  567,  362,   74,   74,   74,
      360,   74,   74,   74,  359,   74,   74,   74,   74,   74,

       74,   74,  363,  364,   74,   74,  361,   74,   74,  365,
       74,   74,   74,   74,   74,   74,  362,   74,  567,  567,
       74,   74,   74,  567,   74,  567,   74,  567,  366,  567,
      567,   74,  363,  364,   70,   74,  567,   71,   72,  365,
       74,   74,   74,  567,   74,   74,   74,   74,  567,   70,
       74,   74,  286,  287,   74,   74,   74,  367,  366,  371,
      567,  567,  567,   74,  288,  288,  288,  288,  288,  288,
      288,  288,   74,   74,  368,  372,   74,   74,  369,   74,
      567,   74,   74,  374,  567,   74,   74,  367,   74,  371,
       74,  370,  373,   74,   70,  567,   70,   71,   72,  482,

      483,   74,   74,   74,  368,  372,  288,   74,  369,   74,
       74,   74,   74,  567,   74,   74,   74,   74,   74,  567,
       74,  370,  373,   74,   74,   74,   74,  567,  375,  383,
      376,   74,  567,   74,   74,   70,  567,  567,   71,   72,
       74,  567,   74,  567,   74,   74,  567,   74,   70,  567,
      458,   71,   72,   74,   74,   74,   74,  567,  375,  383,
      376,   74,  567,   74,   74,  377,  378,  379,  380,  381,
       74,  382,   74,   74,  567,  384,   74,   74,  387,  567,
       74,  385,   74,   74,  567,   74,   74,  386,  388,   74,
      567,   74,   74,  389,   70,  567,  567,   71,   72,  567,

       74,  567,  567,   74,  567,  384,   74,   74,  387,  459,
       74,  385,   74,   74,  567,   74,   74,  386,  388,   74,
      567,   70,   74,  389,   71,   72,  391,  392,  393,  394,
      395,   70,  396,  567,   71,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   74,   74,  397,  398,  567,   74,
      567,   74,   74,   74,   74,   74,  567,  567,   74,  400,
       74,   74,  567,   70,   74,   70,   71,   72,   71,   72,
      567,  567,  567,  567,   74,   74,  397,  398,   73,   74,
      460,   74,   74,   74,   74,   74,  567,  567,   74,  400,
       74,   74,  314,  314,   74,  315,  314,  314,  316,  317,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      399,  567,  567,  567,   74,   74,   74,  567,  314,  314,
      314,  314,  314,   74,   74,   74,  401,  402,   74,  567,
       74,  404,  405,   74,   74,  567,  406,   74,   74,   74,
      399,  403,   74,   74,   74,   74,   74,   74,  567,  314,
      314,  314,  567,   74,   74,   74,  401,  402,   74,  567,
       74,  404,  405,   74,   74,  567,  406,   74,   74,   74,
      567,  403,   74,   74,  407,   74,   74,   74,  314,  314,
      408,  567,  409,   74,   74,   74,  410,  412,  567,  413,
       74,   74,   74,   70,  567,  567,   71,   72,   74,   74,

       74,  411,  567,  567,  407,   74,   74,   74,  496,  567,
      408,  567,  409,   74,   74,   74,  410,   74,   74,  413,
       74,   74,   74,   74,  415,   74,   74,   74,   74,   74,
       74,  411,   74,   74,   74,  414,   74,   74,  416,  417,
      567,   74,   74,  567,  567,   74,  423,   74,   74,  418,
       74,   74,  567,   74,  415,   74,   74,   74,   74,  420,
       74,   74,   74,   74,   74,  414,   74,   74,  416,  417,
       74,   74,   74,  419,   74,   74,  421,   74,   74,  418,
       74,   74,  567,   74,  422,   74,   74,   74,   74,  420,
       74,   74,  567,   74,   74,  567,  424,   74,  567,  425,

       74,   74,   74,  419,   74,  567,  421,   74,   74,  428,
       74,  567,  567,   74,  422,   74,   74,   74,  567,  567,
      567,  567,  567,   74,   74,  567,  424,   74,  567,  425,
       70,   74,   74,   71,   72,  427,   74,  567,  567,  428,
       74,  567,  567,  567,   74,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,  429,   74,  567,  567,
       74,   74,  567,   74,   74,  427,   74,  430,  431,   74,
      432,   74,   74,  433,   74,  567,  567,  567,  567,   74,
       74,   74,  436,   74,   74,   74,  429,   73,   74,  567,
       74,   74,  567,   74,   74,   74,   74,  430,  431,   74,

      432,   74,   74,  433,   74,   74,   74,   74,  435,   74,
       74,   74,  434,   74,   74,   74,   74,  567,   74,   74,
       74,   74,   74,   74,  437,   74,   74,  567,   74,   74,
       74,   74,  567,  567,   74,   74,   74,   74,  435,  438,
       74,  567,  434,   74,   74,   74,   74,  567,   74,   74,
       74,   74,   74,   74,  437,   74,   74,   74,   74,   74,
       74,   74,  449,  448,   74,   74,   74,   74,  447,  438,
       74,   74,   74,   74,  567,  450,   74,  567,   74,  567,
       74,   74,   74,  567,  463,   74,   74,   74,  451,  567,
      567,  567,  449,  448,   74,   74,   74,   74,  447,  567,

       74,   74,   74,   74,   70,  450,   74,   71,   72,   74,
       74,   74,   74,  464,  463,  467,  567,  567,  451,  452,
      452,  452,  452,  452,  452,  452,  452,   74,   74,   74,
       74,  567,   74,  567,  462,  466,   74,   74,   74,   74,
      465,   74,  468,  464,   74,   74,   74,   74,  470,  567,
      567,   74,  469,   74,   74,   74,   74,   74,   74,   74,
       74,  452,   74,  567,  462,  466,   74,   74,   74,  567,
      465,   74,  468,  567,   74,   74,   74,   74,  470,   74,
      471,   74,  469,   74,   74,   74,   74,   74,   74,   74,
       74,  472,   74,   74,  473,  474,   74,  476,   74,   74,

      567,   74,   74,  475,   74,   74,   74,   74,   74,   74,
      471,   74,  567,   74,   74,  567,  478,   74,   74,   74,
       74,  472,   74,   74,  473,  474,   74,  476,   74,   74,
       74,   74,   74,  475,   74,   74,   74,   74,   74,   74,
      480,   74,   74,   74,   74,   74,  478,  477,  479,   74,
       74,   74,  481,   74,   74,   74,  567,  567,   74,  567,
       74,  567,   74,  567,   74,  567,  567,  567,  567,   74,
      480,  567,   74,  567,  567,   74,  567,  477,  479,   74,
      567,   74,  481,   74,   74,   74,   70,  486,   74,  482,
      483,   74,   74,  567,   74,   70,  567,  567,   71,   72,

       74,  484,  484,  484,  484,  484,  484,  484,  484,   74,
      499,  487,  488,  567,   74,  490,  567,  486,   74,   74,
      489,   74,   74,   74,  491,  493,   74,   74,   74,   74,
       74,   74,  492,  567,  567,   74,   74,   74,   74,   74,
      567,  487,  488,  484,   74,  490,  495,  567,   74,   74,
      489,   74,   74,   74,  491,  493,   74,   74,   74,   74,
       74,   74,  492,   74,   74,   74,   74,   74,   74,  494,
       74,   74,   74,   74,  567,   74,  495,  498,  567,   74,
       74,   74,  567,  497,   74,  567,  567,  567,  567,  567,
       74,  567,  567,   74,   74,  567,  567,  567,  567,  494,

       74,   74,   74,   74,  567,   74,  500,  498,   70,   74,
       74,   71,   72,  497,   74,   74,  567,  567,  504,  567,
      567,  567,   74,  452,  452,  452,  452,  452,  452,  452,
      452,   74,   74,   74,   74,  567,  500,  501,   74,   74,
      567,   74,   74,   74,  567,   74,   74,   74,   74,   74,
       74,  502,   74,  505,  567,   74,  567,  567,   74,   74,
      567,   74,   74,   74,   74,  452,  503,  501,   74,   74,
      567,   74,   74,   74,  567,  506,   74,   74,   74,   74,
       74,  502,  567,  505,   74,   74,  509,  567,   74,   74,
      507,   74,   74,   74,   74,  567,  503,   74,  508,  510,

       74,   74,   74,   74,  511,  506,   74,  567,  512,   74,
       74,  567,  567,  567,   74,  567,  509,   74,   74,   74,
      507,   74,   74,   74,   74,  567,  567,   74,  508,  510,
       74,   74,   74,   74,  511,   74,   74,  567,  512,   74,
       74,   74,   70,  513,   74,  482,  483,   74,   74,   74,
       74,  567,  567,  567,  567,  567,  567,  484,  484,  484,
      484,  484,  484,  484,  484,   74,   70,   74,   74,   71,
       72,   74,  567,  513,   74,  567,   74,   74,  515,  518,
       74,   73,   73,   73,   73,   73,   73,   73,   73,  567,
      516,   74,   74,  567,  567,   74,  567,   74,   74,  484,

       74,   74,   74,  567,   74,  567,   74,   74,  515,  567,
       74,   74,  567,  567,  517,   74,  519,   74,   74,   74,
      516,   74,   74,   73,   74,   74,   74,   74,   74,  520,
       74,   74,   74,  521,   74,  567,  567,   74,  567,  567,
       74,   74,  567,  567,  517,   74,  519,   74,   74,   74,
      522,   74,   74,  523,   74,   74,   74,   74,   74,  520,
       74,   74,   74,  521,   74,   74,  525,   74,  524,  526,
       74,   74,  567,  567,   74,   74,  528,  567,   74,   74,
      522,   74,   74,  523,   74,   74,  567,   74,  527,  567,
       74,   74,   74,   74,   74,   74,  525,  567,  524,  526,

       74,   74,   74,   74,   74,   74,  528,   74,   74,   74,
      530,  567,   74,  529,   74,  567,   74,   74,  527,   74,
      567,  567,  567,   74,  567,  567,  567,  567,   74,  567,
      567,  567,   74,   74,  533,   70,   74,   74,   71,   72,
      530,  567,   74,  529,  567,   74,   74,  567,  567,   74,
      531,  531,  531,  531,  531,  531,  531,  531,   74,   74,
      535,   74,  567,  536,  533,   74,   74,  537,   74,   74,
       74,   74,   74,  538,   74,   74,  539,  567,   74,   74,
       74,   74,  567,  540,  567,   74,  567,  567,   74,   74,
      535,   74,  531,  536,   74,   74,  541,  537,   74,   74,

       74,   74,   74,  538,   74,  567,  539,   74,   74,   74,
       74,   74,  543,  540,   74,   74,   74,  567,   74,   74,
      542,   74,   74,   74,   74,  544,  541,   74,   74,  567,
       74,   74,  567,  567,  545,  567,   74,   74,  567,  567,
      567,  567,  543,  567,   74,  567,   74,  567,  567,   74,
      542,   74,   74,   74,  567,  544,   74,   74,   74,   70,
       74,   74,   71,   72,  545,   74,   74,  567,  567,  567,
      567,  567,  546,   74,  531,  531,  531,  531,  531,  531,
      531,  531,   74,  550,  551,   74,   74,   74,   74,   74,
      554,  567,   74,   74,   74,   74,   74,   74,   74,  553,

      552,   74,  546,   74,  567,  567,  567,  567,  567,  567,
      567,  567,   74,  550,  551,   74,  531,   74,   74,   74,
      554,  567,   74,   74,   74,   74,   74,   74,   74,  553,
      552,   74,   74,   74,   74,   74,  559,  567,   74,  560,
       74,   74,   74,   74,   74,   74,  555,   74,   74,   74,
       74,  561,   74,  567,   74,   74,  563,   74,   74,   74,
      567,  567,   74,   74,   74,   74,  559,   74,   74,  560,
       74,   74,   74,   74,   74,   74,  555,   74,   74,   74,
       74,  561,   74,   74,   74,  562,  563,   74,   74,   74,
      567,   74,   74,   74,   74,   74,  564,   74,  567,  565,

       74,   74,   74,   74,   74,  566,  567,   74,  567,  567,
       74,  567,  567,   74,  567,  562,   74,  567,  567,  567,
      567,   74,   74,   74,   74,   74,  564,  567,  567,  565,
       74,   74,   74,   74,   74,  566,  567,   74,  567,  567,
       74,  567,  567,  567,  567,  567,   74,   53,   53,   53,
       53,   53,   53,   56,   56,   74,   74,   74,   74,  151,
      151,  151,  151,  151,  151,  154,  154,   73,   73,   73,
       73,  192,  192,  192,  192,  289,  289,  289,  289,  288,
      288,  288,  288,  390,  390,  390,  390,  314,  567,  314,
      314,  314,  314,  318,  567,  318,  318,  318,  318,  426,

      426,  426,  426,  453,  453,  453,  453,  485,  485,  485,
      485,  452,  452,  452,  452,  484,  484,  484,  484,  514,
      514,  514,  514,  532,  532,  532,  532,  531,  531,  531,
      531,  547,  547,  547,  547,  547,  547,  556,  556,  556,
      556,  556,  556,    3,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567
    } ;

static const flex_int16_t yy_chk[3933] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    6,
        7,   19,   51,   19,   19,   19,   19,   19,   19,   19,

       19,   20,   22,   22,   22,    2,    2,    2,    2,    2,
        2,    2,    2,    6,   17,   17,   17,   17,   17,   17,
       17,   17,   24,   24,   32,   20,   23,  518,   49,   31,
      518,   17,   52,   32,   31,   53,   21,   31,   31,   73,
       31,   18,   73,   73,    7,   49,   49,   49,   49,   49,
       49,   49,   49,  151,   32,   55,   52,   55,  152,   31,
       13,   17,   25,   32,   31,   25,   25,   31,   31,    5,
       31,    3,    0,  153,    0,  153,  534,   25,   25,   25,
       25,   25,   25,   25,   25,   33,   33,  547,  556,   53,
       28,   25,   25,   33,   28,   33,   28,   42,   28,    0,

        0,    0,    0,   25,   42,   28,   42,  151,   25,   25,
      288,   55,  152,  288,  288,   33,   33,    0,    0,   25,
       28,   25,   25,   33,   28,   33,   28,   42,   28,  153,
      534,    0,    0,   25,   42,   28,   42,  557,   25,   25,
       26,  547,  556,   26,   26,   50,    0,   50,   50,   50,
       50,   50,   50,   50,   50,   26,   26,   26,   26,   26,
       26,   26,   26,   35,    0,   35,   34,    0,   34,    0,
       34,   35,   35,   74,   26,   34,   34,   34,   36,  549,
       36,  549,   74,   26,    0,   44,   44,   44,   36,   36,
      558,  557,  558,   35,   44,   35,   34,   26,   34,    0,

       34,   35,   35,   74,   26,   34,   34,   34,   36,    0,
       36,    0,   74,   26,   27,   44,   44,   44,   36,   36,
       27,   27,   27,  382,   44,   27,  382,  382,   27,   27,
        0,   27,    0,   43,    0,  549,   38,   43,   38,   43,
        0,   38,    0,  382,   27,   38,  558,   38,   43,    0,
       27,   27,   27,  440,    0,   27,  440,  440,   27,   27,
        0,   27,   29,   43,    0,   29,   38,   43,   38,   43,
       29,   38,   29,   29,   29,   38,  396,   38,   43,  396,
      396,    0,   29,    0,   58,   58,   58,   58,   58,   58,
       58,   58,   29,    0,  377,   29,  396,  377,  377,    0,

       29,   58,   29,   29,   29,    0,    0,  379,    0,  377,
      379,  379,   29,   30,  377,    0,   79,    0,    0,   30,
        0,   30,  379,   79,   30,   79,   30,   30,   30,    0,
       59,   58,   59,    0,    0,   59,   59,   59,   59,   59,
       59,   59,   59,   30,  441,    0,   79,  441,  441,   30,
        0,   30,   81,   79,   30,   79,   30,   30,   30,   37,
       75,   81,    0,   37,   37,    0,   81,    0,   77,   75,
       39,   77,   75,   37,   39,   37,   37,   37,   39,   88,
       77,   39,   81,   39,   39,    0,   91,    0,   88,   37,
       75,   81,   88,   37,   37,   91,   81,    0,   77,   75,

       39,   77,   75,   37,   39,   37,   37,   37,   39,   88,
       77,   39,    0,   39,   39,   40,   91,    0,   88,   40,
       40,   40,   88,    0,    0,   91,    0,   40,   40,   40,
        0,    0,   40,    0,   76,   61,   61,   61,   61,   61,
       61,   61,   61,   76,  442,   40,   76,  442,  442,   40,
       40,   40,   61,    0,   80,    0,   80,   40,   40,   40,
       95,    0,   40,   41,   76,   80,   82,   41,   78,   95,
       41,   41,   78,   76,   41,   82,   76,   41,   82,   78,
       41,   78,   61,    0,   80,  443,   80,   41,  443,  443,
       95,    0,    0,   41,    0,   80,   82,   41,   78,   95,

       41,   41,   78,   83,   41,   82,    0,   41,   82,   78,
       41,   78,   83,    0,   83,    0,   62,   41,   62,   62,
       62,   62,   62,   62,   62,   62,   84,   86,    0,    0,
        0,    0,   86,   83,    0,   84,   86,   84,   85,   86,
       85,   87,   83,   87,   83,   90,   85,   85,   89,   89,
       85,   90,   87,    0,   90,    0,   84,   86,   89,    0,
       90,    0,   86,    0,    0,   84,   86,   84,   85,   86,
       85,   87,    0,   87,    0,   90,   85,   85,   89,   89,
       85,   90,   87,    0,   90,    0,   92,    0,   89,   93,
       90,   92,   93,   94,   94,   92,    0,    0,   92,    0,

       96,   93,  104,   94,   96,   94,    0,    0,    0,   96,
        0,  104,    0,   96,    0,    0,   92,    0,   98,   93,
       98,   92,   93,   94,   94,   92,   98,   98,   92,    0,
       96,   93,  104,   94,   96,   94,    0,  108,   97,   96,
       97,  104,    0,   96,    0,   97,  108,    0,   98,   97,
       98,  378,    0,  100,  378,  378,   98,   98,    0,    0,
        0,    0,  100,    0,  100,  102,  378,  108,   97,   99,
       97,  378,   99,   99,  102,   97,  108,  102,  102,   97,
        0,    0,    0,  100,   99,   99,   99,   99,   99,   99,
       99,   99,  100,  101,  100,  102,  380,  103,    0,  380,

      380,  101,  101,  103,  102,  105,  107,  102,  102,  105,
        0,  380,  103,  107,  105,  107,    0,  105,  105,    0,
      106,  106,    0,  101,    0,    0,   99,  103,  106,    0,
      106,  101,  101,  103,  106,  105,  107,  110,    0,  105,
      110,    0,  103,  107,  105,  107,    0,  105,  105,  110,
      106,  106,  112,  109,    0,  109,    0,    0,  106,  109,
      106,  112,  111,    0,  106,  111,  115,  110,  109,  112,
      110,  113,  111,  444,  111,  115,  444,  444,  114,  110,
      113,  114,  112,  109,  113,  109,  116,  114,  116,  109,
        0,  112,  111,    0,  117,  111,  115,  116,  109,  112,

        0,  113,  111,  117,  111,  115,  119,  119,  114,  118,
      113,  114,  120,  118,  113,  119,  116,  114,  116,    0,
      121,  120,  118,  122,  117,  122,    0,  116,  121,  121,
        0,  122,  122,  117,    0,  123,  119,  119,  123,  118,
      125,    0,  120,  118,    0,  119,    0,  123,    0,  125,
      121,  120,  118,  122,    0,  122,    0,    0,  121,  121,
      381,  122,  122,  381,  381,  123,    0,    0,  123,  126,
      125,    0,  126,  127,    0,  381,    0,  123,  124,  125,
      124,  126,  127,  124,  124,  129,  127,    0,    0,  128,
      124,  124,  129,  124,  129,  128,  124,  124,    0,  126,

      131,    0,  126,  127,  128,    0,  128,  131,  124,  131,
      124,  126,  127,  124,  124,  129,  127,    0,    0,  128,
      124,  124,  129,  124,  129,  128,  124,  124,  133,  130,
      131,    0,  133,  132,  128,  130,  128,  131,  132,  131,
      134,  133,  132,  135,  130,  135,  140,    0,    0,  134,
        0,  134,  136,    0,  135,  140,  135,  136,  133,  130,
      137,    0,  133,  132,  136,  130,  136,    0,  132,  137,
      134,  133,  132,  135,  130,  135,  140,  137,  138,  134,
      138,  134,  136,    0,  135,  140,  135,  136,    0,  138,
      137,  139,  142,    0,  136,    0,  136,  139,  141,  137,

      139,  142,  143,  145,  141,    0,  141,  137,  138,    0,
      138,  143,  145,  141,  145,  143,    0,    0,  141,  138,
      144,  139,  142,    0,    0,  144,    0,  139,  141,  144,
      139,  142,  143,  145,  141,  146,  141,  146,  147,  146,
        0,  143,  145,  141,  145,  143,  146,  147,  141,  147,
      144,    0,    0,  445,    0,  144,  445,  445,  391,  144,
        0,  391,  391,  148,    0,  146,    0,  146,  147,  146,
        0,  446,    0,  391,  446,  446,  146,  147,  391,  147,
      148,  148,  148,  148,  148,  148,  148,  148,  149,  149,
      149,  149,  149,  149,  149,  149,  150,    0,  150,  150,

      150,  150,  150,  150,  150,  150,  155,  155,  155,  155,
      155,  155,  155,  155,  156,  156,  156,  156,  156,  156,
      156,  156,  157,  158,  159,  160,  161,  162,  163,  164,
        0,  157,  158,  159,  160,  161,  162,  163,  164,    0,
        0,  163,  164,  166,  452,    0,    0,  452,  452,  165,
        0,  165,  157,  158,  159,  160,  161,  162,  163,  164,
      165,  157,  158,  159,  160,  161,  162,  163,  164,  167,
        0,  163,  164,  167,  166,  168,  169,  170,    0,  165,
      172,  165,  167,  166,  168,  169,  170,  171,  169,  172,
      165,    0,  175,  175,  173,  171,  171,    0,    0,  167,

      173,    0,  175,  167,  166,  168,  169,  170,  183,  173,
      172,  176,  167,  166,  168,  169,  170,  171,  169,  172,
      176,  174,  175,  175,  173,  171,  171,  174,  177,  178,
      173,  179,  175,  179,    0,    0,  174,  177,  178,  173,
      183,  176,  179,  180,  181,  180,  181,    0,    0,  183,
      176,  174,  180,    0,    0,  181,    0,  174,  177,  178,
        0,  179,    0,  179,    0,    0,  174,  177,  178,    0,
      183,  184,  179,  180,  181,  180,  181,    0,  185,  183,
      184,    0,  180,    0,    0,  181,  182,  185,  187,  182,
      182,  186,  182,  186,    0,    0,    0,  187,  190,  182,

      187,  184,  186,  182,  188,    0,  182,  190,  185,  188,
      184,    0,    0,  188,    0,  193,  182,  185,  187,  182,
      182,  186,  182,  186,  193,    0,  189,  187,  190,  182,
      187,  189,  186,  182,  188,  189,  182,  190,  191,  188,
        0,    0,    0,  188,  191,  193,  455,    0,  456,  455,
      455,  456,  456,  191,  193,    0,  189,  194,  195,    0,
      192,  189,  194,  192,  192,  189,  457,  195,  191,  457,
      457,  194,  195,    0,  191,  192,  192,  192,  192,  192,
      192,  192,  192,  191,    0,  196,  197,  194,  195,  198,
      199,  198,  194,  196,  196,  197,  200,  195,  201,  199,

      198,  194,  195,  203,  199,  200,    0,  201,    0,  200,
        0,    0,  203,  204,    0,  196,  197,  192,  202,  198,
      199,  198,  204,  196,  196,  197,  200,  202,  201,  199,
      198,  202,  209,  203,  199,  200,  205,  201,  205,  200,
      207,  206,  203,  204,  206,  208,  207,  205,  202,  210,
        0,  211,  204,  206,  208,  207,  212,  202,  210,  211,
      211,  202,    0,  209,  213,  212,  205,    0,  205,  212,
      207,  206,  209,  213,  206,  208,  207,  205,    0,  210,
      214,  211,  214,  206,  208,  207,  212,  216,  210,  211,
      211,  214,  216,  209,  213,  212,  216,  215,  217,  212,

      217,    0,  209,  213,  215,  218,  215,  220,    0,  217,
      214,  220,  214,    0,  218,  221,  219,  216,  218,    0,
      220,  214,  216,  219,  221,  219,  216,  215,  217,  223,
      217,    0,    0,    0,  215,  218,  215,  220,  223,  217,
      222,  220,  223,  222,  218,  221,  219,  224,  218,    0,
      220,    0,  222,  219,  221,  219,  224,    0,  458,  223,
      392,  458,  458,  392,  392,    0,    0,    0,  223,    0,
      222,    0,  223,  222,    0,  392,    0,  224,    0,    0,
      392,  459,  222,    0,  459,  459,  224,  225,  225,    0,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  226,  228,  227,  226,  227,
        0,  229,  230,  230,  231,  228,  232,  226,  227,  228,
      229,  230,  232,  231,  233,  229,    0,    0,    0,  233,

        0,  232,    0,  233,    0,  226,  228,  227,  226,  227,
        0,  229,  230,  230,  231,  228,  232,  226,  227,  228,
      229,  230,  232,  231,  233,  229,  234,  235,  234,  233,
      237,  232,  236,  233,  239,  236,  235,  234,  238,  237,
      238,  240,  241,  239,  236,  242,    0,  238,    0,    0,
      240,  241,  243,    0,  244,    0,  234,  235,  234,    0,
      237,  243,  236,  244,  239,  236,  235,  234,  238,  237,
      238,  240,  241,  239,  236,    0,  242,  238,  242,  245,
      240,  241,  243,    0,  244,  242,    0,  246,  245,  253,
        0,  243,  245,  244,  246,    0,  246,  249,  253,  247,

      248,  247,    0,  249,  248,  250,  242,  250,  242,  245,
      247,  248,  249,  248,    0,  242,  250,  246,  245,  253,
        0,  251,  245,  251,  246,    0,  246,  249,  253,  247,
      248,  247,  251,  249,  248,  250,  252,  250,  252,  254,
      247,  248,  249,  248,    0,  252,  250,  255,  254,  258,
      256,  251,  254,  251,  255,  256,  255,    0,  260,  256,
      259,  257,  251,  257,    0,  262,  252,  260,  252,  254,
      262,    0,  257,    0,  262,  252,    0,  255,  254,    0,
      256,  258,  254,    0,  255,  256,  255,    0,  260,  256,
      258,  257,  259,  257,  264,  262,  264,  260,  263,  265,

      262,  259,  257,  266,  262,  264,  263,  263,  265,  267,
      268,  258,  266,  265,  269,    0,  266,  268,  267,  268,
      258,    0,  259,  269,  264,  269,  264,    0,  263,  265,
        0,  259,  271,  266,    0,  264,  263,  263,  265,  267,
      268,  271,  266,  265,  269,    0,  266,  268,  267,  268,
      272,  270,  273,  269,  270,  269,    0,  274,  273,  272,
      275,  275,  271,  270,  274,  276,  274,  273,  277,  280,
      275,  271,    0,    0,  276,    0,  276,  277,  280,    0,
      272,  270,  273,  283,  270,    0,  277,  274,  273,  272,
      275,  275,  283,  270,  274,  276,  274,  273,  277,  280,

      275,  278,  278,  281,  276,  281,  276,  277,  280,  282,
      278,  284,  282,  283,  281,  285,  277,  292,    0,    0,
      284,  282,  283,    0,  285,    0,  292,    0,  285,    0,
        0,  278,  278,  281,  460,  281,    0,  460,  460,  282,
      278,  284,  282,    0,  281,  285,  295,  292,    0,  289,
      284,  282,  289,  289,  285,  295,  292,  290,  285,  295,
        0,    0,    0,  290,  289,  289,  289,  289,  289,  289,
      289,  289,  290,  294,  291,  296,  295,  293,  293,  291,
        0,  296,  294,  297,    0,  295,  293,  290,  291,  295,
      296,  294,  296,  290,  461,    0,  484,  461,  461,  484,

      484,  298,  290,  294,  291,  296,  289,  293,  293,  291,
      298,  296,  294,    0,  297,  299,  293,  303,  291,    0,
      296,  294,  296,  297,  299,  300,  303,    0,  299,  304,
      300,  298,    0,  304,  300,  393,    0,    0,  393,  393,
      298,    0,  304,    0,  297,  299,    0,  303,  496,    0,
      393,  496,  496,  297,  299,  300,  303,    0,  299,  304,
      300,  308,    0,  304,  300,  302,  302,  302,  302,  302,
      308,  302,  304,  305,    0,  305,  306,  307,  306,    0,
      309,  305,  305,  302,    0,  306,  307,  305,  307,  309,
        0,  308,  302,  309,  394,    0,    0,  394,  394,    0,

      308,    0,    0,  305,    0,  305,  306,  307,  306,  394,
      309,  305,  305,  302,    0,  306,  307,  305,  307,  309,
        0,  310,  302,  309,  310,  310,  311,  311,  311,  311,
      311,  499,  311,    0,  499,  499,  310,  310,  310,  310,
      310,  310,  310,  310,  311,  312,  313,  320,    0,  320,
        0,  322,  313,  311,  312,  331,    0,    0,  320,  322,
      322,  313,    0,  531,  331,  395,  531,  531,  395,  395,
        0,    0,    0,    0,  311,  312,  313,  320,  310,  320,
      395,  322,  313,  311,  312,  331,    0,    0,  320,  322,
      322,  313,  318,  318,  331,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      321,    0,    0,    0,  324,  323,  321,    0,  318,  318,
      318,  318,  318,  324,  323,  321,  323,  324,  325,    0,
      335,  326,  327,  326,  327,    0,  328,  325,  328,  335,
      321,  325,  326,  327,  324,  323,  321,  328,    0,  318,
      318,  318,    0,  324,  323,  321,  323,  324,  325,    0,
      335,  326,  327,  326,  327,    0,  328,  325,  328,  335,
        0,  325,  326,  327,  329,  333,  329,  328,  318,  318,
      330,    0,  333,  330,  333,  329,  334,  336,    0,  337,
      334,  337,  330,  439,    0,    0,  439,  439,  340,  334,

      337,  334,    0,    0,  329,  333,  329,  340,  439,    0,
      330,    0,  333,  330,  333,  329,  334,  339,  336,  337,
      334,  337,  330,  338,  339,  341,  339,  336,  340,  334,
      337,  334,  338,  342,  341,  338,  344,  340,  342,  343,
        0,  343,  342,    0,    0,  344,  351,  339,  336,  345,
      343,  345,    0,  338,  339,  341,  339,  336,  359,  349,
      345,  349,  338,  342,  341,  338,  344,  359,  342,  343,
      349,  343,  342,  346,  346,  344,  350,  350,  351,  345,
      343,  345,    0,  346,  350,  352,  350,  351,  359,  349,
      345,  349,    0,  356,  352,    0,  352,  359,    0,  353,

      349,  353,  356,  346,  346,    0,  350,  350,  351,  356,
      353,    0,    0,  346,  350,  352,  350,  351,    0,    0,
        0,    0,    0,  356,  352,    0,  352,  355,    0,  353,
      354,  353,  356,  354,  354,  355,  355,    0,    0,  356,
      353,    0,    0,    0,  357,  354,  354,  354,  354,  354,
      354,  354,  354,  357,  360,  358,  357,  355,    0,    0,
      361,  362,    0,  360,  358,  355,  355,  358,  361,  361,
      362,  363,  364,  363,  357,    0,    0,    0,    0,  365,
      363,  364,  370,  357,  360,  358,  357,  354,  365,    0,
      361,  362,    0,  360,  358,  366,  368,  358,  361,  361,

      362,  363,  364,  363,  366,  368,  369,  367,  369,  365,
      363,  364,  367,  370,  371,  369,  367,    0,  365,  372,
      373,  375,  370,  371,  372,  366,  368,    0,  372,  373,
      375,  376,    0,    0,  366,  368,  369,  367,  369,  375,
      376,    0,  367,  370,  371,  369,  367,    0,  385,  372,
      373,  375,  370,  371,  372,  383,  384,  385,  372,  373,
      375,  376,  385,  384,  383,  384,  386,  387,  383,  375,
      376,  389,  388,  398,    0,  386,  387,    0,  385,    0,
      389,  388,  398,    0,  398,  383,  384,  385,  388,    0,
        0,    0,  385,  384,  383,  384,  386,  387,  383,    0,

      399,  389,  388,  398,  390,  386,  387,  390,  390,  399,
      389,  388,  398,  399,  398,  402,    0,    0,  388,  390,
      390,  390,  390,  390,  390,  390,  390,  397,  401,  400,
      399,    0,  404,    0,  397,  401,  397,  401,  400,  399,
      400,  404,  403,  399,  403,  405,  402,  407,  406,    0,
        0,  406,  405,  403,  405,  402,  407,  397,  401,  400,
      406,  390,  404,    0,  397,  401,  397,  401,  400,    0,
      400,  404,  403,    0,  403,  405,  402,  407,  406,  408,
      409,  406,  405,  403,  405,  402,  407,  413,  408,  409,
      406,  410,  411,  410,  411,  413,  413,  415,  414,  416,

        0,  411,  410,  414,  418,  419,  415,  414,  416,  408,
      409,  420,    0,  418,  419,    0,  419,  413,  408,  409,
      420,  410,  411,  410,  411,  413,  413,  415,  414,  416,
      417,  411,  410,  414,  418,  419,  415,  414,  416,  417,
      424,  420,  422,  418,  419,  424,  419,  417,  421,  421,
      420,  422,  425,  425,  424,  434,    0,    0,  421,    0,
      417,    0,  425,    0,  434,    0,    0,    0,    0,  417,
      424,    0,  422,    0,    0,  424,    0,  417,  421,  421,
        0,  422,  425,  425,  424,  434,  426,  427,  421,  426,
      426,  427,  425,    0,  434,  454,    0,    0,  454,  454,

      427,  426,  426,  426,  426,  426,  426,  426,  426,  428,
      454,  428,  429,    0,  429,  431,    0,  427,  428,  431,
      430,  427,  430,  429,  432,  435,  432,  433,  431,  435,
      427,  430,  433,    0,    0,  432,  433,  438,  435,  428,
        0,  428,  429,  426,  429,  431,  438,    0,  428,  431,
      430,  447,  430,  429,  432,  435,  432,  433,  431,  435,
      447,  430,  433,  448,  437,  432,  433,  438,  435,  437,
      449,  450,  448,  437,    0,  451,  438,  451,    0,  449,
      450,  447,    0,  449,  451,    0,    0,    0,    0,    0,
      447,    0,    0,  448,  437,    0,    0,    0,    0,  437,

      449,  450,  448,  437,    0,  451,  462,  451,  453,  449,
      450,  453,  453,  449,  451,  462,    0,    0,  471,    0,
        0,    0,  463,  453,  453,  453,  453,  453,  453,  453,
      453,  463,  464,  466,  468,    0,  462,  465,  470,  465,
        0,  464,  466,  468,    0,  462,  472,  470,  465,  471,
      469,  469,  463,  472,    0,  472,    0,    0,  471,  469,
        0,  463,  464,  466,  468,  453,  469,  465,  470,  465,
        0,  464,  466,  468,    0,  473,  472,  470,  465,  471,
      469,  469,    0,  472,  473,  472,  475,    0,  471,  469,
      474,  474,  475,  477,  476,    0,  469,  479,  474,  476,

      474,  475,  477,  476,  478,  473,  479,    0,  480,  488,
      478,    0,    0,    0,  473,    0,  475,  480,  488,  478,
      474,  474,  475,  477,  476,    0,    0,  479,  474,  476,
      474,  475,  477,  476,  478,  481,  479,    0,  480,  488,
      478,  489,  485,  481,  481,  485,  485,  480,  488,  478,
      489,    0,    0,    0,    0,    0,    0,  485,  485,  485,
      485,  485,  485,  485,  485,  481,  486,  487,  490,  486,
      486,  489,    0,  481,  481,    0,  487,  490,  487,  494,
      489,  486,  486,  486,  486,  486,  486,  486,  486,    0,
      492,  491,  492,    0,    0,  497,    0,  487,  490,  485,

      491,  492,  493,    0,  497,    0,  487,  490,  487,    0,
      501,  493,    0,    0,  493,  494,  495,  498,  495,  501,
      492,  491,  492,  486,  494,  497,  498,  495,  500,  498,
      491,  492,  493,  500,  497,    0,    0,  500,    0,    0,
      501,  493,    0,    0,  493,  494,  495,  498,  495,  501,
      502,  503,  502,  503,  494,  505,  498,  495,  500,  498,
      503,  502,  508,  500,  505,  506,  506,  500,  505,  507,
      507,  508,    0,    0,  506,  509,  510,    0,  510,  507,
      502,  503,  502,  503,  509,  505,    0,  510,  509,    0,
      503,  502,  508,  512,  505,  506,  506,    0,  505,  507,

      507,  508,  512,  513,  506,  509,  510,  511,  510,  507,
      513,    0,  513,  511,  509,    0,  511,  510,  509,  516,
        0,    0,    0,  512,    0,    0,    0,    0,  516,    0,
        0,    0,  512,  513,  515,  514,  515,  511,  514,  514,
      513,    0,  513,  511,    0,  515,  511,    0,    0,  516,
      514,  514,  514,  514,  514,  514,  514,  514,  516,  517,
      519,  519,    0,  520,  515,  520,  515,  521,  517,  521,
      519,  522,  526,  522,  520,  515,  523,    0,  521,  523,
      522,  526,    0,  524,    0,  524,    0,    0,  523,  517,
      519,  519,  514,  520,  524,  520,  524,  521,  517,  521,

      519,  522,  526,  522,  520,    0,  523,  525,  521,  523,
      522,  526,  527,  524,  527,  524,  525,    0,  523,  528,
      525,  530,  536,  527,  524,  529,  524,  529,  528,    0,
      530,  536,    0,    0,  530,    0,  529,  525,    0,    0,
        0,    0,  527,    0,  527,    0,  525,    0,    0,  528,
      525,  530,  536,  527,    0,  529,  537,  529,  528,  532,
      530,  536,  532,  532,  530,  537,  529,    0,    0,    0,
        0,    0,  533,  533,  532,  532,  532,  532,  532,  532,
      532,  532,  533,  535,  538,  542,  537,  539,  540,  535,
      541,    0,  541,  538,  542,  537,  539,  540,  535,  540,

      539,  541,  533,  533,    0,    0,    0,    0,    0,    0,
        0,    0,  533,  535,  538,  542,  532,  539,  540,  535,
      541,    0,  541,  538,  542,  543,  539,  540,  535,  540,
      539,  541,  544,  545,  543,  546,  550,    0,  551,  551,
      550,  544,  545,  553,  546,  554,  546,  551,  561,  550,
      552,  552,  553,    0,  554,  543,  559,  561,  559,  552,
        0,    0,  544,  545,  543,  546,  550,  559,  551,  551,
      550,  544,  545,  553,  546,  554,  546,  551,  561,  550,
      552,  552,  553,  560,  554,  555,  559,  561,  559,  552,
        0,  555,  560,  562,  563,  564,  560,  559,    0,  562,

      555,  566,  562,  563,  564,  565,    0,  565,    0,    0,
      566,    0,    0,  560,    0,  555,  565,    0,    0,    0,
        0,  555,  560,  562,  563,  564,  560,    0,    0,  562,
      555,  566,  562,  563,  564,  565,    0,  565,    0,    0,
      566,    0,    0,    0,    0,    0,  565,  568,  568,  568,
      568,  568,  568,  569,  569,  570,  570,  570,  570,  571,
      571,  571,  571,  571,  571,  572,  572,  573,  573,  573,
      573,  574,  574,  574,  574,  575,  575,  575,  575,  576,
      576,  576,  576,  577,  577,  577,  577,  578,    0,  578,
      578,  578,  578,  579,    0,  579,  579,  579,  579,  580,

      580,  580,  580,  581,  581,  581,  581,  582,  582,  582,
      582,  583,  583,  583,  583,  584,  584,  584,  584,  585,
      585,  585,  585,  586,  586,  586,  586,  587,  587,  587,
      587,  588,  588,  588,  588,  588,  588,  589,  589,  589,
      589,  589,  589,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[192] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#line 6 "scanner.l"
#pragma warning(disable : 4996) //_CRT_SECURE_NO_WARNINGS
#define _GLIBCXX_USE_C99 1
#include <iostream>
#include <fstream>
#include <string>
#include <unordered_set>
#include <stack>
#include <map>
#include "parser.hpp"
using namespace std;
int yyfileno = 0;
extern int yylex();
extern int statement;
std::string file;
#if defined(__unix__) || defined(RISCOS)
#else
#define strdup _strdup
#endif
std::unordered_set<std::string> included_files;
std::map<std::string, int> files_index;
std::stack<std::string> file_stack;
std::stack<int> yylineno_stack;
#line 1631 "scanner.cpp"
#line 1632 "scanner.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 56 "scanner.l"


#line 1852 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 568 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3844 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "scanner.l"
/* skip comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "scanner.l"
/* skip blanks and tabs */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "scanner.l"
return TERM;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "scanner.l"
return INTEGERDIVIDE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "scanner.l"
return E;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "scanner.l"
return LE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "scanner.l"
return GE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "scanner.l"
return NE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "scanner.l"
return SHL;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "scanner.l"
return SHR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "scanner.l"
return DOUBLESEMI;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "scanner.l"
return RETURNVALUE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "scanner.l"
return BGET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "scanner.l"
return BPUT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "scanner.l"
return CASE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "scanner.l"
return CLOSE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "scanner.l"
return DATA;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "scanner.l"
return DEFINE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "scanner.l"
return DIM;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "scanner.l"
return ELSE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "scanner.l"
return END;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "scanner.l"
return END_CASE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "scanner.l"
return END_IF;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "scanner.l"
return END_FUNCTION;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "scanner.l"
return END_PROCEDURE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "scanner.l"
return END_TYPE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "scanner.l"
return END_WHILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "scanner.l"
return EOFH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "scanner.l"
return FIELD;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "scanner.l"
return FUNCTION;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "scanner.l"
return FOR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "scanner.l"
return GLOBAL;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "scanner.l"
return GOSUB;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "scanner.l"
return GOTO;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "scanner.l"
return INKEY;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "scanner.l"
return INKEYS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "scanner.l"
return INPUT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "scanner.l"
return GLOBAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "scanner.l"
return IF;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "scanner.l"
return LOCAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "scanner.l"
return NEXT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "scanner.l"
return OF;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "scanner.l"
return OPENIN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "scanner.l"
return OPENOUT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "scanner.l"
return OPENUP;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "scanner.l"
return OTHERWISE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "scanner.l"
return PRINT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "scanner.l"
return READ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "scanner.l"
return REF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "scanner.l"
return REPEAT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "scanner.l"
return RESTORE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "scanner.l"
return RND;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "scanner.l"
return OSCLI;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "scanner.l"
return RETURN;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "scanner.l"
return SPC;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "scanner.l"
return STEP;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "scanner.l"
return TAB;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "scanner.l"
return THEN;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "scanner.l"
return TO;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "scanner.l"
return TIME;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "scanner.l"
return TIMES;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "scanner.l"
return TRACEON;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "scanner.l"
return TRACEOFF;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "scanner.l"
return TYPE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "scanner.l"
return UNTIL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "scanner.l"
return WHEN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "scanner.l"
return WHILE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "scanner.l"
return CIRCLE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "scanner.l"
return CLS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "scanner.l"
return CLIP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "scanner.l"
return CLIPOFF;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "scanner.l"
return COLOUR;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "scanner.l"
return COLOURBG;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "scanner.l"
return ELLIPSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "scanner.l"
return FILL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "scanner.l"
return FLIP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "scanner.l"
return GRAPHICS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "scanner.l"
return LINE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "scanner.l"
return RECTANGLE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "scanner.l"
return PLOT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "scanner.l"
return SHADED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "scanner.l"
return TEXT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "scanner.l"
return TEXTRIGHT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "scanner.l"
return TEXTCENTRE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "scanner.l"
return TEXTCENTRE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "scanner.l"
return LOADTYPEFACE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "scanner.l"
return CREATEFONT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "scanner.l"
return MONO10;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "scanner.l"
return MONO15;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "scanner.l"
return MONO20;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "scanner.l"
return MONO25;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "scanner.l"
return MONO30;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "scanner.l"
return MONO40;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 152 "scanner.l"
return MONO50;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "scanner.l"
return MONO75;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "scanner.l"
return MONO100;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 155 "scanner.l"
return PROP10;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 156 "scanner.l"
return PROP15;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "scanner.l"
return PROP20;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 158 "scanner.l"
return PROP25;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 159 "scanner.l"
return PROP30;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 160 "scanner.l"
return PROP40;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 161 "scanner.l"
return PROP50;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 162 "scanner.l"
return PROP75;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 163 "scanner.l"
return PROP100;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 164 "scanner.l"
return TRIANGLE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 165 "scanner.l"
return SCREENWIDTH;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 166 "scanner.l"
return SCREENHEIGHT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "scanner.l"
return PI3D_CREATEVERTEX;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "scanner.l"
return PI3D_CREATETRIANGLE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "scanner.l"
return PI3D_CREATESHAPE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "scanner.l"
return PI3D_RENDERFRAME;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "scanner.l"
return PI3D_CREATEOBJECT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "scanner.l"
return PI3D_TRANSLATE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "scanner.l"
return PI3D_ROTATE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "scanner.l"
return PI3D_SCALE; 
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "scanner.l"
return SOLID; 
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "scanner.l"
return WIREFRAME; 
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "scanner.l"
return EDGEDWIREFRAME;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "scanner.l"
return ASC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "scanner.l"
return CHRS;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "scanner.l"
return INSTR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "scanner.l"
return LEFTS;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "scanner.l"
return MIDS;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "scanner.l"
return RIGHTS;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "scanner.l"
return LEN;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "scanner.l"
return STRS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "scanner.l"
return STRINGS;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "scanner.l"
return AND;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "scanner.l"
return OR;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "scanner.l"
return EOR;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 194 "scanner.l"
return FLOAT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 195 "scanner.l"
return INT;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 196 "scanner.l"
return ACS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 197 "scanner.l"
return DIV;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 198 "scanner.l"
return MOD;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 199 "scanner.l"
return SQR; 
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 200 "scanner.l"
return LN;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "scanner.l"
return LOG;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "scanner.l"
return EXP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "scanner.l"
return ATN;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "scanner.l"
return TAN;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "scanner.l"
return COS;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "scanner.l"
return SIN; 
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "scanner.l"
return ASN; 
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 208 "scanner.l"
return ABS; 
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "scanner.l"
return DEG; 
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 210 "scanner.l"
return RAD; 
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "scanner.l"
return SGN; 
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "scanner.l"
return VAL; 
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 213 "scanner.l"
return PI; 
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 215 "scanner.l"
return NOT; 
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 216 "scanner.l"
return FALSE; 
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 217 "scanner.l"
return TRUE; 
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 219 "scanner.l"
{ 
                        strcpy(yytext, yytext + 7); 
                        auto s = std::string(yytext);
                        size_t pos;
                        while ((pos = s.find(" ")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }
                        while ((pos = s.find("\"")) != std::string::npos) {
                            s.replace(pos, 1, "");
                        }

                        // Have we already included?
                        if (included_files.count(s) > 0) {
	                        printf("Already included '%s'\n", s.c_str()); 
                        } else {
                            yyfileno++;
                            files_index.insert(std::pair<std::string, int>(s, yyfileno));
                            strcpy(yytext, s.c_str());
                            included_files.insert(std::move(s));
                            yyin = fopen(yytext, "r");
                            if (!yyin) {
                                fprintf(stderr, "Include file '%s' not found", yytext);
                                exit(1);
                            }
	                        std::cout << "Including '" << yytext << "' at line " << yylineno << " as file index " << yyfileno << std::endl;
                            file_stack.push(std::move(file));
                            file = yytext;
                            yylineno_stack.push(yylineno);
                            yylineno = 0;
                            yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
                            BEGIN(INITIAL);
                        }
                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 252 "scanner.l"
{
                        yypop_buffer_state();
                        if (file_stack.size() > 0) {
                            file = file_stack.top();
                            yylineno = yylineno_stack.top();
                            yylineno_stack.pop();
                            file_stack.pop();   
                        }
                        if (!YY_CURRENT_BUFFER) {
                            yyterminate();
                        }
                    }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 264 "scanner.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LINE_NUMBER; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 265 "scanner.l"
{ yylval.v_int = std::stoi(yytext, nullptr, 10); return LITERAL_INT; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 266 "scanner.l"
{ auto v = std::string(yytext); v.erase(0, 1); yylval.v_int = std::stoi(v, nullptr, 16); return LITERAL_INT; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 267 "scanner.l"
{ yylval.v_float = std::stod(yytext); return LITERAL_FLOAT; }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 268 "scanner.l"
{ yylval.v_string = strdup(yytext); return LITERAL_STRING; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 269 "scanner.l"
{ yylval.v_string = strdup(yytext); return STRING_FUNCTION; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 270 "scanner.l"
{ yylval.v_string = strdup(yytext); return INTEGER_FUNCTION; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 271 "scanner.l"
{ yylval.v_string = strdup(yytext); return FLOAT_FUNCTION; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 272 "scanner.l"
{ yylval.v_string = strdup(yytext); return PROCEDURE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 273 "scanner.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_PROCEDURE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 274 "scanner.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_INTEGER_FUNCTION; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 275 "scanner.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_STRING_FUNCTION; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 276 "scanner.l"
{ strcpy(yytext, yytext + 3); yylval.v_string = strdup(yytext); return DEFINE_FLOAT_FUNCTION; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 277 "scanner.l"
{ yylval.v_string = strdup(yytext); return INTEGER_VARIABLE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 278 "scanner.l"
{ yylval.v_string = strdup(yytext); return STRING_VARIABLE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 279 "scanner.l"
{ yylval.v_string = strdup(yytext); return TYPE_VARIABLE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 280 "scanner.l"
{ yylval.v_string = strdup(yytext); return STAR; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 281 "scanner.l"
{ yylval.v_string = strdup(yytext); return VARIABLE; }
	YY_BREAK
case 174:
#line 284 "scanner.l"
case 175:
#line 285 "scanner.l"
case 176:
#line 286 "scanner.l"
case 177:
#line 287 "scanner.l"
case 178:
#line 288 "scanner.l"
case 179:
#line 289 "scanner.l"
case 180:
#line 290 "scanner.l"
case 181:
#line 291 "scanner.l"
case 182:
#line 292 "scanner.l"
case 183:
#line 293 "scanner.l"
case 184:
#line 294 "scanner.l"
case 185:
#line 295 "scanner.l"
case 186:
#line 296 "scanner.l"
case 187:
#line 297 "scanner.l"
case 188:
#line 298 "scanner.l"
case 189:
YY_RULE_SETUP
#line 298 "scanner.l"
{ return yytext[0]; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 300 "scanner.l"
std::cout << "Unknown character: "  << *yytext << std::endl;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 302 "scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2880 "scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 568 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 568 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 567);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 302 "scanner.l"

